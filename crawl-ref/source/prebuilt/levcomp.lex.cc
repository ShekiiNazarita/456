#line 2 "levcomp.lex.cc"

#line 4 "levcomp.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 84
#define YY_END_OF_BUFFER 85
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1180] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   85,   83,   80,   81,
       82,   78,   83,   76,   79,   77,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   80,   34,   36,   83,   83,   83,   83,   83,
       83,   83,   84,    6,   84,   84,    4,    2,    3,   84,
        2,    2,    2,    2,    9,   10,   84,    9,    9,   84,
       12,   84,   32,   80,   33,   82,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   80,   32,

       32,   32,   32,   32,   32,   32,   32,   32,   83,   28,
       23,   28,   78,   83,   27,   79,   77,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   28,   34,   36,   83,   83,   83,
       83,   83,   83,   83,   15,   16,   82,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   83,   13,   15,   13,   13,
       13,   13,   13,   13,   84,   21,   22,   84,   20,   84,
       80,   81,   79,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       80,   34,   36,    0,    0,    0,    0,    0,   34,    0,
        0,    0,    0,    0,    0,    0,    0,   39,    6,    5,
        0,    0,    2,    3,    2,    0,    2,    2,    2,    2,
        9,    9,   10,    9,    9,    9,    0,   11,    0,   12,
       31,    0,   31,   80,   33,    0,    0,   33,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,    0,   30,   31,   80,   31,
       34,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   26,    0,   26,   28,   23,   28,    0,   23,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,    0,   25,    0,   26,
       28,   26,   34,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   15,   16,    0,    0,    0,   16,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    0,   14,   13,
       15,   13,   13,   13,   13,   13,   13,   13,   13,   19,

        0,   19,   21,   22,    0,    0,    0,    0,   18,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    2,    9,    9,    9,
        7,    0,    0,   29,    0,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   34,   31,   31,   31,   31,   31,
       31,   31,    0,   24,    0,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   34,   34,   26,   26,   26,   26,
       26,   26,   26,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,    0,
       17,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   35,    0,    0,    0,    0,    0,
        0,    2,    9,    8,    0,    9,    7,    0,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,    0,
       31,    0,   31,   31,   31,   31,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,    0,   26,    0,
       26,   26,   26,   26,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,    0,
        0,    0,    0,    0,    0,    0,   67,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   66,   43,    0,    0,
        0,    0,    0,    0,    0,   52,   64,    0,    0,    0,
        0,   38,    0,    0,    0,    0,    2,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,    0,   31,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,    0,
       26,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        0,    0,    0,   45,    0,   51,   62,   70,   71,   73,
       72,   74,    0,    0,    0,    0,    0,    0,    0,   47,
       63,    0,   55,    0,    0,    0,    0,    0,    0,    0,

       41,    1,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   54,   49,   57,    0,   53,    0,    0,
        0,    0,   68,   56,   46,    0,    0,   50,    0,    0,

        0,    0,    0,    1,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   65,    0,    0,    0,
        0,   69,    0,   48,    0,    0,    0,    0,    0,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,    0,
       31,   31,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,    0,   26,   26,   13,   13,   13,   13,   13,

       13,   13,   13,    0,    0,   59,    0,   75,    0,    0,
        0,   37,    0,    0,   31,   31,   31,   31,   31,   31,
        0,   31,   31,    0,   31,   26,   26,   26,   26,   26,
       26,    0,   26,   26,    0,   26,   13,   13,   13,   13,
       58,    0,   61,    0,   42,   40,   31,   31,   31,   31,
       31,   31,   26,   26,   26,   26,   26,   26,   13,   13,
       60,    0,   31,   31,   26,   26,   13,    0,   31,   26,
       13,    0,   31,   26,   13,   44,   31,   26,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    1,    7,    1,    1,    1,
        1,    1,    8,    9,   10,    1,    1,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,    1,    1,
        1,    1,    1,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       22,   29,   30,   31,   32,   33,   34,   22,   22,   22,
        1,   35,    1,    1,   22,    1,   36,   22,   22,   37,

       38,   39,   40,   41,   42,   22,   22,   43,   22,   22,
       44,   45,   22,   46,   47,   48,   49,   50,   22,   22,
       22,   22,   51,    1,   52,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[53] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    5,    6,
        6,    1,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    1,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        1,    1
    } ;

static yyconst flex_int16_t yy_base[1197] =
    {   0,
        0,   51,   55,   62,   66,   68,   51,   70,  120,  171,
      222,  273,  324,  375,   79,  176, 2645, 3859,   73, 3859,
     2641, 3859, 2618, 3859, 2607, 3859, 2578,   60, 2578,   66,
     2563,   82,   75,   64,   82, 2562, 2562, 2545,   79,   95,
     2554, 2529,  425,    0, 3859,   79, 2521, 2512, 2505,  150,
       81, 2496, 3859, 3859, 2534,  183, 3859,    0, 3859, 2527,
      187,    0, 2503,  157, 2476, 3859, 2517,  146, 2464,  191,
     3859, 2508,  278,  284, 3859,  380,  384,  388,  393,  399,
      403,  431,  412,  407,  449,  454,  488,  492,  498,  513,
      503,  477,  460,  526,  439,  532,  537,  548,  552,  558,

      564,  569,  573,  586,  590,  598,  605,  609,  279,  624,
     3859,  644,  443,  650, 3859,  651,  596,  632,  637,  649,
      663,  668,  672,  673,  699,  708,  687,  704,  709,  713,
      744,  715,  749,  725,  764,  768,  753,  769,  757,  759,
      776,  781,  785,  795,  810, 3859,  822, 2494, 2492,    0,
     2481,  179, 2476,  181, 2461,  182,  184,  263,  264, 2452,
     2453, 2443,  188,  278, 2451,  298, 2429,  829,  279, 2419,
     2414, 2413,  268,  146,  805,  833, 3859,  839, 3859,  845,
      302, 3859, 2444, 2421, 2430, 2417, 2410, 2417, 2410, 2399,
     2390, 2388, 2372,  282, 2367, 2370, 2366, 2338, 2339, 2334,

     2320, 2326, 2328, 2315, 2303, 2313, 2304, 2295,  284, 2267,
        0,    0, 3859, 2256, 2250, 2248,  179, 2233,    0,  268,
     2239, 2235, 2225, 2231,  425, 2195, 2189, 3859, 3859, 3859,
     2229,  483,    0, 3859,    0, 2223,  576, 2202, 2187,  374,
     2155, 2150, 3859,  265, 2143,  849,  318, 3859, 2191, 3859,
      854,  858,  867,  873, 3859,  879,  883, 3859,  892,  902,
      907,  911,  917,  926,  934,  946,  951,  955,  960,  969,
      973,  983,  995, 1007, 1011, 1015, 1019, 1023, 1030, 1043,
     1051, 1055, 1066, 1070, 1075, 1104, 3859, 1087,    0, 1093,
     1098, 1109, 1113, 1119, 1127, 1132, 1145, 1141, 1151, 1155,

     1167,  890,  996, 1179, 1193, 3859, 1202, 1206, 3859, 1210,
     1211, 1187, 1215, 1221, 1225, 1227, 1231, 1236, 1242, 1133,
     1252, 1047, 1246, 1253, 1262, 1267, 1271, 1273, 1280, 1281,
     1290, 1298, 1305, 1307, 1312, 1322, 1318, 3859, 1346, 1326,
        0, 1350, 1358, 1366, 1371, 1339, 1375, 1377, 1381, 1382,
     1387, 1386, 1393, 1400, 3859, 1421, 1434, 1438, 3859,    0,
     2179, 2162, 2155, 2137, 2129, 2127, 2130, 2118, 2111, 2109,
     2081,  444, 2080, 2077, 2073, 2070, 2069, 2066, 2057, 2055,
     2062, 2053, 2038, 2043, 2031, 2022,  498, 1442, 3859, 2002,
        0,  350, 1995, 1999, 1994, 2009,  430, 1955, 1949, 1446,

     1447, 1455, 1459, 3859, 1463, 1467, 1472, 1481, 3859, 1497,
     1982, 1968, 1966, 1960, 1965, 1966, 1958, 1955, 1964, 1958,
     1935, 1938, 1925,  532, 1922, 1908, 1899, 1910, 1911, 1906,
     1900, 1889, 1891,  514, 1876, 1884, 1864, 1864, 1836, 1501,
     1822,  978, 1805, 1804, 1789, 1778, 1775, 1506, 1510, 1515,
     3859, 1519, 1524, 3859, 1528, 1533, 1537, 1543, 1548, 1552,
     1572, 1580, 1584, 1588, 1593, 1601, 1609, 1616, 1620, 1625,
     1644, 1648, 1637, 1654, 1659, 1669, 1683, 1688, 1694, 1698,
     1708, 1712, 1717, 1732, 1736, 1746, 1740, 1751, 1755, 1759,
     1768, 1772, 1809, 3859, 1815, 1780, 1660, 1764, 1790, 1559,

     1597, 1799, 1803, 1822, 1824, 1828, 1834, 1835, 1840, 1841,
     1845, 1847, 1849, 1859, 1869, 1876, 1883, 1885, 1891, 1887,
     1893, 1895, 1897, 1903, 1931, 1939, 1943, 1914, 1948, 1949,
     1953, 1954, 1490, 1784, 1770, 1762, 1757, 1763, 1761, 1755,
     1753, 1752, 1745, 1728, 1720, 1708,  538, 1715, 1697, 1681,
     1692, 1687, 1680, 1676, 1658, 1663,  582, 1645, 1653, 1638,
     1630, 1602, 1958, 1594,  987, 1591, 1598, 1575, 1568, 1965,
     3859, 1969, 1589, 1585, 1564, 1561, 1556, 1541, 1552, 1554,
     1534, 1535, 1532, 1521, 1521, 1525, 1516, 1517, 1519, 1485,
     1484, 1463, 1465, 1472, 1471, 1469, 1449, 1466, 1466, 1463,

     1435, 1427, 1404, 1999, 3859, 1406, 1079, 1390, 1384, 1395,
     1114, 1418, 2003, 3859, 2007, 2011, 3859, 2015, 2019, 2024,
     2029, 2038, 2043, 2047, 2063, 2067, 2079, 2083, 2088, 2092,
     2101, 2111, 2115, 2129, 2136, 2143, 2154, 2158, 2165, 2170,
     2175, 2179, 2194, 2199, 2204, 2215, 2226, 2231, 2219, 2238,
     2243, 2247, 2251, 2255, 2260, 2265, 2025, 2051, 2119, 2272,
     2130, 2278, 2274, 2291, 2180, 2309, 2102, 2310, 2315, 2270,
     2283, 2319, 2320, 2326, 2327, 2328, 2344, 2351, 2355, 2346,
     2364, 2369, 2371, 2373, 2382, 2386, 2375, 2423, 2387, 2395,
     2409, 2407, 2413, 2414, 1408, 1405, 1387, 1398, 1395, 1383,

     1392, 1396, 1366, 1371, 1367, 1342, 1338, 1345, 1331, 1333,
     1328, 1327, 1326, 1307, 1309, 1317, 1301, 1295, 1273, 1286,
     1286, 1278, 1269, 1257, 1225, 1224, 1214, 1224, 1173, 1213,
     1217, 1202, 1213, 1199, 1206, 1189, 3859, 1187, 1181, 1179,
     1175, 1173, 1149, 1148,  452, 1145, 3859, 3859, 1142, 1121,
     1139, 1128, 1103, 1113, 1088, 3859, 3859, 1073, 1068, 1045,
     1047, 3859, 1036, 1031, 1327, 1015, 1035, 2431, 2435, 2449,
     2467, 2471, 2478, 2483, 2492, 2496, 2505, 2510, 2521, 2530,
     2534, 2539, 2544, 2548, 2553, 2558, 2568, 2576, 2580, 2585,
     2600, 2596, 2608, 2612, 2617, 2623, 2628, 2632, 2637, 2644,

     2655, 2660, 2664, 2669, 2427, 2621, 2676, 2681, 2484, 2682,
     2686, 2519, 2695, 2701, 2707, 2720, 2721, 2722, 2729, 2735,
     2733, 2739, 2741, 2746, 2758, 2767, 2773, 2781, 2782, 2786,
     2790, 2794, 2795, 2799, 2801, 2805, 2807, 2817, 2826, 2818,
     2830, 1032, 1044, 1012, 1027, 1013, 1014, 1002,  998,  994,
      993,  991,  982,  963,  955,  483,  950,  945,  939,  954,
      951,  934,  942,  917,  913,  916,  897,  894,  896,  896,
      917,  912,  911, 3859,  887, 3859, 3859, 3859, 3859, 3859,
     3859, 3859,  905,  489,  883,  884,  888,  887,  886, 3859,
     3859,  874, 3859,  866,  867,  856,  819,  817,  827,  813,

     3859,  850, 2844, 2855, 2866, 2870, 2878, 2882, 2887, 2891,
     2895, 2902, 2906, 2910, 2916, 2927, 2934, 2942, 2948, 2952,
     2963, 2968, 2974, 2980, 2984, 2988, 3002, 3016, 2997, 3006,
     3022, 3026, 3034, 3038, 3042, 3044, 2853, 3057, 2914, 3061,
     3062, 3063, 3070, 3076, 3078, 3082, 3084, 3098, 3088, 3102,
     3116, 3122, 3124, 3130, 3136, 3134, 3138, 3140, 3144, 3142,
     3153, 3158, 3162, 3176,  827,  817,  807,  787,  805,  574,
      782,  784,  789,  786,  783,  776,  767,  777,  768,  732,
      727,  737,  708, 3859, 3859, 3859,  735, 3859,  715,  720,
      713,  712, 3859, 3859, 3859,  723,  700, 3859,  717,  715,

      686, 1664,  685,  714, 3178, 3182, 3187, 3196, 3201, 3210,
     3214, 3219, 3223, 3228, 3236, 3246, 3255, 3251, 3260, 3264,
     3268, 3275, 3283, 3287, 3291, 3292, 3296, 3300, 3302, 3306,
     3315, 3304, 3314, 3319, 3327, 3338, 3340, 3346, 3351, 3353,
     3358, 3359, 3364, 3365,  693,  669,  674,  664,  658,  669,
      649,  664,  661,  631, 1675,  625, 3859,  634,  614,  620,
      613, 3859,  612, 3859,  585, 1703, 1804,  569, 1974, 3374,
     3378, 3387, 3402, 3414, 3419, 3423, 3428, 3434, 3438, 3442,
     3446, 3451, 3382, 3455, 3459, 3460, 3424, 3465, 3473, 3482,
     3486, 3494, 3496, 3501, 3502,  595,  593,  604,  589,  585,

      548, 1985, 2171,  572,  559, 3859,  558, 3859,  526, 2396,
      484, 3859, 2604,  478, 3507, 3511, 3520, 3528, 3539, 3546,
     3552, 3556, 3560, 3564, 3571, 3565, 3577, 3578, 3584, 3583,
     3588, 3596, 3600, 3606, 3615, 3619,  512,  482,  449,  408,
     3859,  428, 3859,  384, 3859, 3859, 3623, 3628, 3632, 3640,
     3644, 3651, 3655, 3657, 3659, 3663, 3669, 3671,  394,  357,
     3859,  348, 3676, 3691, 3682, 3686,  346,  269, 3695, 3700,
      178,   93, 3708, 3713,   73, 3859, 3727, 3714, 3859, 3762,
     3768, 3774, 3780, 3786, 3792, 3798, 3804, 3810, 3816, 3822,
     3828, 3834, 3840, 3846,   56, 3852

    } ;

static yyconst flex_int16_t yy_def[1197] =
    {   0,
     1179,    1, 1180, 1181, 1182, 1182, 1183, 1183, 1179,    9,
     1179,   11, 1179,   13, 1184, 1184, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1185, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1186, 1179, 1187, 1179, 1179,
     1188, 1187, 1187, 1187, 1189, 1179, 1179, 1189, 1189, 1190,
     1179, 1179, 1191, 1179, 1179, 1179, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,   43, 1192,

     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1193, 1179,
     1179, 1179, 1193, 1193, 1179, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193,   43, 1194, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1179, 1179, 1179, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1179, 1195,   43, 1195, 1195,
     1195, 1195, 1195, 1195, 1196, 1179, 1179, 1179, 1179, 1196,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,

     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
       43, 1185, 1179, 1179, 1179, 1179, 1179, 1179, 1185, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1187, 1179, 1187, 1179, 1187, 1187, 1187, 1187,
     1189, 1189, 1179, 1189, 1189, 1189, 1190, 1179, 1179, 1179,
     1191, 1191, 1191, 1179, 1179, 1179, 1179, 1179, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1179, 1191,   99, 1192,
     1192, 1192, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1193, 1193, 1193, 1179, 1179, 1179, 1179, 1179, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1179, 1179, 1193,
      135, 1194, 1194, 1194, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1179, 1179, 1179, 1179, 1179, 1179, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1179, 1179, 1195,
      168, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1196,

     1196, 1196, 1179, 1179, 1179, 1179, 1179, 1196, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1187, 1189, 1189, 1189,
     1179, 1179, 1191, 1179, 1179, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1192, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1193, 1179, 1179, 1193, 1193, 1193, 1193, 1193,

     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1194, 1185, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1196,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,

     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1187, 1189, 1179, 1179, 1189, 1179, 1179, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1195, 1195, 1195, 1195, 1195, 1195,

     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1187, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1191, 1191, 1191, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,

     1179, 1187, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,

     1179, 1179, 1179, 1187, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1195, 1195, 1195, 1195, 1195,

     1195, 1195, 1195, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1195, 1195, 1195, 1195,
     1179, 1179, 1179, 1179, 1179, 1179, 1191, 1191, 1191, 1191,
     1191, 1191, 1193, 1193, 1193, 1193, 1193, 1193, 1195, 1195,
     1179, 1179, 1191, 1191, 1193, 1193, 1195, 1179, 1191, 1193,
     1195, 1179, 1191, 1193, 1195, 1179, 1191, 1193,    0, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179

    } ;

static yyconst flex_int16_t yy_nxt[3912] =
    {   0,
       18,   19,   20,   21,   19,   18,   22,   23,   24,   23,
       25,   26,   18,   27,   28,   29,   18,   30,   18,   18,
       31,   18,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   18,   18,   41,   18,   18,   42,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   43,   71,   72,   43,   44,   54,   55,   56,
       57,  360,   45,   53,   59,   60,   61,   62,   66,   67,
       66,   67,   71,   72,  181,   46,  198,  181,   63,  185,
      176,  177,  178,  176, 1176,  188,  186,  179,   47,  189,
      199,  220,  196,   48,  200,   49,  190,   50,  205,  192,

       51,   52,  193,  197, 1176,  199,  194,  207,   64,  195,
      206,  201,   68,  180,   68,  208,  226,   69,  227,   69,
       73,   74,   75,   76,   74,   73,   77,   78,   79,   78,
       80,   81,   73,   82,   83,   84,   73,   85,   73,   73,
       86,   73,   87,   88,   89,   90,   91,   92,   93,   94,
       95,   73,   73,   96,   97,   73,   98,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   99,  239,  224,   99,  100,  176,  177,  178,
      176,  398,  101,  399,  179,  229,  231,  232,  230,  234,
      236,  237,  244,  248,  249,  102,  225,  245,  363,  370,

      366,  374,  371,  240,  367,  364,  372,  383,  103,  373,
      180,  368,  375,  104,  226,  105,  227,  106, 1175,  384,
      107,  108,  109,  110,  111,  112,  110,  109,  113,  114,
      115,  114,  116,  117,  109,  118,  119,  120,  109,  121,
      109,  109,  122,  109,  123,  124,  125,  126,  127,  128,
      129,  130,  131,  109,  109,  132,  133,  109,  134,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  135,  376,  378,  135,  136,  252,
      303,  252,  252,  303,  137,  254,  255,  256,  254,  377,
      385,  392,  396,  379,  421,  440,  426,  138,  386,  388,

      389,  388,  388,  181,  437,  377,  181,  438,  422, 1172,
      139,  244,  253,  304,  397,  140,  245,  141,  257,  142,
      248,  249,  143,  144,   18,  145,  146,  147,  145,   18,
       22,   23,   24,  148,  149,   26,  150,  151,  152,  153,
      150,  154,  150,  150,  155,  150,  156,  157,  158,  159,
      160,  161,  162,  163,  164,  150,  150,  165,  166,  150,
      167,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,   18,   18,  168,  563,  549,  168,
       44,  256,  258,  256,  256,  252,   45,  252,  252,  252,
      239,  252,  252, 1171,  252, 1168,  252,  252,  259,  169,

      252, 1167,  252,  252,  252, 1161,  252,  252,  252,  259,
      252,  252,  170,  252,  257,  252,  252,  171,  253,  172,
      240,  173,  253,  263,  174,   52,  211,  253, 1162,  211,
      212,  261,  252,  253,  252,  252,  213,  253,  262, 1161,
      252,  253,  252,  252,  303, 1160,  253,  303,  260,  224,
      252,  283,  252,  252,  396,  252,  544,  252,  252,  284,
     1143,  252,  214,  252,  252,  253,  885,  215,  264,  216,
      545,  225,  265,  253,  217,  218,  397,  304,  252,  266,
      252,  252,  886,  253,  267,  229,  231,  232,  253,  252,
      280,  252,  252,  252,  253,  252,  252,  971, 1159,  252,

      279,  252,  252,  989,  252,  268,  252,  252,  269,  272,
      274,  253,  270,  972,  252,  271,  252,  252,  560,  990,
      273,  561,  253, 1141,  275,  276,  253,  252, 1146,  252,
      252,  278,  253,  252, 1145,  252,  252,  253,  286,  287,
      286,  286,  277,  597,  586,  281,  598,  253,  285,  252,
      708,  252,  252,  289,  255,  256,  289,  282,  587,  291,
      253,  291,  291, 1144,  709,  252,  253,  252,  252, 1143,
      252,  253,  252,  252,  252, 1142,  252,  252,  234,  236,
      237,  293,  253, 1141, 1140,  288,  257,  252, 1046,  252,
      252,  252,  292,  252,  252,  275, 1108,  303,  253,  252,

      303,  252,  252,  253, 1047, 1139,  252,  253,  252,  252,
      252,  719,  252,  252,  720, 1106, 1138,  294, 1137, 1112,
      253, 1109,  297, 1108,  253,  305,  306,  307,  305, 1107,
      304, 1106,  253,  303,  295,  296,  303, 1105,  303,  253,
      299,  303,  300,  253,  298,  307,  309,  307,  307,  311,
      303,  303,  303,  303,  303,  303,  312, 1104,  308,  301,
      310,  310, 1103,  313,  303,  314,  304,  303, 1102,  303,
     1101,  304,  303,  303,  303, 1064,  303,  303,  308, 1100,
     1062, 1099,  315,  304,  304,  304,  316, 1098,  303,  319,
      323,  303,  320,  317, 1097, 1096,  321,  304,  318,  322,

      303,  324,  304,  303, 1057,  303,  304,  304,  303,  303,
      303,  325,  303,  303,  303,  329,  303,  303, 1004,  303,
      327,  304, 1069, 1066, 1065,  326,  303,  330, 1064,  303,
     1063,  336,  332,  304, 1062, 1061, 1060,  328,  304,  331,
     1059, 1058,  304,  304,  333,  303, 1057,  304,  303,  304,
      337,  338,  339,  337,  303, 1056,  334,  303,  303,  304,
      303,  303,  340,  303,  335,  341,  306,  307,  341,  343,
      303,  219,  343,  303, 1055, 1054,  219,  303,  304, 1053,
      303,  345,  303,  304, 1052,  303,  303,  304,  998,  303,
     1051,  304, 1050,  304,  995,  326,  303,  994,  308,  303,

      993,  346,  344,  304, 1049,  349,  401,  347, 1048,  401,
      304,  354,  355,  356,  354,  304,  988, 1045,  986,  304,
      351,  348,  352,  358,  359,  358,  358,  350,  985,  304,
      391,  355,  356,  391,  403,  404,  405,  403,  984,  402,
      407,  404,  407,  407,  357,  353,  408,  409,  410,  408,
      450,  451,  452,  450, 1004,  252,  357,  252,  252,  252,
     1003,  252,  252,  357, 1002, 1001, 1000,  406,  453,  454,
      453,  453,  999,  406,  254,  255,  256,  254,  998,  402,
      256,  255,  256,  256,  455,  287,  455,  455,  253,  997,
      996,  303,  253,  252,  303,  252,  252,  995,  994,  993,

      448,  253,  259,  252,  992,  252,  252,  257,  252,  991,
      252,  252,  252,  257,  252,  252,  988,  987,  252,  457,
      252,  252,  986,  985,  304,  456,  253,  252,  984,  252,
      252,  983,  982,  981,  458,  252,  253,  252,  252,  980,
      979,  253,  460,  978,  459,  253,  461,  252,  977,  252,
      252,  253,  252,  893,  252,  252,  252,  976,  252,  252,
      253,  252,  891,  252,  252,  890,  462,  463,  253,  975,
      252,  464,  252,  252,  252,  974,  252,  252,  973,  607,
      253,  466,  607,  970,  252,  253,  252,  252,  607,  253,
      465,  607,  969,  882,  253,  467,  252,  303,  252,  252,

      303,  468,  881,  253,  880,  879,  469,  253,  252,  878,
      252,  252,  252,  877,  252,  252,  252,  253,  252,  252,
      252,  470,  252,  252,  252,  876,  252,  252,  608,  253,
      304,  252,  968,  252,  252,  471,  472,  608,  874,  473,
      967,  253,  476,  475,  252,  253,  252,  252,  303,  253,
      474,  303,  252,  253,  252,  252,  252,  253,  252,  252,
      966,  965,  902,  477,  253,  901,  900,  252,  479,  252,
      252,  252,  899,  252,  252,  508,  252,  253,  252,  252,
      607,  304,  478,  607,  480,  253,  898,  897,  252,  253,
      252,  252,  896,  481,  291,  482,  291,  291,  483,  291,

      253,  291,  291,  895,  253,  286,  287,  286,  286,  253,
      485,  454,  485,  485,  252,  765,  252,  252,  765,  894,
      252,  253,  252,  252,  893,  484,  892,  292,  252,  608,
      252,  252,  292,  252,  303,  252,  252,  303,  253,  891,
      486,  471,  252,  292,  252,  252,  252,  253,  252,  252,
      890,  889,  252,  253,  252,  252,  252,  490,  252,  252,
      487,  253,  488,  505,  766,  297,  253,  304,  252,  489,
      252,  252,  888,  887,  765,  253,  884,  765,  883,  253,
      493,  494,  495,  493,  882,  253,  881,  298,  303,  253,
      880,  303,  879,  491,  305,  306,  307,  305,  878,  497,

      877,  253,  492,  307,  306,  307,  307,  339,  338,  339,
      339,  303,  303,  304,  303,  303,  303,  876,  875,  303,
      310,  304,  303,  766,  874,  303,  303,  308,  303,  303,
      873,  303,  303,  872,  496,  303,  308,  303,  498,  501,
      303,  500,  871,  303,  304,  304,  303,  303,  499,  304,
      303,  502,  503,  303,  303,  304,  303,  303,  504,  304,
      870,  304,  869,  303,  506,  304,  303,  868,  303,  509,
      304,  303,  303,  867,  303,  303,  304,  303,  507,  510,
      304,  303,  303,  866,  303,  303,  304,  304,  865,  757,
      511,  303,  512,  516,  303,  513,  304,  756,  864,  303,

      515,  304,  303,  863,  514,  304,  303,  304,  303,  303,
      517,  303,  862,  303,  304,  304,  303,  861,  519,  337,
      338,  339,  337,  303,  304,  520,  303,  303,  765,  518,
      303,  765,  304,  860,  859,  521,  858,  748,  747,  304,
      303,  304,  522,  303,  857,  523,  304,  339,  338,  339,
      339,  343,  304,  219,  343,  856,  304,  855,  219,  343,
      304,  219,  343,  854,  524,  853,  219,  525,  494,  526,
      525,  852,  303,  304,  219,  303,  303,  766,  303,  303,
      528,  303,  303,  303,  344,  303,  303,  303,  303,  851,
      303,  303,  344,  531,  303,  850,  849,  303,  527,  511,

      344,  354,  355,  356,  354,  304,  349,  737,  848,  304,
      529,  304,  847,  846,  530,  304,  304,  845,  844,  843,
      304,  304,  358,  355,  358,  358,  842,  304,  350,  532,
      767,  764,  763,  533,  357,  388,  389,  388,  388,  358,
      762,  358,  358,  388,  389,  388,  388,  401,  401,  761,
      401,  401,  760,  759,  758,  357,  570,  571,  572,  570,
      403,  404,  405,  403,  407,  404,  407,  407,  410,  409,
      410,  410,  357,  407,  757,  407,  407,  756,  755,  754,
      402,  402,  408,  409,  410,  408,  753,  752,  751,  402,
      750,  303,  749,  406,  303,  748,  747,  406,  410,  409,

      410,  410,  604,  605,  604,  604,  406,  613,  614,  615,
      613,  616,  617,  618,  616,  402,  450,  451,  452,  450,
      452,  451,  452,  452,  304,  453,  454,  453,  453,  455,
      287,  455,  455,  694,  252,  746,  252,  252,  252,  745,
      252,  252,  744,  743,  252,  619,  252,  252,  742,  252,
      741,  252,  252,  252,  740,  252,  252,  448,  253,  739,
      303,  448,  620,  303,  738,  737,  242,  253,  736,  621,
      735,  253,  623,  252,  734,  252,  252,  253,  622,  661,
      733,  252,  253,  252,  252,  252,  253,  252,  252,  252,
      624,  252,  252,  304,  252,  732,  252,  252,  303,  731,

      627,  303,  252,  625,  252,  252,  253,  730,  626,  628,
      252,  729,  252,  252,  253,  662,  728,  252,  253,  252,
      252,  252,  253,  252,  252,  563,  252,  253,  252,  252,
      629,  304,  632,  727,  630,  253,  726,  725,  252,  634,
      252,  252,  631,  253,  724,  252,  633,  252,  252,  252,
      253,  252,  252,  637,  253,  252,  723,  252,  252,  253,
      252,  303,  252,  252,  303, 1067,  635,  638, 1067,  722,
      252,  253,  252,  252,  721,  639, 1067,  636,  253, 1067,
      718,  717,  253,  640,  252,  658,  252,  252,  253,  252,
      716,  252,  252,  253,  304,  252,  715,  252,  252,  252,

      714,  252,  252,  253, 1110,  642,  641, 1110,  713,  252,
      712,  252,  252,  252, 1068,  252,  252,  253,  252,  711,
      252,  252,  253,  643,  646, 1068,  644,  645,  253,  710,
      647,  648,  253,  252,  707,  252,  252,  485,  454,  485,
      485,  252,  253,  252,  252,  706,  253,  650,  605,  650,
      650,  253,  652, 1111,  252,  652,  252,  705,  252,  252,
      252,  704,  252,  252,  703,  303,  253,  649,  303,  252,
      292,  252,  252,  252,  253,  252,  252,  702,  701,  700,
      253,  303,  651,  699,  303,  253,  486,  698,  697,  253,
      659,  303,  657,  253,  303,  696,  695,  654,  304,  612,

      303,  653,  253,  303,  303, 1067,  253,  303, 1067,  655,
      493,  494,  495,  493,  304,  656,  495,  494,  495,  495,
      660,  611,  663,  303,  304,  303,  303,  664,  303,  303,
      610,  440,  303,  304,  665,  303,  303,  304,  303,  303,
      666,  303,  303,  304,  303,  303,  303,  609,  303,  303,
      303,  303,  670,  303, 1068,  672,  304,  667,  304,  668,
      303,  669,  304,  303,  606,  675,  671,  673,  304,  304,
      303,  603,  676,  303,  304,  304,  674,  303,  602,  304,
      303,  304,  601,  304,  303,  677,  303,  303,  303,  303,
      678,  303,  303,  304,  303,  303,  303,  303,  303,  303,

      600,  303,  680,  304,  303,  599,  679,  303,  596,  684,
      304,  686,  595,  685,  594,  303,  683,  304,  303,  304,
      681,  304,  593,  682,  592,  304,  591,  304,  590,  304,
      589,  304,  525,  494,  526,  525,  588,  304,  687,  219,
      526,  494,  526,  526,  688,  605,  604,  688,  304,  690,
      303,  585,  690,  303,  303,  303,  689,  303,  303,  604,
      605,  604,  604,  584,  583,  344,  570,  571,  572,  570,
      572,  571,  572,  572,  582, 1113,  581,  304, 1113,  580,
      527,  579,  304,  304,  578,  577, 1110,  304,  304, 1110,
      576,  692,  575,  574,  573,  693,  569,  568,  691,  402,

      604,  605,  604,  604,  613,  614,  615,  613,  615,  614,
      615,  615,  616,  617,  618,  616,  618,  617,  618,  618,
      252,  567,  252,  252, 1114,  252,  303,  252,  252,  303,
      252,  566,  252,  252,  565, 1111,  564,  768,  769,  252,
      562,  252,  252,  805,  252,  559,  252,  252,  252,  558,
      252,  252,  303,  253,  242,  303,  557,  771,  253,  304,
      770,  772,  242,  253,  252,  806,  252,  252,  252,  556,
      252,  252,  253,  555,  554,  553,  773,  253,  775,  774,
      252,  253,  252,  252,  252,  304,  252,  252,  552,  252,
      551,  252,  252,  252,  550,  252,  252,  253,  549,  548,

      547,  253,  252,  303,  252,  252,  303,  777,  546,  776,
      778,  543,  252,  253,  252,  252,  252,  253,  252,  252,
      303,  779,  253,  303,  815,  542,  253,  541,  780,  781,
      252,  303,  252,  252,  303,  253,  304,  252,  540,  252,
      252,  782,  539,  538,  252,  253,  252,  252,  809,  253,
      807,  783,  784,  304,  785,  252,  537,  252,  252,  252,
      536,  252,  252,  253,  304,  786,  252,  535,  252,  252,
      253,  252, 1113,  252,  252, 1113,  252,  253,  252,  252,
      252,  303,  252,  252,  303,  534,  789,  787,  253,  361,
      788,  790,  253,  248,  449,  252,  791,  252,  252,  253,

      252,  448,  252,  252,  253,  252,  242,  252,  252,  253,
      813,  793,  238,  253,  304,  794,  252,  447,  252,  252,
      252, 1114,  252,  252,  792,  234,  795,  252,  253,  252,
      252,  229,  252,  253,  252,  252,  446,  445,  253,  650,
      605,  650,  650,  444,  252,  796,  252,  252,  652,  253,
      252,  652,  252,  253,  252,  252,  252,  797,  252,  252,
      253,  252,  443,  252,  252,  253,  803,  798,  252,  803,
      442,  303,  253,  303,  303,  303,  303,  253,  303,  303,
      441,  253,  303,  228,  303,  253,  799,  303,  818,  253,
      811,  808,  303,  223,  253,  303,  802,  653,  222,  253,

      221,  800,  812,  801,  304,  439,  304,  810,  304,  819,
      303,  303,  304,  303,  303,  804,  303,  304,  436,  303,
      303,  303,  435,  303,  303,  304,  434,  303,  303,  303,
      303,  303,  303,  814,  433,  432,  821,  822,  823,  816,
      431,  820,  817,  304,  304,  303,  430,  303,  303,  304,
      303,  429,  303,  304,  304,  303,  303,  824,  428,  303,
      304,  304,  304,  828,  427,  303,  426,  826,  303,  825,
      303,  827,  303,  303,  303,  303,  303,  303,  304,  303,
      304,  830,  831,  303,  832,  304,  303,  303,  303,  304,
      303,  303,  425,  424,  829,  423,  690, 1110,  304,  690,

     1110,  833,  420,  304,  419,  304,  418,  304,  303,  304,
      303,  303,  834,  303,  303,  840,  304,  303,  840,  417,
      304,  304,  416,  835,  688,  605,  604,  688,  303,  304,
      836,  303,  252,  415,  252,  252,  252,  414,  252,  252,
      413,  304,  412,  304,  411,  691, 1111,  304,  304,  839,
      252,  904,  252,  252,  183,  838,  934,  304,  395,  837,
      903,  304,  394,  393,  841,  253,  390,  387,  252,  253,
      252,  252,  252,  382,  252,  252,  381,  905,  906,  252,
      380,  252,  252,  253,  252,  303,  252,  252,  303,  908,
      907,  369,  365,  252,  909,  252,  252,  252,  362,  252,

      252,  253,  361,  938,  361,  253,  252,  910,  252,  252,
      250,  252,  253,  252,  252,  246,  911,  253,  304,  243,
      303,  912,  252,  303,  252,  252,  253,  242,  238,  234,
      253,  252,  913,  252,  252,  252,  229,  252,  252,  253,
      252,  914,  252,  252,  253,  252,  228,  252,  252,  252,
      223,  252,  252,  304,  252,  253,  252,  252,  917,  252,
      222,  252,  252,  915,  253,  221,  210,  916,  253,  252,
      209,  252,  252,  253,  918,  204,  919,  252,  253,  252,
      252,  252,  253,  252,  252,  203,  252,  253,  252,  252,
      202,  922,  253,  191,  187,  184,  923,  252,  920,  252,

      252,  252,  253,  252,  252, 1113,  921,  925, 1113,  252,
      253,  252,  252,  252,  253,  252,  252,  183,  252,  253,
      252,  252,  303,  924,  252,  303,  252,  252,  183,  252,
      253,  252,  252,  252,  253,  252,  252,  935,  252,  926,
      252,  252,  253,  182, 1179,  252,  253,  252,  252, 1179,
     1179,  253,  928,  927, 1114,  304,  252,  253,  252,  252,
     1179,  252,  253,  252,  252,  803,  253,  252,  803, 1179,
      252,  253,  252,  252,  929, 1179,  930,  303,  253, 1179,
      303, 1179,  303,  303, 1179,  303,  303,  303, 1179,  253,
      303,  931,  937,  939,  253,  932,  303,  940,  253,  303,

     1179, 1179,  303,  253,  936,  303,  941, 1179,  303, 1179,
      304,  303,  942, 1179,  804,  304,  304, 1179,  943,  933,
      304,  303,  303,  303,  303,  303,  303, 1179, 1179,  304,
      303,  944,  945,  303,  303,  304,  303,  303, 1179,  303,
      303,  304,  303,  303, 1179,  303, 1179,  303, 1179,  948,
      303,  946, 1179, 1179,  304,  304,  304,  947, 1179,  303,
     1179,  950,  303,  304, 1179,  949, 1179,  304,  303,  304,
     1179,  303, 1179,  304,  303,  304,  951,  303,  953, 1179,
      304, 1179,  303,  303,  954,  303,  303,  303,  952, 1179,
      303,  303,  304,  956,  303,  303,  303, 1179,  303,  303,

      303,  304,  303,  303,  955,  303,  303,  304,  303,  303,
     1179,  303, 1179, 1179, 1179,  304,  304,  957,  303,  840,
      304,  303,  840,  959,  304,  958, 1179,  303,  304,  304,
      303,  303, 1179,  304,  303,  304, 1179, 1179, 1179,  304,
     1179,  304, 1179,  960,  961,  252, 1179,  252,  252, 1179,
     1179,  304,  304,  962,  303, 1005,  252,  303,  252,  252,
      304,  963, 1179, 1179,  304, 1179, 1006,  252,  841,  252,
      252,  252, 1179,  252,  252, 1179, 1179, 1007,  253,  252,
      964,  252,  252,  252, 1179,  252,  252,  304,  252,  253,
      252,  252,  252, 1179,  252,  252,  252, 1179,  252,  252,

      253, 1179, 1179,  252,  253,  252,  252,  252, 1008,  252,
      252,  252,  253,  252,  252,  303,  253,  252,  303,  252,
      252,  253, 1179, 1179, 1179,  253, 1179, 1009,  252,  253,
      252,  252, 1179, 1179, 1179,  252,  253,  252,  252, 1179,
      253, 1010, 1179,  252,  253,  252,  252, 1179,  304,  252,
      253,  252,  252,  252, 1179,  252,  252, 1011, 1179, 1014,
     1012,  253, 1013, 1015,  252, 1179,  252,  252,  253,  252,
     1179,  252,  252, 1179, 1016,  252,  253,  252,  252, 1179,
     1179,  252,  253,  252,  252,  252,  253,  252,  252,  252,
     1179,  252,  252, 1179, 1179, 1179, 1017,  253,  252, 1179,

      252,  252,  253,  252, 1179,  252,  252,  252,  253,  252,
      252, 1018, 1179, 1019,  253, 1179, 1179,  252,  253,  252,
      252, 1179,  253,  252, 1179,  252,  252,  252, 1179,  252,
      252,  253, 1020, 1179, 1179,  252,  253,  252,  252,  303,
      253, 1179,  303,  303, 1021,  303,  303, 1179,  303, 1025,
      253, 1179, 1179, 1026, 1022, 1027,  253, 1179,  303, 1023,
      253,  303,  303,  303,  303,  303,  303,  303,  253, 1179,
     1179,  303,  304, 1024,  303, 1179,  304,  303,  304,  303,
      303, 1179,  303,  303, 1179,  303,  303, 1028,  303,  303,
     1179,  304,  303, 1029, 1179,  304,  304,  304, 1030,  303,

     1179, 1179,  303,  303,  304, 1179,  303, 1179, 1033, 1179,
      304, 1179,  304, 1034, 1031, 1179,  304,  303,  304, 1179,
      303, 1179,  304,  303, 1032,  303,  303, 1035,  303, 1179,
     1179,  303,  304, 1036,  303,  303,  304,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303, 1179,  303, 1179,
      304, 1039, 1037, 1179,  303, 1179,  304,  303,  304,  303,
     1040, 1038,  303,  303,  304, 1179,  303, 1179,  304, 1179,
      304, 1179,  304, 1179,  304, 1179,  304,  303,  304,  252,
      303,  252,  252,  252, 1179,  252,  252,  304,  252, 1041,
      252,  252,  304, 1179, 1179, 1043,  304,  252, 1179,  252,

      252, 1042,  252, 1179,  252,  252, 1179, 1070, 1179, 1044,
      304,  252,  253,  252,  252,  252,  253,  252,  252, 1179,
      252,  253,  252,  252,  252, 1179,  252,  252, 1179,  252,
      253,  252,  252, 1179, 1072,  253, 1071,  252, 1179,  252,
      252, 1179, 1073, 1179,  253, 1179, 1074,  252,  253,  252,
      252, 1179,  252,  253,  252,  252,  252,  253,  252,  252,
     1179,  252,  253,  252,  252,  252, 1075,  252,  252,  252,
      253,  252,  252, 1179, 1179, 1077,  252, 1078,  252,  252,
      253, 1076, 1179, 1179, 1080,  253,  252, 1080,  252,  253,
      252,  252,  303,  303,  253,  303,  303,  303,  253, 1179,

      303,  303,  253,  303,  303,  303,  303,  303,  303,  253,
      303, 1083, 1079, 1179, 1179,  303,  303,  253,  303,  303,
      303,  253, 1179,  303, 1082,  304,  304, 1086,  303, 1179,
      304,  303, 1084, 1081,  304, 1085,  304, 1087,  304,  303,
      304,  303,  303, 1179,  303, 1179, 1179,  303,  304,  304,
      303, 1088,  303,  304,  303,  303, 1179,  303, 1179,  303,
      303,  304,  303,  303, 1090, 1093,  303, 1091, 1093,  303,
     1179, 1179,  304, 1179,  304,  252, 1089,  252,  252,  252,
      304,  252,  252,  303, 1179,  304,  303,  304,  252, 1179,
      252,  252,  304,  304, 1179, 1179, 1092, 1179,  304,  304,

     1179, 1115, 1095,  252, 1179,  252,  252, 1179,  253, 1179,
     1116, 1179,  253, 1117, 1094,  252,  304,  252,  252, 1179,
      252,  253,  252,  252,  252,  303,  252,  252,  303,  252,
     1118,  252,  252, 1179, 1119,  252,  253,  252,  252, 1121,
     1129,  252, 1121, 1080, 1179,  252, 1080,  252,  253,  252,
      252, 1179, 1124,  253,  252, 1124,  303,  253,  304,  303,
      303,  303,  253,  303,  303, 1179,  303, 1179,  253,  303,
     1120, 1128,  253, 1179,  303, 1179,  253,  303, 1126, 1179,
      253, 1179, 1127,  303, 1130,  253,  303,  303, 1122,  304,
      303, 1179, 1081,  304,  304, 1132, 1123, 1093, 1132,  304,

     1093, 1125,  303, 1135, 1179,  303, 1135,  304,  252, 1179,
      252,  252,  252, 1179,  252,  252,  304, 1179, 1147, 1179,
      304,  252, 1131,  252,  252, 1179, 1179, 1148,  304,  252,
      304,  252,  252, 1179, 1179,  304,  304, 1179, 1179, 1149,
      252,  253,  252,  252, 1133,  253, 1094,  252, 1179,  252,
      252, 1134, 1136, 1121,  253,  252, 1121,  252, 1179,  252,
      252,  252,  253,  252,  252, 1124,  303,  252, 1124,  303,
     1179, 1179,  252,  253,  252,  252, 1153, 1179,  303,  303,
      253,  303,  303, 1150,  303,  303,  253,  303,  303,  303,
      253, 1179,  303, 1154,  253, 1155, 1179, 1132,  253,  304,

     1132,  303, 1122, 1179,  303,  253, 1151,  303, 1179, 1179,
      303,  304,  304, 1179, 1125, 1179, 1135,  304,  304, 1135,
      303, 1152,  304,  303,  252, 1156,  252,  252, 1179,  252,
      304,  252,  252,  252,  304,  252,  252, 1179, 1179, 1163,
      304,  252, 1179,  252,  252,  252, 1133,  252,  252,  304,
     1157, 1179,  252,  304,  252,  252,  303,  253,  303,  303,
      303,  303,  253,  303,  303, 1136,  253,  303, 1165, 1158,
      303, 1179,  303,  303,  253,  303, 1179,  252,  253,  252,
      252, 1179, 1179,  303, 1164,  253,  303,  303, 1179,  304,
      303,  304,  252,  304,  252,  252,  252,  304,  252,  252,

     1179,  303, 1179,  304,  303,  304, 1179, 1166, 1179,  252,
      253,  252,  252, 1179,  303,  303,  304,  303,  303, 1177,
      304, 1179, 1179, 1179, 1178,  253, 1179, 1179,  252,  253,
      252,  252, 1179, 1170,  304, 1173, 1179, 1179, 1169, 1179,
     1174, 1179,  253, 1179, 1179, 1179, 1179,  304,  304, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179,  253,   53,   53,   53,   53,   53,   53,   58,   58,
       58,   58,   58,   58,   65,   65,   65,   65,   65,   65,
       70,   70,   70,   70,   70,   70,  175,  175,  175,  175,
      175,  175,  219,  219, 1179,  219,  219,  219,  230,  230,

      230,  230,  230,  230,  233, 1179, 1179, 1179,  233,  233,
      235,  235,  235,  235,  235,  235,  241,  241, 1179, 1179,
      241,  241,  247,  247,  247,  247,  247,  247,  251,  251,
     1179,  251,  251,  251,  290,  290, 1179,  290,  290,  290,
      302,  302, 1179, 1179, 1179,  302,  342,  342, 1179,  342,
      342,  342,  400,  400, 1179, 1179, 1179,  400,   17, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,

     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179
    } ;

static yyconst flex_int16_t yy_chk[3912] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    7,    7,    2,    2,    3,    3,    3,
        3, 1195,    2,    4,    4,    4,    4,    4,    5,    5,
        6,    6,    8,    8,   19,    2,   34,   19,    4,   28,
       15,   15,   15,   15, 1175,   30,   28,   15,    2,   30,
       34,   46,   33,    2,   35,    2,   30,    2,   39,   32,

        2,    2,   32,   33, 1172,   46,   32,   40,    4,   32,
       39,   35,    5,   15,    6,   40,   51,    5,   51,    6,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   10,   64,   50,   10,   10,   16,   16,   16,
       16,  174,   10,  174,   16,   56,   56,   56,   61,   61,
       61,   61,   68,   70,   70,   10,   50,   68,  152,  156,

      154,  157,  156,   64,  154,  152,  156,  163,   10,  156,
       16,  154,  157,   10,  217,   10,  217,   10, 1171,  163,
       10,   10,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   12,  158,  159,   12,   12,   73,
      109,   73,   73,  109,   12,   74,   74,   74,   74,  158,
      164,  169,  173,  159,  194,  220,  220,   12,  164,  166,

      166,  166,  166,  181,  209,  169,  181,  209,  194, 1168,
       12,  244,   73,  109,  173,   12,  244,   12,   74,   12,
      247,  247,   12,   12,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   14,  392,  392,   14,
       14,   76,   76,   76,   76,   77,   14,   77,   77,   78,
      240,   78,   78, 1167,   79, 1162,   79,   79,   78,   14,

       80, 1160,   80,   80,   81, 1159,   81,   81,   84,   80,
       84,   84,   14,   83,   76,   83,   83,   14,   77,   14,
      240,   14,   78,   84,   14,   14,   43,   79, 1144,   43,
       43,   83,   82,   80,   82,   82,   43,   81,   83, 1142,
       95,   84,   95,   95,  113, 1140,   83,  113,   82,  225,
       85,   95,   85,   85,  397,   86,  372,   86,   86,   95,
     1139,   93,   43,   93,   93,   82,  745,   43,   85,   43,
      372,  225,   85,   95,   43,   43,  397,  113,   92,   85,
       92,   92,  745,   85,   86,  232,  232,  232,   86,   87,
       93,   87,   87,   88,   93,   88,   88,  856, 1138,   89,

       92,   89,   89,  884,   91,   87,   91,   91,   87,   88,
       89,   92,   87,  856,   90,   87,   90,   90,  387,  884,
       88,  387,   87, 1137,   89,   90,   88,   94, 1114,   94,
       94,   91,   89,   96, 1111,   96,   96,   91,   97,   97,
       97,   97,   90,  434,  424,   94,  434,   90,   96,   98,
      547,   98,   98,   99,   99,   99,   99,   94,  424,  100,
       94,  100,  100, 1109,  547,  101,   96,  101,  101, 1107,
      102,   97,  102,  102,  103, 1105,  103,  103,  237,  237,
      237,  102,   98, 1104, 1101,   98,   99,  104,  970,  104,
      104,  105,  100,  105,  105,  102, 1100,  117,  101,  106,

      117,  106,  106,  102,  970, 1099,  107,  103,  107,  107,
      108,  557,  108,  108,  557, 1098, 1097,  103, 1096, 1068,
      104, 1065,  106, 1063,  105,  110,  110,  110,  110, 1061,
      117, 1060,  106,  118,  104,  105,  118, 1059,  119,  107,
      107,  119,  107,  108,  106,  112,  112,  112,  112,  118,
      120,  114,  116,  120,  114,  116,  119, 1058,  110,  108,
      114,  116, 1056,  119,  121,  120,  118,  121, 1054,  122,
     1053,  119,  122,  123,  124, 1052,  123,  124,  112, 1051,
     1050, 1049,  121,  120,  114,  116,  121, 1048,  127,  123,
      124,  127,  123,  121, 1047, 1046,  123,  121,  122,  123,

      125,  124,  122,  125, 1045,  128,  123,  124,  128,  126,
      129,  125,  126,  129,  130,  127,  132,  130, 1004,  132,
      126,  127, 1003, 1001, 1000,  125,  134,  128,  999,  134,
      997,  132,  130,  125,  996,  992,  991,  126,  128,  129,
      990,  989,  126,  129,  130,  131,  987,  130,  131,  132,
      133,  133,  133,  133,  137,  983,  131,  137,  139,  134,
      140,  139,  134,  140,  131,  135,  135,  135,  135,  136,
      138,  136,  136,  138,  982,  981,  136,  141,  131,  980,
      141,  138,  142,  133,  979,  142,  143,  137,  978,  143,
      977,  139,  976,  140,  975,  138,  144,  974,  135,  144,

      973,  139,  136,  138,  972,  142,  175,  140,  971,  175,
      141,  145,  145,  145,  145,  142,  969,  968,  967,  143,
      143,  141,  143,  147,  147,  147,  147,  142,  966,  144,
      168,  168,  168,  168,  176,  176,  176,  176,  965,  175,
      178,  178,  178,  178,  145,  144,  180,  180,  180,  180,
      246,  246,  246,  246,  902,  251,  147,  251,  251,  252,
      900,  252,  252,  168,  899,  898,  897,  176,  253,  253,
      253,  253,  896,  178,  254,  254,  254,  254,  895,  180,
      256,  256,  256,  256,  257,  257,  257,  257,  251,  894,
      892,  302,  252,  259,  302,  259,  259,  889,  888,  887,

      246,  253,  259,  260,  886,  260,  260,  254,  261,  885,
      261,  261,  262,  256,  262,  262,  883,  875,  263,  261,
      263,  263,  873,  872,  302,  260,  259,  264,  871,  264,
      264,  870,  869,  868,  262,  265,  260,  265,  265,  867,
      866,  261,  264,  865,  263,  262,  265,  266,  864,  266,
      266,  263,  267,  863,  267,  267,  268,  862,  268,  268,
      264,  269,  861,  269,  269,  860,  266,  267,  265,  859,
      270,  268,  270,  270,  271,  858,  271,  271,  857,  442,
      266,  270,  442,  855,  272,  267,  272,  272,  565,  268,
      269,  565,  854,  853,  269,  270,  273,  303,  273,  273,

      303,  271,  852,  270,  851,  850,  272,  271,  274,  849,
      274,  274,  275,  848,  275,  275,  276,  272,  276,  276,
      277,  273,  277,  277,  278,  847,  278,  278,  442,  273,
      303,  279,  846,  279,  279,  274,  275,  565,  845,  276,
      844,  274,  279,  278,  280,  275,  280,  280,  322,  276,
      277,  322,  281,  277,  281,  281,  282,  278,  282,  282,
      843,  842,  767,  280,  279,  766,  764,  283,  282,  283,
      283,  284,  763,  284,  284,  322,  285,  280,  285,  285,
      607,  322,  281,  607,  283,  281,  761,  760,  288,  282,
      288,  288,  759,  284,  290,  285,  290,  290,  285,  291,

      283,  291,  291,  758,  284,  286,  286,  286,  286,  285,
      292,  292,  292,  292,  293,  611,  293,  293,  611,  755,
      294,  288,  294,  294,  754,  288,  753,  290,  295,  607,
      295,  295,  291,  296,  320,  296,  296,  320,  286,  752,
      293,  293,  298,  292,  298,  298,  297,  293,  297,  297,
      751,  750,  299,  294,  299,  299,  300,  297,  300,  300,
      294,  295,  295,  320,  611,  298,  296,  320,  301,  296,
      301,  301,  749,  746,  729,  298,  744,  729,  743,  297,
      304,  304,  304,  304,  742,  299,  741,  298,  312,  300,
      740,  312,  739,  299,  305,  305,  305,  305,  738,  312,

      736,  301,  300,  307,  307,  307,  307,  308,  308,  308,
      308,  310,  311,  304,  310,  311,  313,  735,  734,  313,
      310,  312,  314,  729,  733,  314,  315,  305,  316,  315,
      732,  316,  317,  731,  311,  317,  307,  318,  313,  316,
      318,  315,  730,  319,  310,  311,  319,  323,  314,  313,
      323,  317,  318,  321,  324,  314,  321,  324,  319,  315,
      728,  316,  727,  325,  321,  317,  325,  726,  326,  323,
      318,  326,  327,  725,  328,  327,  319,  328,  321,  324,
      323,  329,  330,  724,  329,  330,  321,  324,  723,  722,
      325,  331,  326,  330,  331,  327,  325,  721,  720,  332,

      329,  326,  332,  719,  328,  327,  333,  328,  334,  333,
      331,  334,  718,  335,  329,  330,  335,  717,  333,  337,
      337,  337,  337,  336,  331,  334,  336,  340,  765,  332,
      340,  765,  332,  716,  715,  335,  714,  713,  712,  333,
      346,  334,  336,  346,  711,  336,  335,  339,  339,  339,
      339,  342,  337,  342,  342,  710,  336,  709,  342,  343,
      340,  343,  343,  708,  340,  707,  343,  344,  344,  344,
      344,  706,  345,  346,  344,  345,  347,  765,  348,  347,
      346,  348,  349,  350,  342,  349,  350,  352,  351,  705,
      352,  351,  343,  349,  353,  704,  703,  353,  345,  345,

      344,  354,  354,  354,  354,  345,  350,  702,  701,  347,
      347,  348,  700,  699,  348,  349,  350,  698,  697,  696,
      352,  351,  356,  356,  356,  356,  695,  353,  350,  351,
      612,  610,  609,  352,  354,  357,  357,  357,  357,  358,
      608,  358,  358,  388,  388,  388,  388,  400,  401,  606,
      400,  401,  603,  602,  601,  356,  402,  402,  402,  402,
      403,  403,  403,  403,  405,  405,  405,  405,  406,  406,
      406,  406,  358,  407,  600,  407,  407,  599,  598,  597,
      400,  401,  408,  408,  408,  408,  596,  595,  594,  402,
      593,  533,  592,  403,  533,  591,  590,  405,  410,  410,

      410,  410,  440,  440,  440,  440,  407,  448,  448,  448,
      448,  449,  449,  449,  449,  408,  450,  450,  450,  450,
      452,  452,  452,  452,  533,  453,  453,  453,  453,  455,
      455,  455,  455,  533,  456,  589,  456,  456,  457,  588,
      457,  457,  587,  586,  458,  456,  458,  458,  585,  459,
      584,  459,  459,  460,  583,  460,  460,  448,  453,  582,
      500,  449,  457,  500,  581,  580,  450,  456,  579,  458,
      578,  457,  460,  461,  577,  461,  461,  458,  459,  500,
      576,  462,  459,  462,  462,  463,  460,  463,  463,  464,
      461,  464,  464,  500,  465,  575,  465,  465,  501,  574,

      464,  501,  466,  462,  466,  466,  461,  573,  463,  465,
      467,  569,  467,  467,  462,  501,  568,  468,  463,  468,
      468,  469,  464,  469,  469,  567,  470,  465,  470,  470,
      466,  501,  469,  566,  467,  466,  564,  562,  473,  470,
      473,  473,  468,  467,  561,  471,  469,  471,  471,  472,
      468,  472,  472,  473,  469,  474,  560,  474,  474,  470,
      475,  497,  475,  475,  497, 1002,  471,  474, 1002,  559,
      476,  473,  476,  476,  558,  475, 1055,  472,  471, 1055,
      556,  555,  472,  476,  477,  497,  477,  477,  474,  478,
      554,  478,  478,  475,  497,  479,  553,  479,  479,  480,

      552,  480,  480,  476, 1066,  478,  477, 1066,  551,  481,
      550,  481,  481,  482, 1002,  482,  482,  477,  483,  549,
      483,  483,  478,  479,  481, 1055,  479,  480,  479,  548,
      482,  483,  480,  484,  546,  484,  484,  485,  485,  485,
      485,  487,  481,  487,  487,  545,  482,  486,  486,  486,
      486,  483,  488, 1066,  488,  488,  489,  544,  489,  489,
      490,  543,  490,  490,  542,  498,  484,  484,  498,  491,
      485,  491,  491,  492,  487,  492,  492,  541,  540,  539,
      486,  496,  487,  538,  496,  488,  490,  537,  536,  489,
      498,  499,  496,  490,  499,  535,  534,  489,  498,  447,

      502,  488,  491,  502,  503, 1067,  492,  503, 1067,  491,
      493,  493,  493,  493,  496,  492,  495,  495,  495,  495,
      499,  446,  502,  504,  499,  505,  504,  503,  505,  506,
      445,  444,  506,  502,  504,  507,  508,  503,  507,  508,
      505,  509,  510,  493,  509,  510,  511,  443,  512,  511,
      513,  512,  509,  513, 1067,  510,  504,  506,  505,  507,
      514,  508,  506,  514,  441,  513,  509,  511,  507,  508,
      515,  439,  514,  515,  509,  510,  512,  516,  438,  511,
      516,  512,  437,  513,  517,  515,  518,  517,  520,  518,
      516,  520,  519,  514,  521,  519,  522,  521,  523,  522,

      436,  523,  518,  515,  524,  435,  517,  524,  433,  521,
      516,  523,  432,  522,  431,  528,  520,  517,  528,  518,
      519,  520,  430,  519,  429,  519,  428,  521,  427,  522,
      426,  523,  525,  525,  525,  525,  425,  524,  524,  525,
      526,  526,  526,  526,  527,  527,  527,  527,  528,  529,
      530,  423,  529,  530,  531,  532,  528,  531,  532,  563,
      563,  563,  563,  422,  421,  525,  570,  570,  570,  570,
      572,  572,  572,  572,  420, 1069,  419,  527, 1069,  418,
      531,  417,  529,  530,  416,  415, 1102,  531,  532, 1102,
      414,  530,  413,  412,  411,  532,  399,  398,  529,  570,

      604,  604,  604,  604,  613,  613,  613,  613,  615,  615,
      615,  615,  616,  616,  616,  616,  618,  618,  618,  618,
      619,  396,  619,  619, 1069,  620,  657,  620,  620,  657,
      621,  395,  621,  621,  394, 1102,  393,  619,  620,  622,
      390,  622,  622,  657,  623,  386,  623,  623,  624,  385,
      624,  624,  658,  619,  613,  658,  384,  622,  620,  657,
      621,  623,  616,  621,  625,  658,  625,  625,  626,  383,
      626,  626,  622,  382,  381,  380,  624,  623,  626,  625,
      627,  624,  627,  627,  628,  658,  628,  628,  379,  629,
      378,  629,  629,  630,  377,  630,  630,  625,  376,  375,

      374,  626,  631,  667,  631,  631,  667,  628,  373,  627,
      629,  371,  632,  627,  632,  632,  633,  628,  633,  633,
      659,  630,  629,  659,  667,  370,  630,  369,  631,  632,
      634,  661,  634,  634,  661,  631,  667,  635,  368,  635,
      635,  633,  367,  366,  636,  632,  636,  636,  661,  633,
      659,  634,  635,  659,  636,  637,  365,  637,  637,  638,
      364,  638,  638,  634,  661,  637,  639,  363,  639,  639,
      635,  640, 1103,  640,  640, 1103,  641,  636,  641,  641,
      642,  665,  642,  642,  665,  362,  640,  638,  637,  361,
      639,  641,  638,  249,  245,  643,  642,  643,  643,  639,

      644,  242,  644,  644,  640,  645,  241,  645,  645,  641,
      665,  644,  239,  642,  665,  645,  646,  238,  646,  646,
      649, 1103,  649,  649,  643,  236,  646,  647,  643,  647,
      647,  231,  648,  644,  648,  648,  227,  226,  645,  650,
      650,  650,  650,  224,  651,  647,  651,  651,  652,  646,
      652,  652,  653,  649,  653,  653,  654,  648,  654,  654,
      647,  655,  223,  655,  655,  648,  656,  649,  656,  656,
      222,  670,  650,  660,  670,  663,  660,  651,  663,  662,
      221,  652,  662,  218,  671,  653,  651,  671,  670,  654,
      663,  660,  664,  216,  655,  664,  655,  652,  215,  656,

      214,  653,  664,  654,  670,  210,  660,  662,  663,  671,
      666,  668,  662,  666,  668,  656,  669,  671,  208,  669,
      672,  673,  207,  672,  673,  664,  206,  674,  675,  676,
      674,  675,  676,  666,  205,  204,  673,  674,  675,  668,
      203,  672,  669,  666,  668,  677,  202,  680,  677,  669,
      680,  201,  678,  672,  673,  678,  679,  676,  200,  679,
      674,  675,  676,  680,  199,  681,  198,  678,  681,  677,
      682,  679,  683,  682,  684,  683,  687,  684,  677,  687,
      680,  682,  683,  685,  684,  678,  685,  686,  689,  679,
      686,  689,  197,  196,  681,  195,  690, 1110,  681,  690,

     1110,  685,  193,  682,  192,  683,  191,  684,  692,  687,
      691,  692,  686,  691,  693,  694,  685,  693,  694,  190,
      686,  689,  189,  687,  688,  688,  688,  688,  805,  690,
      689,  805,  768,  188,  768,  768,  769,  187,  769,  769,
      186,  692,  185,  691,  184,  690, 1110,  693,  694,  693,
      770,  769,  770,  770,  183,  692,  805,  688,  172,  691,
      768,  805,  171,  170,  694,  768,  167,  165,  771,  769,
      771,  771,  772,  162,  772,  772,  161,  770,  771,  773,
      160,  773,  773,  770,  774,  809,  774,  774,  809,  773,
      772,  155,  153,  775,  774,  775,  775,  776,  151,  776,

      776,  771,  149,  809,  148,  772,  777,  776,  777,  777,
       72,  778,  773,  778,  778,   69,  777,  774,  809,   67,
      812,  778,  779,  812,  779,  779,  775,   65,   63,   60,
      776,  780,  779,  780,  780,  781,   55,  781,  781,  777,
      782,  780,  782,  782,  778,  783,   52,  783,  783,  784,
       49,  784,  784,  812,  785,  779,  785,  785,  783,  786,
       48,  786,  786,  781,  780,   47,   42,  782,  781,  787,
       41,  787,  787,  782,  783,   38,  784,  788,  783,  788,
      788,  789,  784,  789,  789,   37,  790,  785,  790,  790,
       36,  789,  786,   31,   29,   27,  790,  792,  787,  792,

      792,  791,  787,  791,  791, 1113,  788,  792, 1113,  793,
      788,  793,  793,  794,  789,  794,  794,   25,  795,  790,
      795,  795,  806,  791,  796,  806,  796,  796,   23,  797,
      792,  797,  797,  798,  791,  798,  798,  806,  799,  793,
      799,  799,  793,   21,   17,  800,  794,  800,  800,    0,
        0,  795,  797,  796, 1113,  806,  801,  796,  801,  801,
        0,  802,  797,  802,  802,  803,  798,  803,  803,    0,
      804,  799,  804,  804,  798,    0,  799,  807,  800,    0,
      807,    0,  808,  810,    0,  808,  810,  811,    0,  801,
      811,  801,  808,  810,  802,  802,  813,  811,  803,  813,

        0,    0,  814,  804,  807,  814,  813,    0,  815,    0,
      807,  815,  814,    0,  803,  808,  810,    0,  815,  804,
      811,  816,  817,  818,  816,  817,  818,    0,    0,  813,
      819,  816,  817,  819,  821,  814,  820,  821,    0,  820,
      822,  815,  823,  822,    0,  823,    0,  824,    0,  820,
      824,  818,    0,    0,  816,  817,  818,  819,    0,  825,
        0,  821,  825,  819,    0,  820,    0,  821,  826,  820,
        0,  826,    0,  822,  827,  823,  824,  827,  826,    0,
      824,    0,  828,  829,  827,  828,  829,  830,  825,    0,
      830,  831,  825,  829,  831,  832,  833,    0,  832,  833,

      834,  826,  835,  834,  828,  835,  836,  827,  837,  836,
        0,  837,    0,    0,    0,  828,  829,  830,  838,  840,
      830,  838,  840,  834,  831,  833,    0,  839,  832,  833,
      839,  841,    0,  834,  841,  835,    0,    0,    0,  836,
        0,  837,    0,  835,  836,  903,    0,  903,  903,    0,
        0,  838,  840,  838,  937,  903,  904,  937,  904,  904,
      839,  839,    0,    0,  841,    0,  904,  905,  840,  905,
      905,  906,    0,  906,  906,    0,    0,  905,  903,  907,
      841,  907,  907,  908,    0,  908,  908,  937,  909,  904,
      909,  909,  910,    0,  910,  910,  911,    0,  911,  911,

      905,    0,    0,  912,  906,  912,  912,  913,  907,  913,
      913,  914,  907,  914,  914,  939,  908,  915,  939,  915,
      915,  909,    0,    0,    0,  910,    0,  915,  916,  911,
      916,  916,    0,    0,    0,  917,  912,  917,  917,    0,
      913,  916,    0,  918,  914,  918,  918,    0,  939,  919,
      915,  919,  919,  920,    0,  920,  920,  916,    0,  919,
      917,  916,  918,  920,  921,    0,  921,  921,  917,  922,
        0,  922,  922,    0,  921,  923,  918,  923,  923,    0,
        0,  924,  919,  924,  924,  925,  920,  925,  925,  926,
        0,  926,  926,    0,    0,    0,  924,  921,  929,    0,

      929,  929,  922,  927,    0,  927,  927,  930,  923,  930,
      930,  926,    0,  927,  924,    0,    0,  928,  925,  928,
      928,    0,  926,  931,    0,  931,  931,  932,    0,  932,
      932,  929,  928,    0,    0,  933,  927,  933,  933,  934,
      930,    0,  934,  935,  929,  936,  935,    0,  936,  934,
      928,    0,    0,  935,  930,  936,  931,    0,  938,  931,
      932,  938,  940,  941,  942,  940,  941,  942,  933,    0,
        0,  943,  934,  932,  943,    0,  935,  944,  936,  945,
      944,    0,  945,  946,    0,  947,  946,  938,  947,  949,
        0,  938,  949,  946,    0,  940,  941,  942,  947,  948,

        0,    0,  948,  950,  943,    0,  950,    0,  949,    0,
      944,    0,  945,  950,  947,    0,  946,  951,  947,    0,
      951,    0,  949,  952,  948,  953,  952,  951,  953,    0,
        0,  954,  948,  952,  954,  956,  950,  955,  956,  957,
      955,  958,  957,  960,  958,  959,  960,    0,  959,    0,
      951,  958,  955,    0,  961,    0,  952,  961,  953,  962,
      959,  957,  962,  963,  954,    0,  963,    0,  956,    0,
      955,    0,  957,    0,  958,    0,  960,  964,  959, 1005,
      964, 1005, 1005, 1006,    0, 1006, 1006,  961, 1007,  960,
     1007, 1007,  962,    0,    0,  962,  963, 1008,    0, 1008,

     1008,  961, 1009,    0, 1009, 1009,    0, 1008,    0,  963,
      964, 1010, 1005, 1010, 1010, 1011, 1006, 1011, 1011,    0,
     1012, 1007, 1012, 1012, 1013,    0, 1013, 1013,    0, 1014,
     1008, 1014, 1014,    0, 1011, 1009, 1010, 1015,    0, 1015,
     1015,    0, 1012,    0, 1010,    0, 1013, 1016, 1011, 1016,
     1016,    0, 1018, 1012, 1018, 1018, 1017, 1013, 1017, 1017,
        0, 1019, 1014, 1019, 1019, 1020, 1017, 1020, 1020, 1021,
     1015, 1021, 1021,    0,    0, 1020, 1022, 1021, 1022, 1022,
     1016, 1018,    0,    0, 1023, 1018, 1023, 1023, 1024, 1017,
     1024, 1024, 1025, 1026, 1019, 1025, 1026, 1027, 1020,    0,

     1027, 1028, 1021, 1029, 1028, 1032, 1029, 1030, 1032, 1022,
     1030, 1028, 1022,    0,    0, 1033, 1031, 1023, 1033, 1031,
     1034, 1024,    0, 1034, 1024, 1025, 1026, 1032, 1035,    0,
     1027, 1035, 1030, 1023, 1028, 1031, 1029, 1033, 1032, 1036,
     1030, 1037, 1036,    0, 1037,    0,    0, 1038, 1033, 1031,
     1038, 1037, 1039, 1034, 1040, 1039,    0, 1040,    0, 1041,
     1042, 1035, 1041, 1042, 1040, 1043, 1044, 1041, 1043, 1044,
        0,    0, 1036,    0, 1037, 1070, 1038, 1070, 1070, 1071,
     1038, 1071, 1071, 1083,    0, 1039, 1083, 1040, 1072,    0,
     1072, 1072, 1041, 1042,    0,    0, 1042,    0, 1043, 1044,

        0, 1071, 1044, 1073,    0, 1073, 1073,    0, 1070,    0,
     1072,    0, 1071, 1073, 1043, 1074, 1083, 1074, 1074,    0,
     1075, 1072, 1075, 1075, 1076, 1087, 1076, 1076, 1087, 1077,
     1074, 1077, 1077,    0, 1076, 1078, 1073, 1078, 1078, 1079,
     1087, 1079, 1079, 1080,    0, 1080, 1080, 1081, 1074, 1081,
     1081,    0, 1082, 1075, 1082, 1082, 1084, 1076, 1087, 1084,
     1085, 1086, 1077, 1085, 1086,    0, 1088,    0, 1078, 1088,
     1078, 1086, 1079,    0, 1089,    0, 1080, 1089, 1084,    0,
     1081,    0, 1085, 1090, 1089, 1082, 1090, 1091, 1079, 1084,
     1091,    0, 1080, 1085, 1086, 1092, 1081, 1093, 1092, 1088,

     1093, 1082, 1094, 1095,    0, 1094, 1095, 1089, 1115,    0,
     1115, 1115, 1116,    0, 1116, 1116, 1090,    0, 1115,    0,
     1091, 1117, 1091, 1117, 1117,    0,    0, 1116, 1092, 1118,
     1093, 1118, 1118,    0,    0, 1094, 1095,    0,    0, 1118,
     1119, 1115, 1119, 1119, 1092, 1116, 1093, 1120,    0, 1120,
     1120, 1094, 1095, 1121, 1117, 1121, 1121, 1122,    0, 1122,
     1122, 1123, 1118, 1123, 1123, 1124, 1126, 1124, 1124, 1126,
        0,    0, 1125, 1119, 1125, 1125, 1126,    0, 1127, 1128,
     1120, 1127, 1128, 1120, 1130, 1129, 1121, 1130, 1129, 1131,
     1122,    0, 1131, 1127, 1123, 1129,    0, 1132, 1124, 1126,

     1132, 1133, 1121,    0, 1133, 1125, 1122, 1134,    0,    0,
     1134, 1127, 1128,    0, 1124,    0, 1135, 1130, 1129, 1135,
     1136, 1125, 1131, 1136, 1147, 1131, 1147, 1147,    0, 1148,
     1132, 1148, 1148, 1149, 1133, 1149, 1149,    0,    0, 1148,
     1134, 1150,    0, 1150, 1150, 1151, 1132, 1151, 1151, 1135,
     1133,    0, 1152, 1136, 1152, 1152, 1153, 1147, 1154, 1153,
     1155, 1154, 1148, 1155, 1156, 1135, 1149, 1156, 1154, 1136,
     1157,    0, 1158, 1157, 1150, 1158,    0, 1163, 1151, 1163,
     1163,    0,    0, 1165, 1150, 1152, 1165, 1166,    0, 1153,
     1166, 1154, 1164, 1155, 1164, 1164, 1169, 1156, 1169, 1169,

        0, 1170,    0, 1157, 1170, 1158,    0, 1156,    0, 1173,
     1163, 1173, 1173,    0, 1174, 1178, 1165, 1174, 1178, 1173,
     1166,    0,    0,    0, 1174, 1164,    0,    0, 1177, 1169,
     1177, 1177,    0, 1166, 1170, 1169,    0,    0, 1164,    0,
     1170,    0, 1173,    0,    0,    0,    0, 1174, 1178,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1177, 1180, 1180, 1180, 1180, 1180, 1180, 1181, 1181,
     1181, 1181, 1181, 1181, 1182, 1182, 1182, 1182, 1182, 1182,
     1183, 1183, 1183, 1183, 1183, 1183, 1184, 1184, 1184, 1184,
     1184, 1184, 1185, 1185,    0, 1185, 1185, 1185, 1186, 1186,

     1186, 1186, 1186, 1186, 1187,    0,    0,    0, 1187, 1187,
     1188, 1188, 1188, 1188, 1188, 1188, 1189, 1189,    0,    0,
     1189, 1189, 1190, 1190, 1190, 1190, 1190, 1190, 1191, 1191,
        0, 1191, 1191, 1191, 1192, 1192,    0, 1192, 1192, 1192,
     1193, 1193,    0,    0,    0, 1193, 1194, 1194,    0, 1194,
     1194, 1194, 1196, 1196,    0,    0,    0, 1196, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,

     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[85] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 
    0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
//
// Based loosely on NetHack's lev_comp.l

#include <algorithm>
#include <cstring>
#include <queue>
#include "AppHdr.h"
#include "mapdef.h"
#include "levcomp.tab.h"
#include "stuff.h"

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(100);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

// Enter a new state, first clearing yylval of junk.
#define CBEGIN(x) do { BEGIN(x); clean(); } while (0)

static void post_proc_text(char *text, bool trim_right, int strip_trailing)
{
    char *s = NULL;
    if (trim_right)
    {
        s = text + strlen(text) - 1;
        while (s >= text && isspace(*s))
            *s-- = 0;
    }
    if (strip_trailing)
    {
        if (!s)
            s = text + strlen(text) - 1;
        while (s >= text && --strip_trailing >= 0)
            *s-- = 0;
    }
}

static char *copy_text(bool trim_right, int strip_trailing)
{
    char *newstring = NULL;
    if ((yylval.text = newstring = strdup(yytext)))
    {
        alloced = true;
        post_proc_text(newstring, trim_right, strip_trailing);
    }
    return (newstring);
}

static void settext(bool trim_right = false, int strip_trailing = 0)
{
    clean();
    char *newstring = copy_text(trim_right, strip_trailing);
    yylval.text = newstring;
}

static void str_check()
{
    if (!yylval.text)
    {
        char *buf = (char *) malloc(1);
        if (buf)
        {
            yylval.text = buf;
            *buf = 0;
            alloced = true;
        }
    }
}

static void cattext(bool trim_right = false, int strip_trailing = 0)
{
    if (!yylval.text)
        settext(trim_right, strip_trailing);
    else
    {
        bool was_alloced = alloced;
        char *newbuf = (char*) malloc(strlen(yylval.text) + strlen(yytext) + 1);
        if (!newbuf)
            end(1, "Out of memory");
        alloced = true;
        strcpy(newbuf, yylval.text);
        strcat(newbuf, yytext);
        post_proc_text(newbuf, trim_right, strip_trailing);
        if (was_alloced)
            free((void*) yylval.text);
        yylval.text = newbuf;
    }
}








#line 1859 "levcomp.lex.cc"

#define INITIAL 0
#define MAPDEF 1
#define LUA 2
#define LUA_ONELINER 3
#define ARGUMENT 4
#define MNAME 5
#define KEYWORDS 6
#define ITEM_LIST 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 133 "levcomp.lpp"


#line 2059 "levcomp.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1180 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1179 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 135 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 137 "levcomp.lpp"
{
                        settext(true);
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 142 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 143 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 144 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 146 "levcomp.lpp"
;
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 148 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 149 "levcomp.lpp"
{
                            settext(true, 2);
                            BEGIN(INITIAL);
                            return LUA_LINE;
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 154 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 158 "levcomp.lpp"
;
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 160 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 164 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 166 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 171 "levcomp.lpp"
;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 172 "levcomp.lpp"
;
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 173 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 175 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 179 "levcomp.lpp"
;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 181 "levcomp.lpp"
{
                        cattext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 186 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 187 "levcomp.lpp"
;
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 188 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 190 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 192 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 196 "levcomp.lpp"
;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 198 "levcomp.lpp"
{
                        cattext();
                        return MONSTER_NAME;
                    }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 203 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 204 "levcomp.lpp"
;
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 206 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 210 "levcomp.lpp"
;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 212 "levcomp.lpp"
{
                        cattext();
                    }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 216 "levcomp.lpp"
cattext();
	YY_BREAK
case 33:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 218 "levcomp.lpp"
{ BEGIN(INITIAL); str_check(); return STRING; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 220 "levcomp.lpp"
;
	YY_BREAK
case 35:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 222 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 224 "levcomp.lpp"
{ BEGIN(LUA_ONELINER); return MAIN; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 226 "levcomp.lpp"
{ BEGIN(LUA); return PRELUDE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 227 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 228 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 229 "levcomp.lpp"
{ BEGIN(LUA); return VALIDATE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 230 "levcomp.lpp"
{ BEGIN(LUA); return VETO; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 231 "levcomp.lpp"
{ BEGIN(LUA); return EPILOGUE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 233 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 234 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEFAULT_DEPTH; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 235 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEPTH; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 236 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return ORIENT; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 237 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 238 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return WELCOME; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 239 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 240 "levcomp.lpp"
return WEIGHT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 241 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 242 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 243 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLAGS; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 244 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return BFLAGS; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 245 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 246 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return NSUBST; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 247 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return COLOUR; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 248 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLOORCOL; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 249 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LROCKCOL; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 250 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLOORTILE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 251 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LROCKTILE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 252 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return FTILE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 253 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return RTILE; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 254 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return TILE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 255 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return FHEIGHT; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 256 "levcomp.lpp"
{ CBEGIN(MNAME); return MONS; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 257 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 258 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return MARKER; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 259 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 261 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 262 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 263 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 264 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMASK; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 265 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KPROP; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 266 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return SUBVAULT; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 268 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 270 "levcomp.lpp"
return COLON;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 272 "levcomp.lpp"
return PERC;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 274 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 280 "levcomp.lpp"
;
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 281 "levcomp.lpp"
;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 282 "levcomp.lpp"
;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 283 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 285 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 2633 "levcomp.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MAPDEF):
case YY_STATE_EOF(LUA):
case YY_STATE_EOF(LUA_ONELINER):
case YY_STATE_EOF(ARGUMENT):
case YY_STATE_EOF(MNAME):
case YY_STATE_EOF(KEYWORDS):
case YY_STATE_EOF(ITEM_LIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1180 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1180 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1179);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 285 "levcomp.lpp"



int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}

