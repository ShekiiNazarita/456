#line 2 "levcomp.lex.cc"

#line 4 "levcomp.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 85
#define YY_END_OF_BUFFER 86
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1191] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   86,   84,   81,   82,
       83,   79,   84,   77,   80,   78,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   81,   34,   36,   84,   84,   84,   84,   84,
       84,   84,   85,    6,   85,   85,    4,    2,    3,   85,
        2,    2,    2,    2,    9,   10,   85,    9,    9,   85,
       12,   85,   32,   81,   33,   83,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   81,   32,

       32,   32,   32,   32,   32,   32,   32,   32,   84,   28,
       23,   28,   79,   84,   27,   80,   78,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   28,   34,   36,   84,   84,   84,
       84,   84,   84,   84,   15,   16,   83,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   84,   13,   15,   13,   13,
       13,   13,   13,   13,   85,   21,   22,   85,   20,   85,
       81,   82,   80,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       81,   34,   36,    0,    0,    0,    0,    0,   34,    0,
        0,    0,    0,    0,    0,    0,    0,   39,    6,    5,
        0,    0,    2,    3,    2,    0,    2,    2,    2,    2,
        9,    9,   10,    9,    9,    9,    0,   11,    0,   12,
       31,    0,   31,   81,   33,    0,    0,   33,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,    0,   30,   31,   81,   31,
       34,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   26,    0,   26,   28,   23,   28,    0,   23,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,    0,   25,    0,   26,
       28,   26,   34,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   15,   16,    0,    0,    0,   16,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    0,   14,   13,
       15,   13,   13,   13,   13,   13,   13,   13,   13,   19,

        0,   19,   21,   22,    0,    0,    0,    0,   18,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    2,    9,    9,
        9,    7,    0,    0,   29,    0,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   34,   31,   31,   31,
       31,   31,   31,   31,    0,   24,    0,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   34,   34,   26,
       26,   26,   26,   26,   26,   26,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,    0,   17,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   35,
        0,    0,    0,    0,    0,    0,    2,    9,    8,    0,
        9,    7,    0,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,    0,   31,    0,   31,   31,
       31,   31,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,    0,   26,    0,   26,   26,   26,

       26,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    0,    0,    0,
        0,   45,    0,    0,    0,   68,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   67,   43,    0,    0,    0,
        0,    0,    0,    0,   53,   65,    0,    0,    0,    0,
       38,    0,    0,    0,    0,    2,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,    0,   31,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
        0,   26,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,    0,    0,    0,   46,    0,   52,   63,   71,   72,
       74,   73,   75,    0,    0,    0,    0,    0,    0,    0,

       48,   64,    0,   56,    0,    0,    0,    0,    0,    0,
        0,   41,    1,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   55,   50,   58,    0,   54,    0,

        0,    0,    0,   69,   57,   47,    0,    0,   51,    0,
        0,    0,    0,    0,    1,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   66,    0,    0,
        0,    0,   70,    0,   49,    0,    0,    0,    0,    0,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
        0,   31,   31,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,    0,   26,   26,   13,   13,   13,   13,
       13,   13,   13,   13,    0,    0,   60,    0,   76,    0,
        0,    0,   37,    0,    0,   31,   31,   31,   31,   31,
       31,    0,   31,   31,    0,   31,   26,   26,   26,   26,
       26,   26,    0,   26,   26,    0,   26,   13,   13,   13,
       13,   59,    0,   62,    0,   42,   40,   31,   31,   31,
       31,   31,   31,   26,   26,   26,   26,   26,   26,   13,
       13,   61,    0,   31,   31,   26,   26,   13,    0,   31,
       26,   13,    0,   31,   26,   13,   44,   31,   26,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    1,    7,    1,    1,    1,
        1,    1,    8,    9,   10,    1,    1,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,    1,    1,
        1,    1,    1,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       22,   29,   30,   31,   32,   33,   34,   22,   22,   22,
        1,   35,    1,    1,   22,    1,   36,   22,   22,   37,

       38,   39,   40,   41,   42,   22,   22,   43,   22,   22,
       44,   45,   22,   46,   47,   48,   49,   50,   22,   22,
       22,   22,   51,    1,   52,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[53] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    5,    6,
        6,    1,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    1,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        1,    1
    } ;

static yyconst flex_int16_t yy_base[1208] =
    {   0,
        0,   51,   55,   62,   66,   68,   51,   70,  120,  171,
      222,  273,  324,  375,   79,  176, 2550, 3927,   73, 3927,
     2546, 3927, 2530, 3927, 2529, 3927, 2518,   60, 2515,   66,
     2500,   82,   75,   64,   82, 2495, 2496, 2483,   79,   95,
     2494, 2459,  425,    0, 3927,   79, 2449, 2444, 2446,  150,
       81, 2435, 3927, 3927, 2482,  183, 3927,    0, 3927, 2478,
      187,    0, 2454,  157, 2423, 3927, 2469,  146, 2419,  191,
     3927, 2465,  278,  284, 3927,  380,  384,  388,  393,  399,
      403,  431,  412,  407,  449,  454,  488,  492,  498,  513,
      503,  477,  460,  526,  439,  532,  537,  548,  552,  558,

      564,  569,  573,  586,  590,  598,  605,  609,  279,  624,
     3927,  644,  443,  650, 3927,  651,  596,  632,  637,  649,
      663,  668,  672,  673,  699,  708,  687,  704,  709,  713,
      744,  715,  749,  725,  764,  768,  753,  769,  757,  759,
      776,  781,  785,  795,  810, 3927,  822, 2453, 2446,    0,
     2434,  179, 2427,  181, 2405,  182,  184,  263,  264, 2406,
     2399, 2391,  188,  278, 2399,  298, 2377,  829,  279, 2362,
     2350, 2352,  268,  146,  805,  833, 3927,  839, 3927,  845,
      302, 3927, 2374, 2350, 2360, 2348,  187, 2348, 2342, 2329,
     2331, 2323, 2305,  282, 2306, 2307, 2295, 2291, 2289, 2288,

     2269, 2278, 2284, 2266, 2252, 2260, 2250, 2237,  284, 2221,
        0,    0, 3927, 2208, 2195, 2191,  274, 2177,    0,  268,
     2181, 2186, 2181, 2201,  425, 2167, 2158, 3927, 3927, 3927,
     2202,  483,    0, 3927,    0, 2193,  576, 2171, 2150,  374,
     2116, 2112, 3927,  270, 2095,  849,  375, 3927, 2139, 3927,
      854,  858,  867,  873, 3927,  879,  883, 3927,  892,  902,
      907,  911,  917,  926,  936,  946,  951,  955,  960,  971,
      975,  983,  992,  997, 1007, 1011, 1018, 1026, 1035, 1039,
     1047, 1052, 1067, 1060, 1073, 1086, 3927, 1094,    0, 1099,
     1105, 1109, 1113, 1118, 1122, 1126, 1133, 1145, 1150, 1161,

     1167,  890,  931, 1171, 1179, 3927, 1184, 1195, 3927, 1003,
     1189, 1199, 1203, 1205, 1213, 1215, 1071, 1220, 1224, 1234,
     1240, 1241, 1242, 1247, 1249, 1255, 1266, 1278, 1283, 1259,
     1284, 1290, 1294, 1295, 1304, 1310, 1333, 3927, 1338, 1315,
        0, 1342, 1351, 1360, 1347, 1356, 1365, 1369, 1376, 1378,
     1383, 1382, 1322, 1417, 3927, 1429, 1433, 1388, 3927,    0,
     2130, 2116, 2124, 2112,  366, 2110, 2111, 2101, 2104, 2098,
     2079,  444, 2080, 2067, 2063, 2055, 2046, 2046, 2036, 2040,
     2044, 2034, 2019, 2032, 2023, 2013,  498, 1437, 3927, 1975,
        0,  470, 1971, 1968, 1964, 1983,  430, 1952, 1944, 1392,

     1394, 1441, 1445, 3927, 1451, 1455, 1461, 1465, 3927, 1469,
     1967, 1952, 1949, 1939, 1953, 1945, 1935, 1928, 1921, 1932,
     1927, 1909, 1911, 1906,  532, 1916, 1903, 1891, 1902, 1902,
     1898, 1890, 1875, 1877,  514, 1863, 1874, 1868, 1864, 1834,
     1479, 1823,  927, 1811, 1818, 1802, 1798, 1815, 1485, 1489,
     1499, 3927, 1503, 1507, 3927, 1511, 1515, 1519, 1525, 1530,
     1534, 1542, 1551, 1569, 1562, 1576, 1586, 1580, 1590, 1596,
     1615, 1603, 1622, 1628, 1632, 1639, 1660, 1664, 1668, 1676,
     1680, 1684, 1700, 1704, 1716, 1720, 1724, 1738, 1728, 1732,
     1742, 1756, 1760, 1764, 1776, 3927, 1784, 1788, 1770, 1747,

     1604, 1792, 1798, 1594, 1804, 1810, 1808, 1812, 1820, 1832,
     1836, 1846, 1847, 1851, 1855, 1859, 1863, 1867, 1873, 1887,
     1878, 1895, 1899, 1901, 1905, 1912, 1907, 1946, 1954, 1958,
     1930, 1918, 1936, 1962, 1970, 1972, 1823, 1806, 1804, 1799,
     1811, 1803, 1801, 1794, 1791, 1791, 1781, 1762, 1750, 1743,
      538, 1742, 1731, 1723, 1733, 1734, 1728, 1723, 1692, 1694,
      582, 1677, 1683, 1679, 1681, 1657, 1980, 1648, 1321, 1647,
     1659, 1641, 1632, 1984, 3927, 1996, 1656, 1656, 1629, 1640,
     1647, 1637, 1624, 1630, 1634, 1609, 1597, 1591, 1582, 1574,
     1564, 1552, 1553, 1558, 1560, 1556, 1532, 1533, 1541, 1540,

     1530, 1512, 1527, 1521, 1519, 1506, 1498, 1473, 2006, 3927,
     1474, 1400, 1448, 1449, 1460, 1410, 1482, 2018, 3927, 2022,
     2026, 3927, 2030, 2034, 2039, 2013, 2045, 2054, 2058, 2071,
     2077, 2083, 2094, 2098, 2103, 2109, 2115, 2126, 2130, 2144,
     2149, 2158, 2169, 2173, 2154, 2181, 2190, 2195, 2186, 2207,
     2222, 2227, 2231, 2236, 2241, 2245, 2250, 2254, 2263, 2268,
     2273, 2277, 2281, 2167, 2286, 2291, 2290, 2304, 2062, 2302,
     2322, 2327, 2328, 2081, 2336, 2340, 2341, 2342, 2347, 2362,
     2349, 2376, 2378, 2384, 2385, 2389, 2391, 2390, 2399, 2425,
     2426, 2398, 2412, 2427, 2438, 2443, 2444, 2448, 2449, 2453,

     2454, 1466, 1464, 1446, 1457, 1463, 1443, 1398, 1407, 1404,
     1383, 1385, 1386, 1378, 1378, 1360, 1346, 1343, 1342, 1336,
     1321, 1302, 1295, 1299, 1294, 1289, 1272, 1289, 1286, 1281,
     1267, 1252, 1224, 1219, 1213, 1221, 1646, 1226, 1215, 1202,
     1211, 3927, 1201, 1204, 1199, 3927, 1191, 1183, 1178, 1167,
     1166, 1147, 1138,  452, 1133, 3927, 3927, 1128, 1125, 1139,
     1133, 1119, 1127, 1104, 3927, 3927, 1101, 1100, 1076, 1076,
     3927, 1068, 1064, 1650, 1042, 1057, 2461, 2465, 2499, 2504,
     2508, 2513, 2517, 2533, 2521, 2542, 2553, 2557, 2562, 2568,
     2574, 2579, 2585, 2589, 2594, 2608, 2617, 2623, 2628, 2632,

     2637, 2645, 2651, 2660, 2664, 2669, 2673, 2677, 2683, 2687,
     2692, 2701, 2705, 2709, 2472, 2525, 2714, 2719, 2580, 2728,
     2723, 2740, 2600, 2745, 2757, 2759, 2765, 2771, 2763, 2776,
     2782, 2780, 2784, 2786, 2794, 2799, 2821, 2826, 2822, 2830,
     2805, 2834, 2839, 2845, 2843, 2847, 2849, 2853, 2857, 2861,
     2865, 2870, 1053, 1064, 1051, 1056, 1047, 1051, 1047, 1046,
     1043, 1033, 1023, 1022,  999,  996,  489,  995,  990,  986,
      991,  988,  969,  980,  957,  952,  957,  931,  930,  932,
      927,  946,  942,  932, 3927,  908, 3927, 3927, 3927, 3927,
     3927, 3927, 3927,  922,  574,  897,  902,  906,  905,  898,

     3927, 3927,  888, 3927,  876,  887,  881,  843,  841,  841,
      825, 3927,  862, 2897, 2902, 2906, 2915, 2920, 2924, 2929,
     2934, 2938, 2942, 2952, 2956, 2963, 2974, 2979, 2990, 2995,
     3008, 3014, 2999, 3019, 3027, 3031, 3035, 3043, 3048, 3056,
     3067, 3071, 3075, 3080, 3062, 3084, 3093, 2910, 3098, 2947,
     2961, 3085, 3106, 3112, 3116, 3120, 3122, 3130, 3135, 3137,
     3141, 3147, 3161, 3162, 3166, 3172, 3173, 3178, 3179, 3183,
     3185, 3190, 3207, 3201, 3217,  854,  853,  849,  824,  827,
      591,  802,  798,  806,  805,  797,  788,  777,  786,  778,
      745,  742,  751,  737, 3927, 3927, 3927,  768, 3927,  749,

      754,  732,  723, 3927, 3927, 3927,  730,  710, 3927,  725,
      726,  697, 1989,  693,  724, 3219, 3224, 3230, 3236, 3242,
     3251, 3258, 3264, 3268, 3278, 3285, 3292, 3296, 3302, 3307,
     3312, 3324, 3317, 3334, 3339, 3256, 3300, 3313, 3344, 3348,
     3349, 3359, 3358, 3363, 3365, 3370, 3376, 3384, 3386, 3390,
     3397, 3402, 3401, 3408, 3413,  713,  697,  702,  695,  681,
      684,  664,  676,  672,  643, 2001,  642, 3927,  652,  647,
      657,  646, 3927,  646, 3927,  601, 2150, 2213,  581, 2354,
     3418, 3422, 3426, 3440, 3460, 3436, 3464, 3468, 3476, 3480,
     3484, 3488, 3492, 3499, 3505, 3512, 3516, 3503, 3507, 3520,

     3528, 3539, 3543, 3544, 3548, 3552,  606,  600,  608,  602,
      605,  579, 2688, 3225,  585,  568, 3927,  572, 3927,  538,
     3279,  519, 3927, 3554,  513, 3556, 3565, 3584, 3602, 3588,
     3606, 3611, 3616, 3620, 3624, 3628, 3633, 3637, 3596, 3638,
     3647, 3651, 3655, 3656, 3664, 3669, 3675,  523,  512,  512,
      476, 3927,  449, 3927,  401, 3927, 3927, 3679, 3683, 3692,
     3696, 3707, 3711, 3700, 3717, 3719, 3723, 3728, 3732,  428,
      384, 3927,  358, 3734, 3743, 3738, 3748,  354,  280, 3757,
     3769,  178,   93, 3777, 3782,   73, 3927, 3795, 3755, 3927,
     3830, 3836, 3842, 3848, 3854, 3860, 3866, 3872, 3878, 3884,

     3890, 3896, 3902, 3908, 3914,   56, 3920
    } ;

static yyconst flex_int16_t yy_def[1208] =
    {   0,
     1190,    1, 1191, 1192, 1193, 1193, 1194, 1194, 1190,    9,
     1190,   11, 1190,   13, 1195, 1195, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1196, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1197, 1190, 1198, 1190, 1190,
     1199, 1198, 1198, 1198, 1200, 1190, 1190, 1200, 1200, 1201,
     1190, 1190, 1202, 1190, 1190, 1190, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,   43, 1203,

     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1204, 1190,
     1190, 1190, 1204, 1204, 1190, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204,   43, 1205, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1190, 1190, 1190, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1190, 1206,   43, 1206, 1206,
     1206, 1206, 1206, 1206, 1207, 1190, 1190, 1190, 1190, 1207,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,

     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
       43, 1196, 1190, 1190, 1190, 1190, 1190, 1190, 1196, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1198, 1190, 1198, 1190, 1198, 1198, 1198, 1198,
     1200, 1200, 1190, 1200, 1200, 1200, 1201, 1190, 1190, 1190,
     1202, 1202, 1202, 1190, 1190, 1190, 1190, 1190, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1190, 1202,   99, 1203,
     1203, 1203, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,

     1202, 1204, 1204, 1204, 1190, 1190, 1190, 1190, 1190, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1190, 1190, 1204,
      135, 1205, 1205, 1205, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1190, 1190, 1190, 1190, 1190, 1190, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1190, 1190, 1206,
      168, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1207,

     1207, 1207, 1190, 1190, 1190, 1190, 1190, 1207, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1198, 1200, 1200,
     1200, 1190, 1190, 1202, 1190, 1190, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1203, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1204, 1190, 1190, 1204, 1204, 1204,

     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1205, 1196, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1207, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,

     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1198, 1200, 1190, 1190,
     1200, 1190, 1190, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,

     1204, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1198, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,

     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,

     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1198, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1190, 1190, 1190, 1190, 1190, 1190,

     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1198, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1204, 1204, 1204, 1204, 1204, 1204, 1204,

     1204, 1204, 1204, 1204, 1204, 1204, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1206, 1206, 1206,
     1206, 1190, 1190, 1190, 1190, 1190, 1190, 1202, 1202, 1202,
     1202, 1202, 1202, 1204, 1204, 1204, 1204, 1204, 1204, 1206,
     1206, 1190, 1190, 1202, 1202, 1204, 1204, 1206, 1190, 1202,
     1204, 1206, 1190, 1202, 1204, 1206, 1190, 1202, 1204,    0,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,

     1190, 1190, 1190, 1190, 1190, 1190, 1190
    } ;

static yyconst flex_int16_t yy_nxt[3980] =
    {   0,
       18,   19,   20,   21,   19,   18,   22,   23,   24,   23,
       25,   26,   18,   27,   28,   29,   18,   30,   18,   18,
       31,   18,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   18,   18,   41,   18,   18,   42,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   43,   71,   72,   43,   44,   54,   55,   56,
       57,  360,   45,   53,   59,   60,   61,   62,   66,   67,
       66,   67,   71,   72,  181,   46,  198,  181,   63,  185,
      176,  177,  178,  176, 1187,  188,  186,  179,   47,  189,
      199,  220,  196,   48,  200,   49,  190,   50,  205,  192,

       51,   52,  193,  197, 1187,  199,  194,  207,   64,  195,
      206,  201,   68,  180,   68,  208,  226,   69,  227,   69,
       73,   74,   75,   76,   74,   73,   77,   78,   79,   78,
       80,   81,   73,   82,   83,   84,   73,   85,   73,   73,
       86,   73,   87,   88,   89,   90,   91,   92,   93,   94,
       95,   73,   73,   96,   97,   73,   98,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   99,  239,  224,   99,  100,  176,  177,  178,
      176,  398,  101,  399,  179,  229,  231,  232,  230,  234,
      236,  237,  244,  248,  249,  102,  225,  245,  363,  370,

      366,  374,  371,  240,  367,  364,  372,  383,  103,  373,
      180,  368,  375,  104,  414,  105,  415,  106, 1186,  384,
      107,  108,  109,  110,  111,  112,  110,  109,  113,  114,
      115,  114,  116,  117,  109,  118,  119,  120,  109,  121,
      109,  109,  122,  109,  123,  124,  125,  126,  127,  128,
      129,  130,  131,  109,  109,  132,  133,  109,  134,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  135,  376,  378,  135,  136,  252,
      303,  252,  252,  303,  137,  254,  255,  256,  254,  377,
      385,  392,  396,  379,  422,  441,  427,  138,  386,  388,

      389,  388,  388,  181,  438,  377,  181,  439,  423,  226,
      139,  227,  253,  304,  397,  140,  244,  141,  257,  142,
     1183,  245,  143,  144,   18,  145,  146,  147,  145,   18,
       22,   23,   24,  148,  149,   26,  150,  151,  152,  153,
      150,  154,  150,  150,  155,  150,  156,  157,  158,  159,
      160,  161,  162,  163,  164,  150,  150,  165,  166,  150,
      167,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,   18,   18,  168,  248,  249,  168,
       44,  256,  258,  256,  256,  252,   45,  252,  252,  252,
      239,  252,  252,  540,  252,  541,  252,  252,  259,  169,

      252, 1182,  252,  252,  252, 1179,  252,  252,  252,  259,
      252,  252,  170,  252,  257,  252,  252,  171,  253,  172,
      240,  173,  253,  263,  174,   52,  211,  253, 1178,  211,
      212,  261,  252,  253,  252,  252,  213,  253,  262, 1172,
      252,  253,  252,  252,  303, 1173,  253,  303,  260,  224,
      252,  283,  252,  252,  396,  252,  548,  252,  252,  284,
     1172,  252,  214,  252,  252,  253,  896,  215,  264,  216,
      549,  225,  265,  253,  217,  218,  397,  304,  252,  266,
      252,  252,  897,  253,  267,  229,  231,  232,  253,  252,
      280,  252,  252,  252,  253,  252,  252,  567,  553,  252,

      279,  252,  252,  982,  252,  268,  252,  252,  269,  272,
      274,  253,  270, 1171,  252,  271,  252,  252,  564,  983,
      273,  565,  253, 1154,  275,  276,  253,  252, 1170,  252,
      252,  278,  253,  252, 1152,  252,  252,  253,  286,  287,
      286,  286,  277,  602,  591,  281,  603,  253,  285,  252,
      716,  252,  252,  289,  255,  256,  289,  282,  592,  291,
      253,  291,  291, 1157,  717,  252,  253,  252,  252, 1156,
      252,  253,  252,  252,  252, 1155,  252,  252,  234,  236,
      237,  293,  253, 1154, 1153,  288,  257,  252, 1000,  252,
      252,  252,  292,  252,  252,  275, 1152,  303,  253,  252,

      303,  252,  252,  253, 1001, 1057,  252,  253,  252,  252,
      252,  727,  252,  252,  728, 1151, 1119,  294, 1150, 1117,
      253, 1058,  297, 1149,  253,  305,  306,  307,  305, 1148,
      304, 1123,  253,  303,  295,  296,  303, 1120,  303,  253,
      299,  303,  300,  253,  298,  307,  309,  307,  307,  311,
      303,  303,  303,  303,  303,  303,  312, 1119,  308,  301,
      310,  310, 1118,  313,  303,  314,  304,  303, 1117,  303,
     1116,  304,  303,  303,  303, 1115,  303,  303,  308, 1114,
     1113, 1112,  315,  304,  304,  304,  316, 1075,  303,  319,
      323,  303,  320,  317, 1111, 1073,  321,  304,  318,  322,

      303,  324,  304,  303, 1110,  303,  304,  304,  303,  303,
      303,  325,  303,  303,  303,  329,  303,  303, 1109,  303,
      327,  304, 1108, 1107, 1068,  326,  303,  330, 1015,  303,
     1080,  336,  332,  304, 1077, 1076, 1075,  328,  304,  331,
     1074, 1073,  304,  304,  333,  303, 1072,  304,  303,  304,
      337,  338,  339,  337,  303, 1071,  334,  303,  303,  304,
      303,  303,  340,  303,  335,  341,  306,  307,  341,  343,
      303,  219,  343,  303, 1070, 1069,  219,  303,  304, 1068,
      303,  345,  303,  304, 1067,  303,  303,  304, 1066,  303,
     1065,  304, 1064,  304, 1063,  326,  303, 1009,  308,  303,

     1062,  346,  344,  304, 1061,  349,  401,  347, 1006,  401,
      304,  354,  355,  356,  354,  304, 1005, 1004, 1060,  304,
      351,  348,  352,  358,  359,  358,  358,  350, 1059,  304,
      391,  355,  356,  391,  403,  404,  405,  403,  999,  402,
      407,  404,  407,  407,  357,  353,  408,  409,  410,  408,
      451,  452,  453,  451, 1056,  252,  357,  252,  252,  252,
      997,  252,  252,  357,  996,  995, 1015,  406,  454,  455,
      454,  454, 1014,  406,  254,  255,  256,  254, 1013,  402,
      256,  255,  256,  256,  456,  287,  456,  456,  253, 1012,
     1011,  303,  253,  252,  303,  252,  252, 1010, 1009, 1008,

      449,  253,  259,  252, 1007,  252,  252,  257,  252, 1006,
      252,  252,  252,  257,  252,  252, 1005, 1004,  252,  458,
      252,  252, 1003, 1002,  304,  457,  253,  252,  612,  252,
      252,  612,  303,  999,  459,  303,  253,  252,  998,  252,
      252,  253,  462,  997,  460,  253,  461,  252,  463,  252,
      252,  253,  252,  996,  252,  252,  252,  995,  252,  252,
      253,  252,  994,  252,  252,  304,  464,  465,  993,  992,
      253,  466,  252,  991,  252,  252,  252,  613,  252,  252,
      253,  990,  989,  468,  252,  253,  252,  252,  988,  253,
      467,  904,  987,  252,  253,  252,  252,  469,  252,  902,

      252,  252,  901,  470,  303,  253,  471,  303,  252,  253,
      252,  252,  252,  310,  252,  252,  986,  253,  472,  252,
      985,  252,  252,  984,  981,  473,  253,  252,  980,  252,
      252,  253,  474,  893,  892,  475,  252,  304,  252,  252,
      252,  253,  252,  252,  891,  253,  477,  478,  252,  476,
      252,  252,  253,  252,  890,  252,  252,  889,  888,  479,
      253,  252,  887,  252,  252,  481,  979,  885,  252,  253,
      252,  252,  303,  253,  252,  303,  252,  252,  480,  978,
      977,  253,  976,  483,  913,  482,  253,  286,  287,  286,
      286,  505,  912,  484,  253,  252,  485,  252,  252,  911,

      291,  253,  291,  291,  910,  304,  291,  253,  291,  291,
      487,  455,  487,  487,  252,  909,  252,  252,  908,  252,
      253,  252,  252,  252,  907,  252,  252,  252,  253,  252,
      252,  906,  486,  292,  252,  905,  252,  252,  904,  292,
      488,  473,  903,  292,  902,  492,  252,  253,  252,  252,
      901,  252,  253,  252,  252,  900,  253,  490,  899,  489,
      253,  898,  252,  491,  252,  252,  895,  253,  252,  297,
      252,  252,  495,  496,  497,  495,  894,  893,  892,  253,
      305,  306,  307,  305,  253,  307,  306,  307,  307,  891,
      303,  298,  493,  303,  890,  253,  339,  338,  339,  339,

      303,  253,  889,  303,  303,  304,  303,  303,  494,  303,
      888,  499,  498,  308,  303,  887,  303,  303,  308,  303,
      886,  303,  885,  304,  303,  303,  500,  504,  303,  503,
      884,  883,  501,  304,  502,  303,  506,  304,  303,  304,
      507,  303,  303,  303,  303,  303,  303,  304,  303,  304,
      303,  303,  509,  303,  304,  882,  303,  881,  304,  303,
      303,  880,  879,  303,  508,  512,  510,  303,  304,  511,
      303,  519,  878,  513,  304,  304,  304,  514,  877,  303,
      515,  304,  303,  304,  303,  303,  876,  303,  303,  304,
      516,  303,  766,  304,  303,  303,  303,  765,  303,  303,

      304,  875,  874,  518,  520,  303,  873,  522,  303,  517,
      872,  303,  304,  523,  303,  871,  303,  304,  304,  303,
      870,  521,  612,  303,  304,  612,  303,  524,  304,  304,
      525,  869,  757,  526,  337,  338,  339,  337,  304,  339,
      338,  339,  339,  343,  304,  219,  343,  756,  303,  304,
      219,  303,  343,  527,  219,  343,  304,  303,  868,  219,
      303,  528,  496,  529,  528,  867,  303,  304,  219,  303,
      303,  613,  866,  303,  530,  514,  344,  303,  865,  303,
      303,  304,  303,  303,  303,  344,  303,  303,  534,  358,
      304,  358,  358,  401,  344,  401,  401,  531,  401,  304,

      532,  612,  349,  304,  612,  864,  533,  863,  862,  861,
      304,  774,  304,  860,  774,  746,  304,  304,  354,  355,
      356,  354,  357,  859,  350,  535,  402,  858,  402,  536,
      358,  355,  358,  358,  388,  389,  388,  388,  388,  389,
      388,  388,  574,  575,  576,  574,  403,  404,  405,  403,
      613,  357,  407,  404,  407,  407,  410,  409,  410,  410,
      775,  857,  407,  357,  407,  407,  408,  409,  410,  408,
      410,  409,  410,  410,  742,  402,  856,  855,  854,  406,
      609,  610,  609,  609,  853,  406,  618,  619,  620,  618,
      621,  622,  623,  621,  776,  406,  773,  772,  771,  402,

      451,  452,  453,  451,  453,  452,  453,  453,  454,  455,
      454,  454,  456,  287,  456,  456,  252,  770,  252,  252,
      252,  769,  252,  252,  768,  767,  252,  624,  252,  252,
      766,  252,  765,  252,  252,  252,  449,  252,  252,  764,
      449,  253,  763,  252,  625,  252,  252,  762,  628,  253,
      242,  626,  252,  253,  252,  252,  761,  760,  759,  253,
      627,  758,  629,  252,  253,  252,  252,  757,  253,  630,
      252,  756,  252,  252,  755,  754,  253,  252,  753,  252,
      252,  252,  752,  252,  252,  253,  632,  252,  633,  252,
      252,  252,  631,  252,  252,  303,  253,  252,  303,  252,

      252,  751,  634,  253,  252,  303,  252,  252,  303,  635,
      253,  750,  669,  749,  253,  636,  252,  640,  252,  252,
      253,  748,  637,  252,  253,  252,  252,  638,  304,  252,
      253,  252,  252,  252,  666,  252,  252,  253,  304,  747,
      252,  639,  252,  252,  641,  746,  745,  774,  643,  253,
      774,  774,  644,  744,  774,  743,  253,  642,  742,  741,
      740,  252,  253,  252,  252,  252,  253,  252,  252,  252,
      739,  252,  252,  253,  738,  737,  645,  252,  646,  252,
      252,  252,  736,  252,  252,  252,  567,  252,  252,  735,
      734,  647,  733,  648,  253,  732,  775,  731,  253,  730,

      775,  252,  253,  252,  252,  252,  729,  252,  252,  649,
      253,  726,  650,  651,  253,  725,  652,  252,  253,  252,
      252,  252,  653,  252,  252,  487,  455,  487,  487,  252,
      654,  252,  252,  658,  253,  252,  658,  724,  253,  656,
      610,  656,  656,  252,  723,  252,  252,  722,  303,  721,
      253,  303,  720,  719,  253,  655,  718,  252,  292,  252,
      252,  252,  253,  252,  252,  252,  253,  252,  252,  715,
      657,  303,  253,  665,  303,  714,  253,  495,  496,  497,
      495,  304,  659,  488,  660,  497,  496,  497,  497,  303,
      253,  713,  303,  303,  253,  664,  303,  712,  253,  303,

      663,  661,  303,  711,  304,  303,  667,  662,  303,  303,
      304,  303,  303,  303,  303,  710,  303,  709,  668,  708,
      672,  303,  304,  707,  303,  706,  304,  670,  673,  705,
      704,  703,  304,  303,  671,  702,  303,  303,  304,  617,
      303,  616,  304,  615,  304,  441,  304,  303,  303,  674,
      303,  303,  303,  614,  304,  303,  303,  675,  677,  303,
      303,  679,  676,  303,  303,  611,  304,  303,  303,  608,
      304,  303,  678,  680,  303,  682,  683,  303,  607,  303,
      304,  304,  303,  684,  681,  304,  606,  685,  303,  304,
      605,  303,  604,  304,  601,  687,  303,  304,  600,  303,

      303,  304,  303,  303,  599,  303,  303,  304,  303,  303,
      686,  303,  304,  303,  598,  597,  303,  691,  596,  697,
      595,  304,  697,  692,  688,  594,  693,  689,  690,  304,
      593,  303,  590,  304,  303,  304,  589,  303,  588,  304,
      303,  304,  694,  587,  586,  585,  304,  528,  496,  529,
      528,  584,  304,  583,  219,  529,  496,  529,  529,  695,
      610,  609,  695,  303,  304,  582,  303,  581,  698,  580,
      304,  303,  696,  303,  303,  579,  303,  578,  699,  577,
      344,  609,  610,  609,  609,  574,  575,  576,  574,  530,
     1078,  573,  304, 1078,  572,  571,  304,  576,  575,  576,

      576,  570, 1078,  569,  304, 1078,  304,  609,  610,  609,
      609,  700,  568,  566,  252,  701,  252,  252,  402,  618,
      619,  620,  618,  620,  619,  620,  620,  621,  622,  623,
      621,  623,  622,  623,  623,  252,  563,  252,  252, 1079,
      252,  562,  252,  252,  779,  561,  252,  253,  252,  252,
      560, 1079,  777,  778,  559,  252,  558,  252,  252,  252,
      557,  252,  252,  303,  780,  781,  303,  556,  253,  242,
      555,  554,  252,  253,  252,  252,  782,  242,  252,  253,
      252,  252,  303,  553,  252,  303,  252,  252,  253,  552,
      551,  821,  253,  784,  785,  252,  304,  252,  252,  252,

      783,  252,  252,  826,  252,  253,  252,  252,  550,  547,
      252,  253,  252,  252,  546,  304,  252,  253,  252,  252,
      545,  544,  787,  543,  786,  788,  542,  252,  253,  252,
      252,  252,  253,  252,  252,  539,  538,  253,  789,  537,
      361,  248,  790,  253,  791,  252,  450,  252,  252,  253,
      252, 1121,  252,  252, 1121,  252,  792,  252,  252,  252,
      253,  252,  252,  449,  253,  794,  793,  242,  303,  795,
      252,  303,  252,  252,  252,  238,  252,  252,  253,  798,
      796,  816,  252,  253,  252,  252,  448,  252,  253,  252,
      252,  252,  253,  252,  252,  234,  252,  799,  252,  252,

     1122,  304,  797,  253,  229,  447,  800,  253,  252,  446,
      252,  252,  801,  445, 1078,  253,  802, 1078,  444,  803,
      253,  443,  442,  252,  253,  252,  252,  228,  252,  253,
      252,  252,  252,  804,  252,  252,  223,  252,  805,  252,
      252,  253,  252,  222,  252,  252,  656,  610,  656,  656,
      806,  252,  221,  252,  252,  658,  253,  252,  658,  440,
      437,  253,  807, 1079,  252,  253,  252,  252,  436,  252,
      253,  252,  252,  435,  252,  253,  252,  252,  813,  253,
      252,  813,  303,  434,  253,  303,  433,  303,  253,  808,
      303,  303,  303,  809,  303,  303,  432,  253,  431,  815,

      430,  819,  253,  303,  659,  303,  303,  253,  303,  812,
      818,  253,  429,  810,  428,  304,  811,  817,  822,  427,
      304,  426,  820,  303,  304,  304,  303,  814,  303,  303,
      425,  303,  303,  823,  424,  421,  304,  303,  304,  420,
      303,  303,  303,  303,  303,  303,  303,  419,  303,  418,
      303,  303,  825,  303,  417, 1124,  304,  824, 1124,  829,
      833,  304,  304,  303,  416,  827,  303,  828,  830,  831,
      304,  413,  412,  411,  304,  304,  304,  303,  832,  303,
      303,  304,  303,  304,  183,  303,  303,  834,  303,  303,
      303,  303,  303,  303,  303,  303,  304,  395,  394,  303,

      303,  837,  303,  303, 1125,  838,  393,  835,  839,  836,
      304,  841,  304,  303,  390,  387,  303,  844,  304,  304,
      840,  382,  381,  304,  304,  304,  303,  303,  303,  303,
      303,  303,  304,  304,  380,  369,  842,  843,  845,  695,
      610,  609,  695,  365,  303,  697,  304,  303,  697,  303,
      303,  362,  303,  303,  303,  851,  361,  303,  851,  304,
      304,  304,  252,  361,  252,  252,  252,  250,  252,  252,
      246,  243,  304,  303,  242,  846,  303,  304,  304,  238,
      234,  915,  304,  304,  229,  228,  847,  304,  304,  850,
      914,  223,  222,  221,  698,  253,  210,  849,  848,  253,

      252,  945,  252,  252,  852,  252,  304,  252,  252,  252,
      209,  252,  252,  204,  252,  917,  252,  252,  252,  203,
      252,  252,  252,  202,  252,  252,  303,  916,  919,  303,
      191,  187,  918,  253,  252,  184,  252,  252,  253,  183,
      183,  946,  253,  252,  920,  252,  252,  253,  182, 1190,
     1190,  253, 1190,  921,  252,  253,  252,  252,  252,  304,
      252,  252, 1190,  252,  922,  252,  252,  253,  923,  252,
     1190,  252,  252,  924, 1190,  252,  253,  252,  252,  925,
      252,  303,  252,  252,  303, 1190,  252,  253,  252,  252,
      252,  253,  252,  252, 1190,  252,  253,  252,  252,  928,

     1190,  303,  253,  926,  303, 1190, 1190,  927,  253,  252,
     1190,  252,  252,  253,  304,  929, 1190,  930,  252,  253,
      252,  252, 1190,  253,  252, 1190,  252,  252,  253,  252,
     1190,  252,  252,  252,  304,  252,  252, 1190,  252,  933,
      252,  252,  253,  934, 1190, 1190,  252,  931,  252,  252,
     1190,  253,  252,  932,  252,  252,  936,  253, 1190, 1190,
      935,  252,  253,  252,  252,  252,  253,  252,  252, 1190,
      252,  253,  252,  252,  252, 1190,  252,  252,  252,  253,
      252,  252,  937, 1190,  252,  253,  252,  252,  252, 1121,
      252,  252, 1121,  252,  253,  252,  252,  939,  253,  938,

     1190, 1190,  252,  253,  252,  252,  813,  253,  252,  813,
      252,  253,  252,  252, 1190,  303, 1190,  253,  303,  940,
      303,  253,  941,  303,  303, 1190,  253,  303,  942,  303,
      948, 1190,  303, 1190,  950,  253,  943, 1190, 1122,  253,
     1190,  303,  947,  253,  303, 1190,  303,  949,  304,  303,
     1190,  951, 1190,  304, 1190,  814,  952,  304,  303,  944,
      303,  303,  304,  303,  303, 1190,  303,  303,  953,  303,
      954, 1190,  303, 1190,  304,  303,  955,  303, 1190,  304,
      303,  303,  956,  303,  303,  303,  303,  303,  303, 1190,
      303,  304,  957,  304, 1190,  303,  959,  304,  303,  304,

      303, 1190, 1190,  303,  958,  304,  303, 1190,  961,  303,
      304, 1190,  960, 1190,  304, 1190,  304, 1190,  304, 1190,
      304, 1190,  303,  303,  962,  303,  303,  303,  304,  963,
      303,  303,  964,  304,  303,  303,  968,  965,  303,  304,
      303,  967, 1190,  303,  303,  966,  303,  303,  303,  303,
      303,  303, 1190,  303,  303,  304,  304,  303,  303, 1190,
      304,  303,  303, 1190,  304,  303,  851,  970,  304,  851,
     1190,  303, 1190,  304,  303,  969, 1190,  304, 1190,  304,
     1190,  304, 1190,  304, 1190, 1190, 1190,  304,  972,  971,
     1190,  304, 1190,  973, 1190,  304,  974, 1190,  252,  304,

      252,  252, 1190,  252,  304,  252,  252,  252, 1016,  252,
      252,  303, 1190, 1017,  303,  852,  252, 1018,  252,  252,
      975,  252, 1190,  252,  252,  252, 1190,  252,  252, 1190,
      252,  253,  252,  252, 1190,  252,  253,  252,  252,  252,
      253,  252,  252,  252,  304,  252,  252, 1190,  303,  253,
     1019,  303, 1190,  252,  253,  252,  252,  252,  253,  252,
      252, 1190,  303,  253,  252,  303,  252,  252,  253, 1190,
     1190, 1190,  253, 1190, 1020,  252,  253,  252,  252, 1190,
      252,  304,  252,  252, 1190, 1190,  253, 1190, 1021, 1190,
      253,  252, 1190,  252,  252,  304,  252,  253,  252,  252,

      252, 1190,  252,  252, 1022, 1023, 1025, 1190,  253,  252,
     1024,  252,  252,  253, 1190,  252, 1190,  252,  252, 1026,
      252, 1190,  252,  252,  253, 1027, 1190, 1190,  252,  253,
      252,  252,  252,  253,  252,  252,  252, 1190,  252,  252,
     1190, 1190,  253, 1028,  252, 1190,  252,  252,  253,  252,
     1190,  252,  252,  253, 1030, 1190, 1190,  252, 1029,  252,
      252,  253, 1190,  303, 1031,  253,  303, 1190,  252,  253,
      252,  252,  252, 1036,  252,  252,  252,  253,  252,  252,
     1190,  252,  253,  252,  252,  303,  303, 1190,  303,  303,
      253, 1190, 1190, 1190,  303, 1037,  304,  303, 1190,  303,

     1190,  253,  303, 1032, 1038,  253, 1190,  303, 1034,  253,
      303, 1190, 1190,  303,  253, 1033,  303,  303,  304,  304,
      303,  303, 1035,  303,  303, 1190,  303,  304, 1039, 1190,
     1190,  303,  304, 1040,  303, 1190,  303, 1190,  303,  303,
      304,  303,  303, 1190, 1041,  303,  304, 1190,  303, 1190,
      304,  303, 1045, 1190,  304, 1190,  304, 1044, 1046, 1190,
     1042, 1043,  303,  303,  304,  303,  303,  303, 1190,  304,
      303,  304, 1047,  303,  303,  304,  303,  303, 1190,  303,
      303,  304,  303,  303,  303, 1190,  303,  303, 1048,  303,
     1050,  303, 1190, 1190,  303,  304,  304, 1190, 1190, 1051,

      304, 1049,  303, 1190, 1190,  303,  304,  304,  303, 1190,
     1190,  303,  304,  304, 1190, 1190, 1190,  304,  303,  304,
      252,  303,  252,  252,  304,  252, 1124,  252,  252, 1124,
     1190,  252, 1052,  252,  252,  304, 1190,  252, 1053,  252,
      252,  304, 1190,  252, 1054,  252,  252, 1081, 1055, 1190,
     1190,  304,  252,  253,  252,  252, 1190,  303,  253,  252,
      303,  252,  252, 1190,  253,  252, 1190,  252,  252,  252,
      253,  252,  252, 1190, 1190, 1125,  253, 1082, 1083,  252,
     1121,  252,  252, 1121, 1190,  253,  252, 1084,  252,  252,
      304, 1085,  253,  252, 1190,  252,  252,  252,  253,  252,

      252,  303,  253,  252,  303,  252,  252, 1086,  252, 1190,
      252,  252,  253,  252,  303,  252,  252,  303,  252,  253,
      252,  252, 1190, 1088, 1190,  252,  253,  252,  252, 1122,
      253, 1190, 1087, 1089,  304, 1091,  253,  252, 1091, 1190,
      252,  253,  252,  252, 1190,  303,  253,  304,  303,  303,
      303,  253,  303,  303, 1090, 1094, 1190, 1190,  253,  303,
      303, 1190,  303,  303,  303, 1190,  303,  303,  253,  303,
     1190,  303, 1190,  253,  303, 1095, 1093,  303,  304, 1096,
      303, 1097,  304,  304, 1092,  303, 1098,  303,  303, 1190,
      303,  303,  304,  304,  303, 1099, 1190,  304,  303,  304,

     1190,  303,  303,  303,  304,  303,  303, 1190, 1101, 1104,
      304, 1102, 1104, 1190,  303, 1190, 1100,  303,  304,  252,
      304,  252,  252,  252,  304,  252,  252,  252, 1190,  252,
      252,  304, 1190, 1190, 1190,  304,  304,  252, 1103,  252,
      252,  252,  304,  252,  252, 1126, 1190,  304, 1190, 1127,
     1106, 1128,  253, 1190, 1190, 1190,  253, 1190, 1105, 1190,
      253,  252, 1190,  252,  252,  252, 1190,  252,  252,  252,
      253,  252,  252, 1190,  253, 1130, 1129,  252, 1190,  252,
      252, 1132, 1190,  252, 1132, 1091, 1190,  252, 1091,  252,
     1190,  252,  252, 1135,  253,  252, 1135, 1190,  253, 1190,

      303, 1190,  253,  303,  303, 1190,  303,  303,  303,  303,
      253,  303, 1131,  303,  253, 1190,  303,  303,  253, 1140,
      303,  303,  253, 1190,  303, 1190,  253, 1139, 1137,  303,
     1133, 1141,  303,  304, 1092, 1138, 1190,  304, 1134,  304,
      303,  304, 1136,  303, 1143, 1104,  304, 1143, 1104,  303,
      304, 1190,  303, 1146,  304, 1124, 1146,  252, 1124,  252,
      252, 1190,  304, 1190, 1190, 1190,  252, 1158,  252,  252,
     1190, 1190, 1190,  304, 1190, 1142, 1190,  304,  304, 1190,
     1190, 1159,  304, 1190, 1190,  252,  304,  252,  252,  252,
      253,  252,  252, 1144, 1105, 1190, 1190,  303, 1145,  253,

      303, 1190, 1147,  252, 1125,  252,  252,  252, 1190,  252,
      252, 1190, 1132, 1160,  252, 1132, 1190,  252,  253,  252,
      252,  252,  253,  252,  252, 1135, 1190,  252, 1135,  252,
      304,  252,  252, 1190,  303, 1190,  253,  303,  303,  303,
      253,  303,  303, 1161, 1164,  253, 1190, 1190,  303, 1166,
      253,  303,  303, 1165,  253,  303, 1143,  303,  253, 1143,
      303, 1133,  253, 1190, 1190,  303, 1162,  304,  303, 1190,
     1146,  304,  304, 1146, 1136, 1190,  303, 1190, 1163,  303,
      252,  304,  252,  252,  252,  304,  252,  252, 1167,  304,
      304, 1190, 1190,  252, 1174,  252,  252,  252,  304,  252,

      252,  303, 1190,  304,  303, 1144, 1168, 1190,  252,  304,
      252,  252,  252,  253,  252,  252, 1190,  253,  303, 1147,
      303,  303, 1190,  303,  303, 1169,  253,  303, 1176,  303,
      253, 1190,  303,  303,  304,  252,  303,  252,  252,  303,
     1175,  253,  303, 1190,  252,  253,  252,  252, 1190,  303,
     1190,  304,  303,  304, 1190, 1190,  303,  304,  252,  303,
      252,  252,  304, 1190, 1190, 1190,  304, 1177,  253, 1190,
      303, 1190,  304,  303, 1190, 1190, 1190,  253,  252, 1190,
      252,  252,  304,  303, 1190, 1190,  303, 1190, 1188,  304,
     1180,  253, 1190, 1189, 1190, 1181,  252, 1184,  252,  252,

     1190, 1190, 1190,  304, 1190, 1190, 1190, 1190, 1190, 1185,
     1190,  253, 1190, 1190, 1190, 1190,  304, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,  253,
       53,   53,   53,   53,   53,   53,   58,   58,   58,   58,
       58,   58,   65,   65,   65,   65,   65,   65,   70,   70,
       70,   70,   70,   70,  175,  175,  175,  175,  175,  175,
      219,  219, 1190,  219,  219,  219,  230,  230,  230,  230,
      230,  230,  233, 1190, 1190, 1190,  233,  233,  235,  235,
      235,  235,  235,  235,  241,  241, 1190, 1190,  241,  241,
      247,  247,  247,  247,  247,  247,  251,  251, 1190,  251,

      251,  251,  290,  290, 1190,  290,  290,  290,  302,  302,
     1190, 1190, 1190,  302,  342,  342, 1190,  342,  342,  342,
      400,  400, 1190, 1190, 1190,  400,   17, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190
    } ;

static yyconst flex_int16_t yy_chk[3980] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    7,    7,    2,    2,    3,    3,    3,
        3, 1206,    2,    4,    4,    4,    4,    4,    5,    5,
        6,    6,    8,    8,   19,    2,   34,   19,    4,   28,
       15,   15,   15,   15, 1186,   30,   28,   15,    2,   30,
       34,   46,   33,    2,   35,    2,   30,    2,   39,   32,

        2,    2,   32,   33, 1183,   46,   32,   40,    4,   32,
       39,   35,    5,   15,    6,   40,   51,    5,   51,    6,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   10,   64,   50,   10,   10,   16,   16,   16,
       16,  174,   10,  174,   16,   56,   56,   56,   61,   61,
       61,   61,   68,   70,   70,   10,   50,   68,  152,  156,

      154,  157,  156,   64,  154,  152,  156,  163,   10,  156,
       16,  154,  157,   10,  187,   10,  187,   10, 1182,  163,
       10,   10,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   12,  158,  159,   12,   12,   73,
      109,   73,   73,  109,   12,   74,   74,   74,   74,  158,
      164,  169,  173,  159,  194,  220,  220,   12,  164,  166,

      166,  166,  166,  181,  209,  169,  181,  209,  194,  217,
       12,  217,   73,  109,  173,   12,  244,   12,   74,   12,
     1179,  244,   12,   12,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   14,  247,  247,   14,
       14,   76,   76,   76,   76,   77,   14,   77,   77,   78,
      240,   78,   78,  365,   79,  365,   79,   79,   78,   14,

       80, 1178,   80,   80,   81, 1173,   81,   81,   84,   80,
       84,   84,   14,   83,   76,   83,   83,   14,   77,   14,
      240,   14,   78,   84,   14,   14,   43,   79, 1171,   43,
       43,   83,   82,   80,   82,   82,   43,   81,   83, 1170,
       95,   84,   95,   95,  113, 1155,   83,  113,   82,  225,
       85,   95,   85,   85,  397,   86,  372,   86,   86,   95,
     1153,   93,   43,   93,   93,   82,  754,   43,   85,   43,
      372,  225,   85,   95,   43,   43,  397,  113,   92,   85,
       92,   92,  754,   85,   86,  232,  232,  232,   86,   87,
       93,   87,   87,   88,   93,   88,   88,  392,  392,   89,

       92,   89,   89,  867,   91,   87,   91,   91,   87,   88,
       89,   92,   87, 1151,   90,   87,   90,   90,  387,  867,
       88,  387,   87, 1150,   89,   90,   88,   94, 1149,   94,
       94,   91,   89,   96, 1148,   96,   96,   91,   97,   97,
       97,   97,   90,  435,  425,   94,  435,   90,   96,   98,
      551,   98,   98,   99,   99,   99,   99,   94,  425,  100,
       94,  100,  100, 1125,  551,  101,   96,  101,  101, 1122,
      102,   97,  102,  102,  103, 1120,  103,  103,  237,  237,
      237,  102,   98, 1118, 1116,   98,   99,  104,  895,  104,
      104,  105,  100,  105,  105,  102, 1115,  117,  101,  106,

      117,  106,  106,  102,  895,  981,  107,  103,  107,  107,
      108,  561,  108,  108,  561, 1112, 1111,  103, 1110, 1109,
      104,  981,  106, 1108,  105,  110,  110,  110,  110, 1107,
      117, 1079,  106,  118,  104,  105,  118, 1076,  119,  107,
      107,  119,  107,  108,  106,  112,  112,  112,  112,  118,
      120,  114,  116,  120,  114,  116,  119, 1074,  110,  108,
      114,  116, 1072,  119,  121,  120,  118,  121, 1071,  122,
     1070,  119,  122,  123,  124, 1069,  123,  124,  112, 1067,
     1065, 1064,  121,  120,  114,  116,  121, 1063,  127,  123,
      124,  127,  123,  121, 1062, 1061,  123,  121,  122,  123,

      125,  124,  122,  125, 1060,  128,  123,  124,  128,  126,
      129,  125,  126,  129,  130,  127,  132,  130, 1059,  132,
      126,  127, 1058, 1057, 1056,  125,  134,  128, 1015,  134,
     1014,  132,  130,  125, 1012, 1011, 1010,  126,  128,  129,
     1008, 1007,  126,  129,  130,  131, 1003,  130,  131,  132,
      133,  133,  133,  133,  137, 1002,  131,  137,  139,  134,
      140,  139,  134,  140,  131,  135,  135,  135,  135,  136,
      138,  136,  136,  138, 1001, 1000,  136,  141,  131,  998,
      141,  138,  142,  133,  994,  142,  143,  137,  993,  143,
      992,  139,  991,  140,  990,  138,  144,  989,  135,  144,

      988,  139,  136,  138,  987,  142,  175,  140,  986,  175,
      141,  145,  145,  145,  145,  142,  985,  984,  983,  143,
      143,  141,  143,  147,  147,  147,  147,  142,  982,  144,
      168,  168,  168,  168,  176,  176,  176,  176,  980,  175,
      178,  178,  178,  178,  145,  144,  180,  180,  180,  180,
      246,  246,  246,  246,  979,  251,  147,  251,  251,  252,
      978,  252,  252,  168,  977,  976,  913,  176,  253,  253,
      253,  253,  911,  178,  254,  254,  254,  254,  910,  180,
      256,  256,  256,  256,  257,  257,  257,  257,  251,  909,
      908,  302,  252,  259,  302,  259,  259,  907,  906,  905,

      246,  253,  259,  260,  903,  260,  260,  254,  261,  900,
      261,  261,  262,  256,  262,  262,  899,  898,  263,  261,
      263,  263,  897,  896,  302,  260,  259,  264,  443,  264,
      264,  443,  303,  894,  262,  303,  260,  265,  886,  265,
      265,  261,  264,  884,  263,  262,  263,  266,  265,  266,
      266,  263,  267,  883,  267,  267,  268,  882,  268,  268,
      264,  269,  881,  269,  269,  303,  266,  267,  880,  879,
      265,  268,  270,  878,  270,  270,  271,  443,  271,  271,
      266,  877,  876,  270,  272,  267,  272,  272,  875,  268,
      269,  874,  873,  273,  269,  273,  273,  270,  274,  872,

      274,  274,  871,  271,  310,  270,  272,  310,  275,  271,
      275,  275,  276,  310,  276,  276,  870,  272,  273,  277,
      869,  277,  277,  868,  866,  274,  273,  278,  865,  278,
      278,  274,  275,  864,  863,  276,  279,  310,  279,  279,
      280,  275,  280,  280,  862,  276,  278,  279,  281,  277,
      281,  281,  277,  282,  861,  282,  282,  860,  859,  280,
      278,  284,  858,  284,  284,  282,  857,  856,  283,  279,
      283,  283,  317,  280,  285,  317,  285,  285,  281,  855,
      854,  281,  853,  284,  776,  283,  282,  286,  286,  286,
      286,  317,  775,  285,  284,  288,  285,  288,  288,  773,

      290,  283,  290,  290,  772,  317,  291,  285,  291,  291,
      292,  292,  292,  292,  293,  770,  293,  293,  769,  294,
      286,  294,  294,  295,  768,  295,  295,  296,  288,  296,
      296,  767,  288,  290,  297,  764,  297,  297,  763,  291,
      293,  293,  762,  292,  761,  297,  298,  293,  298,  298,
      760,  299,  294,  299,  299,  759,  295,  295,  758,  294,
      296,  755,  300,  296,  300,  300,  753,  297,  301,  298,
      301,  301,  304,  304,  304,  304,  752,  751,  750,  298,
      305,  305,  305,  305,  299,  307,  307,  307,  307,  749,
      311,  298,  299,  311,  748,  300,  308,  308,  308,  308,

      312,  301,  747,  312,  313,  304,  314,  313,  300,  314,
      745,  312,  311,  305,  315,  744,  316,  315,  307,  316,
      743,  318,  741,  311,  318,  319,  313,  316,  319,  315,
      740,  739,  314,  312,  314,  320,  318,  313,  320,  314,
      319,  321,  322,  323,  321,  322,  323,  315,  324,  316,
      325,  324,  321,  325,  318,  738,  326,  736,  319,  326,
      330,  735,  734,  330,  320,  323,  321,  327,  320,  322,
      327,  330,  733,  324,  321,  322,  323,  325,  732,  328,
      326,  324,  328,  325,  329,  331,  731,  329,  331,  326,
      327,  332,  730,  330,  332,  333,  334,  729,  333,  334,

      327,  728,  727,  329,  331,  335,  726,  333,  335,  328,
      725,  336,  328,  334,  336,  724,  340,  329,  331,  340,
      723,  332,  569,  353,  332,  569,  353,  335,  333,  334,
      336,  722,  721,  336,  337,  337,  337,  337,  335,  339,
      339,  339,  339,  342,  336,  342,  342,  720,  345,  340,
      342,  345,  343,  340,  343,  343,  353,  346,  719,  343,
      346,  344,  344,  344,  344,  718,  347,  337,  344,  347,
      348,  569,  717,  348,  345,  345,  342,  349,  716,  350,
      349,  345,  350,  352,  351,  343,  352,  351,  349,  358,
      346,  358,  358,  400,  344,  401,  400,  346,  401,  347,

      347,  612,  350,  348,  612,  715,  348,  714,  713,  712,
      349,  616,  350,  711,  616,  710,  352,  351,  354,  354,
      354,  354,  358,  709,  350,  351,  400,  708,  401,  352,
      356,  356,  356,  356,  357,  357,  357,  357,  388,  388,
      388,  388,  402,  402,  402,  402,  403,  403,  403,  403,
      612,  354,  405,  405,  405,  405,  406,  406,  406,  406,
      616,  707,  407,  356,  407,  407,  408,  408,  408,  408,
      410,  410,  410,  410,  706,  402,  705,  704,  703,  403,
      441,  441,  441,  441,  702,  405,  449,  449,  449,  449,
      450,  450,  450,  450,  617,  407,  615,  614,  613,  408,

      451,  451,  451,  451,  453,  453,  453,  453,  454,  454,
      454,  454,  456,  456,  456,  456,  457,  611,  457,  457,
      458,  608,  458,  458,  607,  606,  459,  457,  459,  459,
      605,  460,  604,  460,  460,  461,  449,  461,  461,  603,
      450,  454,  602,  462,  458,  462,  462,  601,  461,  457,
      451,  459,  463,  458,  463,  463,  600,  599,  598,  459,
      460,  597,  462,  465,  460,  465,  465,  596,  461,  463,
      464,  595,  464,  464,  594,  593,  462,  466,  592,  466,
      466,  468,  591,  468,  468,  463,  465,  467,  466,  467,
      467,  469,  464,  469,  469,  504,  465,  470,  504,  470,

      470,  590,  467,  464,  472,  501,  472,  472,  501,  468,
      466,  589,  504,  588,  468,  469,  471,  472,  471,  471,
      467,  587,  470,  473,  469,  473,  473,  471,  504,  474,
      470,  474,  474,  475,  501,  475,  475,  472,  501,  586,
      476,  471,  476,  476,  473,  585,  584,  737,  475,  471,
      737,  774,  476,  583,  774,  582,  473,  474,  581,  580,
      579,  477,  474,  477,  477,  478,  475,  478,  478,  479,
      578,  479,  479,  476,  577,  573,  477,  480,  478,  480,
      480,  481,  572,  481,  481,  482,  571,  482,  482,  570,
      568,  479,  566,  480,  477,  565,  737,  564,  478,  563,

      774,  483,  479,  483,  483,  484,  562,  484,  484,  481,
      480,  560,  481,  482,  481,  559,  483,  485,  482,  485,
      485,  486,  484,  486,  486,  487,  487,  487,  487,  489,
      485,  489,  489,  490,  483,  490,  490,  558,  484,  488,
      488,  488,  488,  491,  557,  491,  491,  556,  500,  555,
      485,  500,  554,  553,  486,  486,  552,  492,  487,  492,
      492,  493,  489,  493,  493,  494,  490,  494,  494,  550,
      489,  499,  488,  500,  499,  549,  491,  495,  495,  495,
      495,  500,  490,  492,  491,  497,  497,  497,  497,  498,
      492,  548,  498,  502,  493,  499,  502,  547,  494,  503,

      498,  493,  503,  546,  499,  505,  502,  494,  505,  507,
      495,  506,  507,  508,  506,  545,  508,  544,  503,  543,
      507,  509,  498,  542,  509,  541,  502,  505,  508,  540,
      539,  538,  503,  510,  506,  537,  510,  511,  505,  448,
      511,  447,  507,  446,  506,  445,  508,  512,  513,  509,
      512,  513,  514,  444,  509,  514,  515,  510,  512,  515,
      516,  513,  511,  516,  517,  442,  510,  517,  518,  440,
      511,  518,  512,  514,  519,  516,  517,  519,  439,  521,
      512,  513,  521,  518,  515,  514,  438,  519,  520,  515,
      437,  520,  436,  516,  434,  521,  522,  517,  433,  522,

      523,  518,  524,  523,  432,  524,  525,  519,  527,  525,
      520,  527,  521,  526,  431,  430,  526,  524,  429,  532,
      428,  520,  532,  525,  522,  427,  526,  522,  523,  522,
      426,  531,  424,  523,  531,  524,  423,  533,  422,  525,
      533,  527,  527,  421,  420,  419,  526,  528,  528,  528,
      528,  418,  532,  417,  528,  529,  529,  529,  529,  530,
      530,  530,  530,  534,  531,  416,  534,  415,  532,  414,
      533,  535,  531,  536,  535,  413,  536,  412,  533,  411,
      528,  567,  567,  567,  567,  574,  574,  574,  574,  534,
     1013,  399,  530, 1013,  398,  396,  534,  576,  576,  576,

      576,  395, 1066,  394,  535, 1066,  536,  609,  609,  609,
      609,  535,  393,  390,  626,  536,  626,  626,  574,  618,
      618,  618,  618,  620,  620,  620,  620,  621,  621,  621,
      621,  623,  623,  623,  623,  624,  386,  624,  624, 1013,
      625,  385,  625,  625,  626,  384,  627,  626,  627,  627,
      383, 1066,  624,  625,  382,  628,  381,  628,  628,  629,
      380,  629,  629,  669,  627,  628,  669,  379,  624,  618,
      378,  377,  630,  625,  630,  630,  629,  621,  631,  627,
      631,  631,  674,  376,  632,  674,  632,  632,  628,  375,
      374,  669,  629,  631,  632,  633,  669,  633,  633,  634,

      630,  634,  634,  674,  635,  630,  635,  635,  373,  371,
      636,  631,  636,  636,  370,  674,  637,  632,  637,  637,
      369,  368,  634,  367,  633,  635,  366,  638,  633,  638,
      638,  639,  634,  639,  639,  364,  363,  635,  636,  362,
      361,  249,  637,  636,  638,  640,  245,  640,  640,  637,
      641, 1077,  641,  641, 1077,  645,  639,  645,  645,  642,
      638,  642,  642,  242,  639,  641,  640,  241,  664,  642,
      643,  664,  643,  643,  644,  239,  644,  644,  640,  645,
      643,  664,  646,  641,  646,  646,  238,  649,  645,  649,
      649,  647,  642,  647,  647,  236,  648,  646,  648,  648,

     1077,  664,  644,  643,  231,  227,  647,  644,  650,  226,
      650,  650,  648,  224, 1078,  646,  649, 1078,  223,  650,
      649,  222,  221,  651,  647,  651,  651,  218,  652,  648,
      652,  652,  653,  651,  653,  653,  216,  654,  652,  654,
      654,  650,  655,  215,  655,  655,  656,  656,  656,  656,
      653,  657,  214,  657,  657,  658,  651,  658,  658,  210,
      208,  652,  654, 1078,  659,  653,  659,  659,  207,  660,
      654,  660,  660,  206,  661,  655,  661,  661,  662,  656,
      662,  662,  663,  205,  657,  663,  204,  665,  658,  655,
      665,  667,  666,  657,  667,  666,  203,  659,  202,  663,

      201,  667,  660,  670,  658,  668,  670,  661,  668,  661,
      666,  662,  200,  659,  199,  663,  660,  665,  670,  198,
      665,  197,  668,  671,  667,  666,  671,  662,  672,  673,
      196,  672,  673,  671,  195,  193,  670,  675,  668,  192,
      675,  676,  677,  678,  676,  677,  678,  191,  679,  190,
      681,  679,  673,  681,  189, 1080,  671,  672, 1080,  677,
      681,  672,  673,  680,  188,  675,  680,  676,  678,  679,
      675,  186,  185,  184,  676,  677,  678,  682,  680,  683,
      682,  679,  683,  681,  183,  684,  685,  682,  684,  685,
      686,  688,  687,  686,  688,  687,  680,  172,  171,  692,

      689,  685,  692,  689, 1080,  686,  170,  683,  687,  684,
      682,  689,  683,  693,  167,  165,  693,  692,  684,  685,
      688,  162,  161,  686,  688,  687,  690,  691,  694,  690,
      691,  694,  692,  689,  160,  155,  690,  691,  693,  695,
      695,  695,  695,  153,  696,  697,  693,  696,  697,  698,
      699,  151,  698,  699,  700,  701,  149,  700,  701,  690,
      691,  694,  777,  148,  777,  777,  778,   72,  778,  778,
       69,   67,  695,  815,   65,  694,  815,  696,  697,   63,
       60,  778,  698,  699,   55,   52,  696,  700,  701,  700,
      777,   49,   48,   47,  697,  777,   42,  699,  698,  778,

      779,  815,  779,  779,  701,  780,  815,  780,  780,  781,
       41,  781,  781,   38,  782,  780,  782,  782,  783,   37,
      783,  783,  785,   36,  785,  785,  816,  779,  783,  816,
       31,   29,  782,  779,  784,   27,  784,  784,  780,   25,
       23,  816,  781,  786,  784,  786,  786,  782,   21,   17,
        0,  783,    0,  786,  787,  785,  787,  787,  788,  816,
      788,  788,    0,  789,  787,  789,  789,  784,  788,  790,
        0,  790,  790,  789,    0,  791,  786,  791,  791,  790,
      792,  819,  792,  792,  819,    0,  793,  787,  793,  793,
      794,  788,  794,  794,    0,  795,  789,  795,  795,  793,

        0,  823,  790,  791,  823,    0,    0,  792,  791,  796,
        0,  796,  796,  792,  819,  793,    0,  794,  797,  793,
      797,  797,    0,  794,  798,    0,  798,  798,  795,  799,
        0,  799,  799,  800,  823,  800,  800,    0,  801,  799,
      801,  801,  796,  800,    0,    0,  802,  797,  802,  802,
        0,  797,  803,  798,  803,  803,  802,  798,    0,    0,
      801,  804,  799,  804,  804,  805,  800,  805,  805,    0,
      806,  801,  806,  806,  807,    0,  807,  807,  808,  802,
      808,  808,  803,    0,  809,  803,  809,  809,  810, 1113,
      810,  810, 1113,  811,  804,  811,  811,  807,  805,  806,

        0,    0,  812,  806,  812,  812,  813,  807,  813,  813,
      814,  808,  814,  814,    0,  817,    0,  809,  817,  808,
      818,  810,  809,  818,  821,    0,  811,  821,  811,  820,
      818,    0,  820,    0,  821,  812,  812,    0, 1113,  813,
        0,  822,  817,  814,  822,    0,  824,  820,  817,  824,
        0,  822,    0,  818,    0,  813,  824,  821,  825,  814,
      826,  825,  820,  826,  829,    0,  827,  829,  825,  827,
      826,    0,  828,    0,  822,  828,  827,  830,    0,  824,
      830,  832,  828,  831,  832,  833,  831,  834,  833,    0,
      834,  825,  829,  826,    0,  835,  831,  829,  835,  827,

      836,    0,    0,  836,  830,  828,  841,    0,  832,  841,
      830,    0,  831,    0,  832,    0,  831,    0,  833,    0,
      834,    0,  837,  839,  835,  837,  839,  838,  835,  836,
      838,  840,  837,  836,  840,  842,  841,  838,  842,  841,
      843,  840,    0,  843,  845,  839,  844,  845,  846,  844,
      847,  846,    0,  847,  848,  837,  839,  848,  849,    0,
      838,  849,  850,    0,  840,  850,  851,  845,  842,  851,
        0,  852,    0,  843,  852,  844,    0,  845,    0,  844,
        0,  846,    0,  847,    0,    0,    0,  848,  847,  846,
        0,  849,    0,  849,    0,  850,  850,    0,  914,  851,

      914,  914,    0,  915,  852,  915,  915,  916,  914,  916,
      916,  948,    0,  915,  948,  851,  917,  916,  917,  917,
      852,  918,    0,  918,  918,  919,    0,  919,  919,    0,
      920,  914,  920,  920,    0,  921,  915,  921,  921,  922,
      916,  922,  922,  923,  948,  923,  923,    0,  950,  917,
      918,  950,    0,  924,  918,  924,  924,  925,  919,  925,
      925,    0,  951,  920,  926,  951,  926,  926,  921,    0,
        0,    0,  922,    0,  926,  927,  923,  927,  927,    0,
      928,  950,  928,  928,    0,    0,  924,    0,  927,    0,
      925,  929,    0,  929,  929,  951,  930,  926,  930,  930,

      933,    0,  933,  933,  927,  928,  930,    0,  927,  931,
      929,  931,  931,  928,    0,  932,    0,  932,  932,  931,
      934,    0,  934,  934,  929,  932,    0,    0,  935,  930,
      935,  935,  936,  933,  936,  936,  937,    0,  937,  937,
        0,    0,  931,  935,  938,    0,  938,  938,  932,  939,
        0,  939,  939,  934,  938,    0,    0,  940,  937,  940,
      940,  935,    0,  945,  939,  936,  945,    0,  941,  937,
      941,  941,  942,  945,  942,  942,  943,  938,  943,  943,
        0,  944,  939,  944,  944,  946,  952,    0,  946,  952,
      940,    0,    0,    0,  947,  946,  945,  947,    0,  949,

        0,  941,  949,  940,  947,  942,    0,  953,  942,  943,
      953,    0,    0,  954,  944,  941,  954,  955,  946,  952,
      955,  956,  943,  957,  956,    0,  957,  947,  949,    0,
        0,  958,  949,  957,  958,    0,  959,    0,  960,  959,
      953,  960,  961,    0,  958,  961,  954,    0,  962,    0,
      955,  962,  961,    0,  956,    0,  957,  960,  962,    0,
      958,  959,  963,  964,  958,  963,  964,  965,    0,  959,
      965,  960,  963,  966,  967,  961,  966,  967,    0,  968,
      969,  962,  968,  969,  970,    0,  971,  970,  966,  971,
      969,  972,    0,    0,  972,  963,  964,    0,    0,  970,

      965,  968,  974,    0,    0,  974,  966,  967,  973,    0,
        0,  973,  968,  969,    0,    0,    0,  970,  975,  971,
     1016,  975, 1016, 1016,  972, 1017, 1114, 1017, 1017, 1114,
        0, 1018,  971, 1018, 1018,  974,    0, 1019,  972, 1019,
     1019,  973,    0, 1020,  973, 1020, 1020, 1019,  974,    0,
        0,  975, 1021, 1016, 1021, 1021,    0, 1036, 1017, 1022,
     1036, 1022, 1022,    0, 1018, 1023,    0, 1023, 1023, 1024,
     1019, 1024, 1024,    0,    0, 1114, 1020, 1021, 1022, 1025,
     1121, 1025, 1025, 1121,    0, 1021, 1026, 1023, 1026, 1026,
     1036, 1024, 1022, 1027,    0, 1027, 1027, 1028, 1023, 1028,

     1028, 1037, 1024, 1029, 1037, 1029, 1029, 1028, 1030,    0,
     1030, 1030, 1025, 1031, 1038, 1031, 1031, 1038, 1033, 1026,
     1033, 1033,    0, 1031,    0, 1032, 1027, 1032, 1032, 1121,
     1028,    0, 1029, 1032, 1037, 1034, 1029, 1034, 1034,    0,
     1035, 1030, 1035, 1035,    0, 1039, 1031, 1038, 1039, 1040,
     1041, 1033, 1040, 1041, 1033, 1039,    0,    0, 1032, 1043,
     1042,    0, 1043, 1042, 1044,    0, 1045, 1044, 1034, 1045,
        0, 1046,    0, 1035, 1046, 1041, 1035, 1047, 1039, 1042,
     1047, 1043, 1040, 1041, 1034, 1048, 1044, 1049, 1048,    0,
     1049, 1050, 1043, 1042, 1050, 1048,    0, 1044, 1051, 1045,

        0, 1051, 1053, 1052, 1046, 1053, 1052,    0, 1051, 1054,
     1047, 1052, 1054,    0, 1055,    0, 1049, 1055, 1048, 1081,
     1049, 1081, 1081, 1082, 1050, 1082, 1082, 1083,    0, 1083,
     1083, 1051,    0,    0,    0, 1053, 1052, 1086, 1053, 1086,
     1086, 1084, 1054, 1084, 1084, 1082,    0, 1055,    0, 1083,
     1055, 1084, 1081,    0,    0,    0, 1082,    0, 1054,    0,
     1083, 1085,    0, 1085, 1085, 1087,    0, 1087, 1087, 1088,
     1086, 1088, 1088,    0, 1084, 1087, 1085, 1089,    0, 1089,
     1089, 1090,    0, 1090, 1090, 1091,    0, 1091, 1091, 1092,
        0, 1092, 1092, 1093, 1085, 1093, 1093,    0, 1087,    0,

     1094,    0, 1088, 1094, 1098,    0, 1095, 1098, 1099, 1095,
     1089, 1099, 1089, 1096, 1090,    0, 1096, 1097, 1091, 1098,
     1097, 1100, 1092,    0, 1100,    0, 1093, 1097, 1095, 1101,
     1090, 1100, 1101, 1094, 1091, 1096,    0, 1098, 1092, 1095,
     1102, 1099, 1093, 1102, 1103, 1104, 1096, 1103, 1104, 1105,
     1097,    0, 1105, 1106, 1100, 1124, 1106, 1126, 1124, 1126,
     1126,    0, 1101,    0,    0,    0, 1127, 1126, 1127, 1127,
        0,    0,    0, 1102,    0, 1102,    0, 1103, 1104,    0,
        0, 1127, 1105,    0,    0, 1128, 1106, 1128, 1128, 1130,
     1126, 1130, 1130, 1103, 1104,    0,    0, 1139, 1105, 1127,

     1139,    0, 1106, 1129, 1124, 1129, 1129, 1131,    0, 1131,
     1131,    0, 1132, 1129, 1132, 1132,    0, 1133, 1128, 1133,
     1133, 1134, 1130, 1134, 1134, 1135,    0, 1135, 1135, 1136,
     1139, 1136, 1136,    0, 1137,    0, 1129, 1137, 1138, 1140,
     1131, 1138, 1140, 1131, 1137, 1132,    0,    0, 1141, 1140,
     1133, 1141, 1142, 1138, 1134, 1142, 1143, 1144, 1135, 1143,
     1144, 1132, 1136,    0,    0, 1145, 1133, 1137, 1145,    0,
     1146, 1138, 1140, 1146, 1135,    0, 1147,    0, 1136, 1147,
     1158, 1141, 1158, 1158, 1159, 1142, 1159, 1159, 1142, 1143,
     1144,    0,    0, 1160, 1159, 1160, 1160, 1161, 1145, 1161,

     1161, 1164,    0, 1146, 1164, 1143, 1144,    0, 1162, 1147,
     1162, 1162, 1163, 1158, 1163, 1163,    0, 1159, 1165, 1146,
     1166, 1165,    0, 1166, 1167, 1147, 1160, 1167, 1165, 1168,
     1161,    0, 1168, 1169, 1164, 1174, 1169, 1174, 1174, 1176,
     1161, 1162, 1176,    0, 1175, 1163, 1175, 1175,    0, 1177,
        0, 1165, 1177, 1166,    0,    0, 1189, 1167, 1180, 1189,
     1180, 1180, 1168,    0,    0,    0, 1169, 1167, 1174,    0,
     1181,    0, 1176, 1181,    0,    0,    0, 1175, 1184,    0,
     1184, 1184, 1177, 1185,    0,    0, 1185,    0, 1184, 1189,
     1175, 1180,    0, 1185,    0, 1177, 1188, 1180, 1188, 1188,

        0,    0,    0, 1181,    0,    0,    0,    0,    0, 1181,
        0, 1184,    0,    0,    0,    0, 1185,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1188,
     1191, 1191, 1191, 1191, 1191, 1191, 1192, 1192, 1192, 1192,
     1192, 1192, 1193, 1193, 1193, 1193, 1193, 1193, 1194, 1194,
     1194, 1194, 1194, 1194, 1195, 1195, 1195, 1195, 1195, 1195,
     1196, 1196,    0, 1196, 1196, 1196, 1197, 1197, 1197, 1197,
     1197, 1197, 1198,    0,    0,    0, 1198, 1198, 1199, 1199,
     1199, 1199, 1199, 1199, 1200, 1200,    0,    0, 1200, 1200,
     1201, 1201, 1201, 1201, 1201, 1201, 1202, 1202,    0, 1202,

     1202, 1202, 1203, 1203,    0, 1203, 1203, 1203, 1204, 1204,
        0,    0,    0, 1204, 1205, 1205,    0, 1205, 1205, 1205,
     1207, 1207,    0,    0,    0, 1207, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[86] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 
    0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 1, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
//
// Based loosely on NetHack's lev_comp.l

#include <algorithm>
#include <cstring>
#include <queue>
#include "AppHdr.h"
#include "mapdef.h"
#include "levcomp.tab.h"
#include "stuff.h"

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(100);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

// Enter a new state, first clearing yylval of junk.
#define CBEGIN(x) do { BEGIN(x); clean(); } while (0)

static void post_proc_text(char *text, bool trim_right, int strip_trailing)
{
    char *s = NULL;
    if (trim_right)
    {
        s = text + strlen(text) - 1;
        while (s >= text && isspace(*s))
            *s-- = 0;
    }
    if (strip_trailing)
    {
        if (!s)
            s = text + strlen(text) - 1;
        while (s >= text && --strip_trailing >= 0)
            *s-- = 0;
    }
}

static char *copy_text(bool trim_right, int strip_trailing)
{
    char *newstring = NULL;
    if ((yylval.text = newstring = strdup(yytext)))
    {
        alloced = true;
        post_proc_text(newstring, trim_right, strip_trailing);
    }
    return (newstring);
}

static void settext(bool trim_right = false, int strip_trailing = 0)
{
    clean();
    char *newstring = copy_text(trim_right, strip_trailing);
    yylval.text = newstring;
}

static void str_check()
{
    if (!yylval.text)
    {
        char *buf = (char *) malloc(1);
        if (buf)
        {
            yylval.text = buf;
            *buf = 0;
            alloced = true;
        }
    }
}

static void cattext(bool trim_right = false, int strip_trailing = 0)
{
    if (!yylval.text)
        settext(trim_right, strip_trailing);
    else
    {
        bool was_alloced = alloced;
        char *newbuf = (char*) malloc(strlen(yylval.text) + strlen(yytext) + 1);
        if (!newbuf)
            end(1, "Out of memory");
        alloced = true;
        strcpy(newbuf, yylval.text);
        strcat(newbuf, yytext);
        post_proc_text(newbuf, trim_right, strip_trailing);
        if (was_alloced)
            free((void*) yylval.text);
        yylval.text = newbuf;
    }
}








#line 1865 "levcomp.lex.cc"

#define INITIAL 0
#define MAPDEF 1
#define LUA 2
#define LUA_ONELINER 3
#define ARGUMENT 4
#define MNAME 5
#define KEYWORDS 6
#define ITEM_LIST 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 133 "levcomp.lpp"


#line 2060 "levcomp.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1191 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1190 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 135 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 137 "levcomp.lpp"
{
                        settext(true);
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 142 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 143 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 144 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 146 "levcomp.lpp"
;
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 148 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 149 "levcomp.lpp"
{
                            settext(true, 2);
                            BEGIN(INITIAL);
                            return LUA_LINE;
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 154 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 158 "levcomp.lpp"
;
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 160 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 164 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 166 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 171 "levcomp.lpp"
;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 172 "levcomp.lpp"
;
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 173 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 175 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 179 "levcomp.lpp"
;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 181 "levcomp.lpp"
{
                        cattext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 186 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 187 "levcomp.lpp"
;
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 188 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 190 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 192 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 196 "levcomp.lpp"
;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 198 "levcomp.lpp"
{
                        cattext();
                        return MONSTER_NAME;
                    }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 203 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 204 "levcomp.lpp"
;
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 206 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 210 "levcomp.lpp"
;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 212 "levcomp.lpp"
{
                        cattext();
                    }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 216 "levcomp.lpp"
cattext();
	YY_BREAK
case 33:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 218 "levcomp.lpp"
{ BEGIN(INITIAL); str_check(); return STRING; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 220 "levcomp.lpp"
;
	YY_BREAK
case 35:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 222 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 224 "levcomp.lpp"
{ BEGIN(LUA_ONELINER); return MAIN; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 226 "levcomp.lpp"
{ BEGIN(LUA); return PRELUDE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 227 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 228 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 229 "levcomp.lpp"
{ BEGIN(LUA); return VALIDATE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 230 "levcomp.lpp"
{ BEGIN(LUA); return VETO; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 231 "levcomp.lpp"
{ BEGIN(LUA); return EPILOGUE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 233 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 234 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEFAULT_DEPTH; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 235 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DESC; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 236 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEPTH; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 237 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return ORIENT; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 238 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 239 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return WELCOME; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 240 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 241 "levcomp.lpp"
return WEIGHT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 242 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 243 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 244 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLAGS; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 245 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return BFLAGS; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 246 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 247 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return NSUBST; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 248 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return COLOUR; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 249 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLOORCOL; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 250 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LROCKCOL; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 251 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLOORTILE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 252 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LROCKTILE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 253 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return FTILE; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 254 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return RTILE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 255 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return TILE; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 256 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return FHEIGHT; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 257 "levcomp.lpp"
{ CBEGIN(MNAME); return MONS; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 258 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 259 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return MARKER; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 260 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 262 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 263 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 264 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 265 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMASK; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 266 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KPROP; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 267 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return SUBVAULT; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 269 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 271 "levcomp.lpp"
return COLON;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 273 "levcomp.lpp"
return PERC;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 275 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 281 "levcomp.lpp"
;
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 282 "levcomp.lpp"
;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 283 "levcomp.lpp"
;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 284 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 286 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 2639 "levcomp.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MAPDEF):
case YY_STATE_EOF(LUA):
case YY_STATE_EOF(LUA_ONELINER):
case YY_STATE_EOF(ARGUMENT):
case YY_STATE_EOF(MNAME):
case YY_STATE_EOF(KEYWORDS):
case YY_STATE_EOF(ITEM_LIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1191 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1191 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1190);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 286 "levcomp.lpp"



int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}

