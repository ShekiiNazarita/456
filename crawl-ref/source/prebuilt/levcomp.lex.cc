#line 2 "levcomp.lex.cc"

#line 4 "levcomp.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 87
#define YY_END_OF_BUFFER 88
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1228] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   88,   86,   83,   84,
       85,   79,   86,   86,   77,   80,   86,   81,   78,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   83,   34,   36,   86,   86,
       86,   86,   86,   86,   86,   87,    6,   87,   87,    4,
        2,    3,   87,    2,    2,    2,    2,    9,   10,   87,
        9,    9,   87,   12,   87,   32,   83,   33,   85,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,

       32,   32,   32,   32,   83,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   86,   28,   23,   28,   79,   86,
       86,   27,   80,   86,   81,   78,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   28,   34,   36,   86,   86,   86,   86,
       86,   86,   86,   15,   16,   85,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   86,   13,   15,   13,   13,   13,
       13,   13,   13,   87,   21,   22,   87,   20,   87,   83,
       84,    0,   82,    0,   81,   81,   81,   81,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   83,   34,   36,    0,    0,
        0,    0,    0,   34,    0,    0,    0,    0,    0,    0,
        0,    0,   39,    6,    5,    0,    0,    2,    3,    2,
        0,    2,    2,    2,    2,    9,    9,   10,    9,    9,
        9,    0,   11,    0,   12,   31,    0,   31,   83,   33,
        0,    0,   33,   31,    0,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,    0,   30,
       31,   83,   31,   34,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   26,    0,   26,   28,   23,   28,
        0,   23,   26,    0,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,    0,   25,    0,
       26,   28,   26,   34,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   15,   16,    0,    0,    0,   16,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,    0,
       14,   13,   15,   13,   13,   13,   13,   13,   13,   13,
       13,   19,    0,   19,   21,   22,    0,    0,    0,    0,
       18,    0,   81,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        2,    9,    9,    9,    7,    0,    0,   29,    0,    0,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   34,   31,   31,   31,   31,   31,   31,   31,    0,
       24,    0,    0,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   34,   34,   26,   26,   26,   26,
       26,   26,   26,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        0,   17,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   35,    0,    0,    0,
        0,    0,    0,    2,    9,    8,    0,    9,    7,    0,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,    0,   31,    0,   31,   31,   31,   31,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,    0,   26,    0,   26,   26,   26,   26,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,    0,    0,    0,    0,   45,    0,
        0,    0,   68,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   67,   43,    0,    0,    0,    0,    0,    0,

        0,   53,   65,    0,    0,    0,    0,   38,    0,    0,
        0,    0,    2,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,    0,
       31,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,    0,   26,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,    0,    0,
        0,   46,    0,   52,   63,   71,   72,   74,   73,   75,
        0,    0,    0,    0,    0,    0,    0,   48,   64,    0,
       56,    0,    0,    0,    0,    0,    0,    0,   41,    1,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   55,   50,   58,    0,   54,    0,    0,    0,    0,
       69,   57,   47,    0,    0,   51,    0,    0,    0,    0,
        0,    1,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   66,    0,    0,    0,    0,   70,
        0,   49,    0,    0,    0,    0,    0,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,    0,   31,   31,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
        0,   26,   26,   13,   13,   13,   13,   13,   13,   13,
       13,    0,    0,   60,    0,   76,    0,    0,    0,   37,
        0,    0,   31,   31,   31,   31,   31,   31,    0,   31,
       31,    0,   31,   26,   26,   26,   26,   26,   26,    0,
       26,   26,    0,   26,   13,   13,   13,   13,   59,    0,
       62,    0,   42,   40,   31,   31,   31,   31,   31,   31,

       26,   26,   26,   26,   26,   26,   13,   13,   61,    0,
       31,   31,   26,   26,   13,    0,   31,   26,   13,    0,
       31,   26,   13,   44,   31,   26,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    1,    7,    1,    1,    8,
        9,    1,   10,   11,   12,   13,    1,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    1,    1,
        1,    1,    1,    1,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       25,   32,   33,   34,   35,   36,   37,   25,   25,   25,
        1,   38,    1,    1,   25,    1,   39,   25,   25,   40,

       41,   42,   43,   44,   45,   25,   25,   46,   25,   25,
       47,   48,   25,   49,   50,   51,   52,   53,   25,   25,
       25,   25,   54,    1,   55,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[56] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    1,    1,
        5,    6,    6,    6,    1,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    1,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1248] =
    {   0,
        0,   54,   58,   68,   62,   64,   54,   72,  119,  173,
      227,  281,  335,  389,   75,  178, 3631, 4132,   79, 4132,
     3612, 4132, 3605,   76, 4132,   78, 3590,   80, 4132, 3581,
       73, 3578,   82, 3557,  163,   66,   67,  160, 3555, 3559,
     3547,   76,  161, 3556, 3525,  442,    0, 4132,   85, 3516,
     3508, 3498,  158,  151, 3492, 4132, 4132, 3540,  192, 4132,
        0, 4132, 3538,  200,    0, 3503,  264, 3476, 4132, 3518,
      156, 3465,  195, 4132, 3516,  286,  290, 4132,  295,  394,
      398,  407,  411,  420,  424,  451,  464,  470,  474,  480,
      501,  509,  517,  521,  528,  547,  532,  552,  563,  569,

      579,  573,  584,  594,  610,  604,  614,  621,  625,  629,
      634,  641,  651,  656,  403,  673, 4132,  682,  449,  691,
      693, 4132,  699,  703,  713,  567,  619,  717,  642,  719,
      728,  743,  747,  754,  756,  758,  771,  773,  778,  786,
      795,  801,  812,  816,  821,  825,  826,  832,  833,  838,
      839,  843,  850,  870, 4132,  888,  196,  199, 3501,  194,
      288,  204,  289,   72,  439,  294,  290,  292,  272,  379,
      276,  458,  485,  205,  892,  405,  896,  464,  479,  388,
      401,  675,  658,  864,  907, 4132,  911, 4132,  915,  505,
     4132, 3494, 4132, 3483,  502, 3479, 3476,  547, 3458, 3463,

     3448,  189, 3447, 3449, 3440, 3439, 3436, 3416,  443, 3405,
     3409, 3405, 3397, 3393, 3392, 3377, 3384, 3389, 3376, 3364,
     3377, 3367, 3360,  493, 3341,    0,    0, 4132, 3324, 3316,
     3312,  278, 3295,    0,  618, 3298, 3298, 3292, 3309,  369,
     3278, 3265, 4132, 4132, 4132, 3311,  661,    0, 4132,    0,
     3293,  731, 3268, 3256,  373, 3228, 3226, 4132,  659, 3214,
      919,  735, 4132, 3263, 4132,  901,  923,  927,  933, 4132,
      938,  952, 4132,  942,  958,  964,  979,  973,  987,  993,
     1001, 1008, 1014, 1022, 1028, 1032, 1038, 1043, 1049, 1070,
     1075, 1080, 1087, 1092, 1096, 1102, 1107, 1117, 1124, 1131,

     1139, 1145, 1149, 1154, 1163, 1174, 1170, 1180, 1211, 4132,
     1186,    0, 1198, 1215, 1227, 1235, 1239, 1221, 1250, 1259,
     1243, 1274, 1278, 1285, 1018, 1100, 1296, 1300, 4132, 1304,
     1322, 4132, 1308, 1326, 1155, 1345, 1331, 1338, 1339, 1353,
     1357, 1355, 1363, 1361, 1373, 1382, 1384, 1392, 1403, 1405,
     1204, 1410, 1412, 1419, 1426, 1427, 1431, 1433, 1432, 1449,
     1437, 1450, 1461, 1474, 1475, 1476, 1480, 1490, 4132, 1506,
     1481,    0, 1520, 1525, 1530, 1515, 1500, 1535, 1537, 1546,
     1552, 1547, 1554, 1559, 1584, 4132, 1596, 1567, 1577, 4132,
     3251,  730,  773,  549,  578,  641,  569,  703,  833,  308,

      809,  838,  397,  849,  518,  834,  300,  737,  764,  855,
      719,  516,  844,  935,  937,  657,  786,  966, 1037, 1604,
     4132,  865,    0,  977, 1022,  960,  945, 1055, 1065,  939,
      448, 1589, 1608, 1614, 1621, 4132, 1626, 1633, 1637, 1645,
     4132, 1651, 3242, 3223, 3207, 3193, 3187, 3194, 3179, 3175,
     3160, 3152, 3160, 3143, 3129, 3132, 3122,  998, 3130, 3116,
     3104, 3110, 3109, 3100, 3101, 3086, 3088, 1050, 3069, 3079,
     3075, 3077, 3051, 1658, 3042, 1267, 3041, 3052, 3036, 3019,
     3033, 1663, 1667, 1674, 4132, 1682, 1686, 4132, 1690, 1694,
     1700, 1704, 1708, 1721, 1726, 1731, 1739, 1743, 1748, 1752,

     1766, 1774, 1783, 1791, 1787, 1797, 1801, 1805, 1828, 1832,
     1836, 1840, 1844, 1852, 1863, 1867, 1871, 1887, 1891, 1881,
     1906, 1912, 1918, 1922, 1926, 1931, 1935, 1944, 1949, 1981,
     4132, 1988, 1995, 1809, 1936, 1965, 2000, 1973, 2007, 1957,
     2012, 2008, 2013, 2021, 2019, 2027, 2026, 2038, 2042, 2051,
     2047, 2061, 2072, 2065, 2073, 2079, 2081, 2085, 2093, 2099,
     2100, 2111, 2107, 2113, 2137, 2151, 2155, 1813, 2125, 2142,
     2159, 2160, 2164, 1182, 1135,  752,  607, 1031, 1075, 1272,
     1208, 1103, 1279, 1049, 1237, 1157,  782, 1302, 1124, 1168,
     1348, 1107, 1245, 1214, 1192, 1400, 1301, 1607, 1359, 1360,

     1317, 1233, 1406, 2168, 1372, 2172, 1455,  597, 1445,  957,
     2204, 4132, 2210, 3032, 3032, 3014, 3020, 3023, 3006, 2985,
     2992, 2996, 2972, 2977, 2975, 2961, 2958, 2962, 2947, 2934,
     2932, 2933, 2928, 2902, 2902, 2908, 2907, 2898, 2870, 2887,
     2884, 2883, 2870, 2858, 2831, 2214, 4132, 2832, 2141, 2821,
     2819, 2826, 2181, 2832, 2218, 4132, 2225, 2229, 4132, 2234,
     2239, 2244, 2248, 2187, 2252, 2266, 2261, 2276, 2270, 2287,
     2296, 2301, 2305, 2311, 2315, 2324, 2331, 2343, 2356, 2362,
     2368, 2374, 2378, 2382, 2386, 2391, 2406, 2413, 2428, 2432,
     2437, 2443, 2454, 2458, 2448, 2469, 2474, 2478, 2483, 2489,

     2459, 2086, 2274, 2498, 2512, 2520, 2354, 2504, 2526, 2527,
     2463, 2528, 2536, 2541, 2542, 2543, 2557, 2568, 2573, 2549,
     2547, 2566, 2587, 2588, 2589, 2594, 2598, 2600, 2596, 2612,
     2616, 2626, 2635, 2639, 2641, 2646, 2647, 2651, 1476, 1385,
     1198, 1273, 1434, 1493, 1563, 1530, 1552, 1487, 1645, 1383,
     1570, 1243, 1582, 1547, 1619, 1601, 1667, 1702, 1668, 1361,
     1631, 1687, 1698, 1599, 1742, 1759, 1785, 1449, 1644, 1503,
     1714, 1721, 1726, 2653, 2811, 2819, 2806, 2817, 4132, 2786,
     2784, 2779, 4132, 2756, 2741, 2736, 2723, 2718, 2695, 2695,
     1749, 2690, 4132, 4132, 2677, 2676, 2685, 2656, 2638, 2646,

     2610, 4132, 4132, 2605, 2607, 2578, 2573, 4132, 2572, 2569,
     2350, 2543, 2553, 2658, 2670, 2665, 2697, 2676, 2711, 2715,
     2721, 2727, 2735, 2739, 2743, 2759, 2764, 2778, 2782, 2787,
     2791, 2796, 2802, 2808, 2813, 2822, 2826, 2831, 2848, 2852,
     2857, 2863, 2868, 2872, 2876, 2880, 2887, 2892, 2903, 2907,
     2911, 2719, 2765, 2817, 2919, 2704, 2915, 2924, 2931, 2770,
     2935, 2949, 2953, 2961, 2965, 2969, 2954, 2970, 2977, 2976,
     2988, 2993, 2995, 3008, 3015, 3014, 3019, 3020, 3030, 3034,
     3035, 3042, 3040, 3046, 3054, 3058, 3062, 3069, 3074, 1795,
     1867, 1708, 1809, 1875, 1919, 1942, 1948, 2007, 2121, 2163,

     2169, 1864, 1995, 2401, 2029, 1868, 1945, 2181, 2186, 1837,
     2232, 1531, 2066, 1988, 1930,  951, 2211, 2023, 2542, 2541,
     2525, 4132, 2505, 4132, 4132, 4132, 4132, 4132, 4132, 4132,
     2478, 1954, 2460, 2448, 2394, 2390, 2370, 4132, 4132, 2345,
     4132, 2314, 2325, 2311, 2271, 2188, 2159, 2136, 4132, 2163,
     3089, 3101, 3106, 3113, 3120, 3127, 3131, 3136, 3141, 3145,
     3151, 3155, 3162, 3168, 3180, 3190, 3186, 3194, 3211, 3203,
     3215, 3225, 3229, 3233, 3242, 3238, 3246, 3250, 3257, 3268,
     3273, 3166, 3277, 3284, 3173, 3289, 3263, 3288, 3298, 3302,
     3303, 3307, 3308, 3315, 3316, 3326, 3327, 3333, 3337, 3342,

     3353, 3357, 3358, 3364, 3365, 3371, 3377, 3372, 3379, 3383,
     3388, 3396, 2245, 2280, 2317, 2094, 2331, 2486, 2041, 1244,
     2384, 2408, 2425, 2298, 2242, 2495, 2355, 2251, 1842, 1016,
     2338, 4132, 4132, 4132, 2107, 4132, 2066, 2024, 1944, 1938,
     4132, 4132, 4132, 1932, 1908, 4132, 1903, 1900, 1865, 2444,
     1822, 1853, 3402, 3409, 3414, 3423, 3428, 3439, 3444, 3449,
     3453, 3458, 3468, 3479, 3484, 3490, 3496, 3500, 3506, 3521,
     3525, 3531, 3440, 3469, 3507, 3535, 3511, 3537, 3546, 3550,
     3551, 3552, 3556, 3563, 3578, 3569, 3580, 3590, 3594, 3595,
     3606, 3607, 2607, 2137, 2511, 2400, 2620, 2644, 2101, 2673,

     2191, 1158, 3608, 2246, 4132, 1799, 1757, 1701, 1591, 4132,
     1511, 4132, 1444, 2942, 3060, 1257, 3080, 3615, 3620, 3625,
     3635, 3652, 3662, 3666, 3672, 3678, 3682, 3687, 3691, 3697,
     3621, 3692, 3701, 3673, 3641, 3710, 3712, 3719, 3721, 3729,
     3735, 3741, 3742, 2691, 2733, 2679, 2663, 2763, 2310, 3747,
     3751, 1207, 1090, 4132,  918, 4132,  845, 3220,  782, 4132,
     3753,  674, 3761, 3766, 3770, 3783, 3788, 3798, 3807, 3811,
     3815, 3820, 3825, 3776, 3826, 3830, 3832, 3838, 3839, 3846,
     3850, 3852, 3854, 3864, 2775, 2742, 2830, 2413, 4132,  667,
     4132,  498, 4132, 4132, 3881, 3891, 3905, 3909, 3918, 3922,

     3892, 3910, 3896, 3926, 3930, 3931, 2970, 1749, 4132,  435,
     3935, 3940, 3944, 3948, 2418,  383, 3950, 3957, 2471,  185,
     3975, 3970, 3062, 4132, 3979, 3965, 4132, 4017, 4023, 4029,
     4035, 4041, 4047, 4053, 4059, 4065, 4071, 4077, 4083, 4089,
     4095, 4101, 4107, 4113, 4119,  104, 4125
    } ;

static yyconst flex_int16_t yy_def[1248] =
    {   0,
     1227,    1, 1228, 1229, 1230, 1230, 1231, 1231, 1227,    9,
     1227,   11, 1227,   13, 1232, 1232, 1227, 1227, 1227, 1227,
     1227, 1227, 1233, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1234, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1235, 1227,
     1236, 1227, 1227, 1237, 1236, 1236, 1236, 1238, 1227, 1227,
     1238, 1238, 1239, 1227, 1227, 1240, 1227, 1227, 1227, 1240,
     1241, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,

     1240, 1240, 1240, 1240,   46, 1242, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1243, 1227, 1227, 1227, 1243, 1244,
     1243, 1227, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243,   46, 1245, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1227, 1227, 1227, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1227, 1246,   46, 1246, 1246, 1246,
     1246, 1246, 1246, 1247, 1227, 1227, 1227, 1227, 1247, 1227,
     1227, 1233, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,

     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227,   46, 1234, 1227, 1227, 1227,
     1227, 1227, 1227, 1234, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1236, 1227, 1236,
     1227, 1236, 1236, 1236, 1236, 1238, 1238, 1227, 1238, 1238,
     1238, 1239, 1227, 1227, 1227, 1240, 1240, 1240, 1227, 1227,
     1227, 1227, 1227, 1241, 1241, 1240, 1241, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,

     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1227,
     1240,  105, 1242, 1242, 1242, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1243, 1243, 1243, 1227, 1227, 1227,
     1227, 1227, 1244, 1244, 1243, 1244, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1227, 1227,
     1243,  144, 1245, 1245, 1245, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1227, 1227, 1227, 1227, 1227, 1227,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,

     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1227,
     1227, 1246,  177, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1247, 1247, 1247, 1227, 1227, 1227, 1227, 1227, 1247,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1236, 1238, 1238, 1238, 1227, 1227, 1240, 1227, 1227, 1241,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,

     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1242, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1243,
     1227, 1227, 1244, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1245, 1234, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,

     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1247, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1236, 1238, 1227, 1227, 1238, 1227, 1227,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1243,

     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,

     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1236, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,

     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1236,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,

     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1236, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,

     1246, 1246, 1246, 1246, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1246, 1246, 1246, 1246, 1227, 1227,
     1227, 1227, 1227, 1227, 1240, 1240, 1240, 1240, 1240, 1240,

     1243, 1243, 1243, 1243, 1243, 1243, 1246, 1246, 1227, 1227,
     1240, 1240, 1243, 1243, 1246, 1227, 1240, 1243, 1246, 1227,
     1240, 1243, 1246, 1227, 1240, 1243,    0, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227
    } ;

static yyconst flex_int16_t yy_nxt[4188] =
    {   0,
       18,   19,   20,   21,   19,   18,   22,   23,   18,   24,
       25,   26,   27,   28,   29,   18,   30,   31,   32,   18,
       33,   18,   18,   34,   18,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   18,   18,   44,   18,   18,   45,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   46,   74,   75,   46,   47,
       57,   58,   59,   60,   69,   70,   69,   70,   48,   56,
       62,   63,   64,   65,   74,   75,  185,  186,  187,  185,
      190,   49,  213,  190, 1227,  188,  211,   66,  194,  195,
      194,  195,  197,  198,   50,  200,  214,  212,  220,   51,

      235,   52,  201,   53,  203,  401,   54,   55,  204,  391,
      221,   71,  189,   71,  214,  205,   72,   67,   72,   76,
       77,   78,   79,   77,   76,   80,   81,   76,   82,   83,
       84,   85,   86,   87,   76,   88,   89,   90,   76,   91,
       76,   76,   92,   76,   93,   94,   95,   96,   97,   98,
       99,  100,  101,   76,   76,  102,  103,   76,  104,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,  105,  215,  222,  105,  106,  185,
      186,  187,  185,  207,  223,  239,  208,  107,  188,  241,
      209,  242,  216,  210,  244,  246,  247,  263,  264, 1224,

      108,  245,  249,  251,  252,  259, 1227,  240,  194,  392,
      260,  197,  393,  109,  394,  189, 1227, 1227,  110,  447,
      111,  448,  112,  397,  419,  113,  114,  115,  116,  117,
      118,  116,  115,  119,  120,  115,  121,  122,  123,  124,
      125,  126,  115,  127,  128,  129,  115,  130,  115,  115,
      131,  115,  132,  133,  134,  135,  136,  137,  138,  139,
      140,  115,  115,  141,  142,  115,  143,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  144,  254, 1227,  144,  145,  267, 1227,  267,
      267,  269,  270,  271,  269,  146,  271,  273,  271,  271,

     1227, 1227, 1227,  412, 1227,  408, 1227,  410,  147,  414,
      395,  398, 1227,  255,  406,  399,  241,  396,  242,  409,
     1227,  148,  400,  268,  411,  407,  149,  272,  150,  589,
      151,  581,  272,  152,  153,   18,  154,  155,  156,  154,
       18,   22,   23,   18,   24,   25,  157,   27,  158,   29,
      159,  160,  161,  162,  159,  163,  159,  159,  164,  159,
      165,  166,  167,  168,  169,  170,  171,  172,  173,  159,
      159,  174,  175,  159,  176,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,   18,   18,
      177, 1227,  254,  177,   47,  267,  239,  267,  267,  275,

     1227,  267,  275,   48,  326,  413,  276,  326,  267, 1227,
      267,  267,  267, 1227,  267,  267,  178, 1227,  240,  278,
      279,  267,  255,  267,  267,  267, 1220,  267,  267,  179,
      584,  268,  278,  279,  180,  277,  181,  280,  182,  426,
      327,  183,   55,  226,  268,  422,  226,  227,  268,  427,
      326, 1227,  267,  326,  267,  267,  228,  268,  455,  402,
     1227,  268,  403,  281,  282,  267,  404,  267,  267,  405,
     1227,  267,  456,  267,  267,  267, 1227,  267,  267,  424,
      415,  267,  229,  267,  267, 1216,  327,  230,  268,  231,
      283, 1227,  416,  409,  232,  233,  284, 1227,  610,  286,

      417,  268,  267,  285,  267,  267,  190,  268,  418,  190,
      267,  268,  267,  267,  197,  198,  471,  268,  267,  472,
      267,  267,  267,  287,  267,  267,  425,  288, 1227,  267,
     1227,  267,  267,  267,  289,  267,  267,  291,  268,  594,
      292,  295,  290,  297,  293, 1210,  268,  294,  267,  587,
      267,  267,  296,  267,  268,  267,  267,  298,  268,  197,
      198, 1227,  299,  301,  267,  268,  267,  267,  326,  268,
      267,  326,  267,  267,  267,  574,  267,  267,  302,  300,
      267, 1227,  267,  267,  268,  309,  310,  309,  309,  268,
     1227,  304,  308,  575,  306,  267,  303,  267,  267,  577,

      268,  578,  307,  305,  327,  314,  268,  314,  314, 1227,
      268,  312,  270,  271,  312,  267,  268,  267,  267, 1227,
      326,  268,  267,  326,  267,  267,  267,  604,  267,  267,
      267,  268,  267,  267,  311,  267,  316,  267,  267,  342,
      742,  315,  267,  326,  267,  267,  326,  272,  474,  460,
      298,  268,  267, 1227,  267,  267,  327,  267,  268,  267,
      267,  345,  268,  244,  246,  247,  268,  576,  320, 1227,
     1227,  268,  317,  598,  328,  329,  330,  328,  268,  327,
      318, 1209,  319,  330,  332,  330,  330, 1227,  268,  322,
      321,  323,  334,  268,  326,  334,  430,  326,  431,  335,

      326,  192,  428,  326,  326,  337,  338,  326,  259,  324,
      331,  337,  338,  260,  326, 1227,  339,  326,  326,  331,
      326,  326,  579,  326,  429,  340,  341, 1194,  336,  326,
      327, 1227,  326,  249,  251,  252,  327,  263,  264,  343,
      327,  346,  197,  393,  326,  347,  344,  326,  326, 1227,
      327,  326,  348,  593,  327,  326,  327,  326,  326,  326,
      326,  349,  326,  350, 1227,  327,  351,  354,  590,  356,
      352,  358,  326,  353,  326,  326, 1227,  326,  355,  326,
      327,  741,  326,  357,  327,  197,  393,  326,  359,  360,
      326,  327,  591,  327, 1227,  327,  326,  361, 1227,  326,

      363,  365,  368,  369,  370,  368,  362,  599,  327,  366,
      327,  752,  364,  326,  367,  327,  326,  372,  329,  330,
      372, 1227,  374,  327,  234,  374,  326,  326,  582,  326,
      326,  234,  327,  326,  326, 1193,  326,  326,  327,  326,
      326,  376,  326,  326,  326, 1227, 1227,  326,  580,  327,
     1227,  326,  371,  331,  326,  357, 1227,  583,  375,  595,
      588, 1227,  327,  327,  585,  433,  380, 1227,  433,  327,
      327,  385,  386,  387,  385,  327,  327, 1227,  586,  377,
      327,  382,  592,  383,  378, 1192,  379,  327,  381,  389,
      390,  389,  389,  420,  421,  420,  420,  423,  386,  387,

      423,  434,  267,  384,  267,  267,  603,  388,  435,  436,
      437,  435,  439,  436,  439,  439,  440,  441,  442,  440,
      484,  485,  486,  484,  267,  388,  267,  267,  487,  488,
      487,  487, 1191,  388,  269,  270,  271,  269,  268,  271,
      270,  271,  271,  275,  438,  267,  275, 1227,  438, 1227,
      276, 1227,  434,  489,  310,  489,  489, 1227,  596,  275,
      268,  267,  275, 1227,  268,  267,  276,  267,  267, 1227,
      272,  597, 1227,  482,  267,  272,  267,  267, 1227,  277,
      490,  488,  487,  490,  609,  607,  280,  276,  267, 1227,
      267,  267,  600, 1029,  267,  277,  267,  267,  606,  281,

      282,  268,  267,  774,  267,  267,  280,  604,  590,  267,
      268,  267,  267,  628,  491,  267,  277,  267,  267,  326,
      281,  282,  326,  267,  268,  267,  267,  629, 1227,  267,
      268,  267,  267,  267, 1227,  267,  267,  493,  268,  267,
      492,  267,  267, 1227,  267,  268,  267,  267,  743, 1227,
      267,  268,  267,  267,  494,  327, 1103,  497,  498,  268,
      601, 1227,  495,  602,  496,  268,  605, 1227,  749,  268,
      608,  267,  499,  267,  267,  268,  267, 1227,  267,  267,
      268,  267,  639,  267,  267,  640,  268, 1227,  267,  500,
      267,  267,  428,  267,  501,  267,  267,  267,  744,  267,

      267,  326,  503,  267,  326,  267,  267,  268,  267, 1190,
      267,  267,  268,  502,  429, 1227,  504,  268,  267, 1227,
      267,  267,  506,  505,  268,  267,  758,  267,  267,  268,
      747,  507,  267,  268,  267,  267, 1227,  327,  508,  268,
      267,  755,  267,  267,  268,  509,  267, 1227,  267,  267,
      267,  510,  267,  267,  268,  267,  326,  267,  267,  326,
      513,  268,  512,  740,  267,  511,  267,  267,  268, 1227,
     1227,  267,  514,  267,  267,  267,  268,  267,  267,  516,
     1227,  267,  268,  267,  267,  751,  268,  267,  515,  267,
      267,  268,  327,  756, 1227,  517,  518,  739, 1150,  314,

      268,  314,  314,  519, 1227,  326,  520,  268,  326,  761,
     1227,  268,  309,  310,  309,  309,  314,  268,  314,  314,
     1227, 1189,  267,  268,  267,  267, 1227,  521,  522,  488,
      522,  522,  892,  760,  746,  315,  267,  545,  267,  267,
      267,  327,  267,  267,  267, 1227,  267,  267,  268, 1227,
      769,  267,  315,  267,  267, 1227, 1227, 1227,  268,  525,
      267,  759,  267,  267,  315,  523,  508, 1097,  649,  750,
      320,  649,  268,  901,  527,  267,  268,  267,  267,  267,
      268,  267,  267,  524, 1227, 1227,  267,  268,  267,  267,
      526, 1227,  321,  745,  748,  893,  268,  530,  531,  532,

      530,  328,  329,  330,  328,  330,  329,  330,  330,  334,
     1160,  268,  334, 1227, 1227,  268,  335,  753,  192,  528,
      650,  763,  268,  370,  369,  370,  370,  334,  529, 1227,
      334,  754,  326,  327,  335,  326,  192,  331,  768,  326,
      326,  331,  326,  326,  339,  336,  533,  531,  532,  533,
      340,  341,  339,  335,  326,  192,  326,  326,  326,  326,
     1227,  326,  326,  336,  326,  326,  534,  326,  327,  340,
      341, 1227, 1227, 1227,  326,  327,  327,  326,  536,  767,
      757,  535,  336,  326, 1227,  326,  326,  537,  326,  907,
      327,  766,  327,  326,  327, 1227,  326, 1227,  327,  541,

      327,  540,  891,  538,  326,  539,  326,  326,  899,  326,
      327,  326, 1227,  326,  326,  542,  326,  771, 1227,  327,
      326,  327,  543,  326,  544,  546,  762,  326,  326,  327,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  547,
      327,  326,  327,  548,  770,  549, 1227,  327,  779,  327,
      326,  326,  556,  326,  326,  550,  327, 1227,  551,  552,
      553, 1227,  326,  327,  327,  326,  554, 1227,  327,  327,
      327,  913,  555,  557,  327,  326,  326,  326,  326,  326,
      326,  326,  326, 1157,  326,  326,  327,  327, 1227,  773,
      559,  368,  369,  370,  368,  558,  560,  890,  327, 1227,

      772,  326,  561,  562,  326, 1227,  563,  370,  369,  370,
      370,  327,  327,  327,  894, 1227,  326,  327,  327,  326,
      897,  374,  564,  234,  374, 1156,  374,  327,  234,  374,
      234,  565,  531,  566,  565,  234,  326,  327,  326,  326,
      234,  326, 1227, 1227,  568,  567,  551,  326,  326,  896,
      326,  326,  327,  326,  915,  326,  326,  375,  326, 1227,
      326,  571,  375,  326, 1227, 1025,  783,  375,  420,  421,
      420,  420,  327,  569,  327, 1227,  903,  570,  389,  380,
      389,  389, 1227,  327,  327,  385,  386,  387,  385,  327,
      433,  327,  572,  433, 1227,  895,  327,  389,  386,  389,

      389,  381,  900,  902,  573,  420,  421,  420,  420,  433,
     1155, 1227,  433, 1227,  388,  611,  612,  613,  611, 1227,
      905,  388,  435,  436,  437,  435,  434,  439,  436,  439,
      439, 1227,  911,  388,  442,  441,  442,  442,  439,  764,
      439,  439,  765, 1227,  904,  434,  440,  441,  442,  440,
      908,  434,  442,  441,  442,  442, 1227, 1227,  438,  646,
      647,  646,  646,  438,  655,  656,  657,  655,  658,  659,
      660,  658,  898,  914,  438,  484,  485,  486,  484, 1227,
     1227,  793,  434,  486,  485,  486,  486,  487,  488,  487,
      487,  489,  310,  489,  489,  490,  488,  487,  490, 1227,

      906,  267,  276,  267,  267,  267,  909,  267,  267,  267,
     1227,  267,  267,  491, 1227, 1154,  794,  482,  910,  661,
     1227,  482,  267,  268,  267,  267, 1227,  267,  257,  267,
      267,  277,  267, 1227,  267,  267,  662,  268, 1227, 1015,
      267,  268,  267,  267,  267,  268,  267,  267,  665,  267,
      663,  267,  267,  267, 1227,  267,  267,  912,  268,  664,
      916, 1227,  666,  268,  667,  918,  933,  267,  268,  267,
      267, 1227,  917,  802,  668,  267,  268,  267,  267,  669,
      268,  670,  934, 1153,  267,  268,  267,  267,  267,  268,
      267,  267,  267,  671,  267,  267, 1215, 1227,  267,  803,

      267,  267,  267,  268,  267,  267,  267, 1227,  267,  267,
      326,  268,  675,  326,  326,  672,  674,  326,  677,  673,
      268, 1227,  534,  922,  268, 1152,  676, 1013,  268,  267,
      678,  267,  267,  267,  268,  267,  267,  267,  268,  267,
      267,  267,  268,  267,  267,  267,  327,  267,  267, 1227,
      327,  680,  681,  267, 1227,  267,  267, 1052,  733,  682,
      679,  683, 1117, 1024,  267,  268,  267,  267,  267,  268,
      267,  267,  267,  268,  267,  267, 1227,  268,  684, 1227,
     1227,  268,  267,  685,  267,  267, 1014, 1227,  267,  268,
      267,  267,  267, 1102,  267,  267, 1017, 1016,  691,  686,

      268, 1022,  687,  688,  268, 1114,  689,  267,  268,  267,
      267, 1113,  690,  522,  488,  522,  522, 1112,  268,  693,
      647,  693,  693,  267,  268,  267,  267,  695,  268,  267,
      695, 1227,  267,  924,  267,  267,  267,  326,  267,  267,
      326, 1111, 1227,  268,  692,  267, 1110,  267,  267,  315,
      267,  700,  267,  267, 1227,  268,  925, 1227,  326,  268,
     1227,  326,  926,  268, 1109,  523,  326,  694,  268,  326,
     1108, 1037,  268,  327,  326, 1028,  697,  326, 1023,  696,
      705,  268,  530,  531,  532,  530,  268, 1038,  698,  532,
      531,  532,  532,  701,  327,  699,  533,  531,  532,  533,

     1227,  326,  327,  335,  326,  192,  703, 1227,  326,  326,
      327,  326,  326,  326,  326, 1027,  326,  326,  327, 1227,
      326,  927,  326,  326,  704,  326, 1018,  326,  326,  702,
      326,  326,  336,  706,  707, 1227,  709,  327,  710,  326,
      708, 1227,  326,  326,  327,  327,  326, 1107,  326,  327,
      327,  326,  326, 1227,  712,  326,  327,  714,  327,  711,
     1021, 1031,  326,  327,  327,  326,  326,  713,  716,  326,
     1096,  715,  717,  326,  326,  327,  326,  326, 1227,  327,
      326,  720,  326,  326,  327,  326,  326,  326,  327,  326,
      326,  719,  721,  718,  326, 1106,  722,  326,  327, 1026,

      326,  326,  327,  326,  326,  724, 1227,  723,  326,  327,
      327,  326,  326, 1227,  326,  326,  327,  326,  327,  728,
      854, 1105,  327,  327,  730,  725,  734, 1093,  726,  734,
      327,  727,  729, 1227, 1148,  928,  327,  327,  565,  531,
      566,  565,  649,  326,  327,  649,  326,  234,  327, 1227,
      327,  731,  566,  531,  566,  566,  732,  647,  646,  732,
      326,  326,  327,  326,  326,  326, 1144, 1052,  326,  646,
      647,  646,  646,  649,  375, 1227,  649,  929,  735,  327,
     1227, 1227,  811,  930, 1227,  811, 1051,  736,  267,  567,
      267,  267,  327, 1227,  650,  938,  327,  327, 1227, 1050,

      939,  327, 1149, 1227,  737,  611,  612,  613,  611,  817,
      738,  613,  612,  613,  613,  646,  647,  646,  646,  655,
      656,  657,  655, 1227,  268,  650,  657,  656,  657,  657,
      658,  659,  660,  658,  812,  660,  659,  660,  660, 1049,
      267,  434,  267,  267, 1227,  267,  941,  267,  267,  267,
     1030,  267,  267,  267, 1227,  267,  267, 1227, 1227, 1032,
      814,  815,  267, 1227,  267,  267,  818,  267, 1099,  267,
      267,  267,  257,  267,  267,  326,  268,  267,  326,  267,
      267,  268,  816,  257,  822,  268, 1151,  819,  267,  268,
      267,  267, 1227,  820, 1033,  821,  855,  267,  268,  267,

      267, 1101,  267,  268,  267,  267,  267,  268,  267,  267,
     1227,  327,  267,  268,  267,  267,  267, 1098,  267,  267,
      823, 1048, 1227,  824,  268,  267,  825,  267,  267, 1227,
     1047, 1034,  267,  268,  267,  267,  828,  826,  268, 1046,
     1045,  827,  268, 1227,  267, 1036,  267,  267,  268, 1188,
     1227,  811,  268,  829,  811,  326,  830,  267,  326,  267,
      267,  268,  831,  267, 1044,  267,  267, 1227,  268,  267,
      832,  267,  267,  859, 1100,  267,  833,  267,  267,  267,
      268,  267,  267,  267, 1043,  267,  267,  267, 1104,  267,
      267,  327,  267,  268,  267,  267, 1227,  836, 1041,  268,

      834,  837,  835,  812, 1042,  268,  838,  267, 1041,  267,
      267,  268, 1227, 1227,  267,  268,  267,  267, 1019,  268,
     1227,  840, 1042,  268,  839, 1227, 1146,  841,  268,  267,
     1227,  267,  267,  267, 1020,  267,  267, 1227,  267, 1043,
      267,  267,  842,  268,  267, 1115,  267,  267, 1115,  695,
      268,  267,  695, 1208,  843,  693,  647,  693,  693,  267,
      326,  267,  267,  326,  326,  268,  844,  326, 1219,  268,
      267, 1040,  267,  267,  268,  267,  853,  267,  267,  267,
      268,  267,  267, 1227,  850,  268,  267,  850,  863, 1039,
      326,  268, 1036,  326,  845,  268,  327, 1116, 1227,  326,

      327,  696,  326, 1094,  846,  326,  268, 1227,  326, 1046,
      852,  268,  856,  326, 1223,  268,  326,  849,  860, 1095,
      268,  326,  847, 1227,  326,  848,  327,  326,  326,  326,
      326,  326,  326,  857, 1145,  327,  851,  326, 1035, 1034,
      326,  327,  326,  326,  326,  326,  326,  326,  326,  327,
      326,  326,  858,  326,  862, 1033, 1032,  327,  326,  861,
      864,  326,  866,  327,  327,  327,  865,  326,  868,  326,
      326,  867,  326,  327,  326,  873,  869,  326,  327,  327,
      327,  872,  870,  950,  327,  874,  327,  871,  326,  326,
      326,  326,  326,  326,  327,  326,  949,  326,  326,  326,

      326,  326,  326,  327,  326,  327,  875,  948,  876,  878,
      327,  947,  879,  326,  880,  946,  326,  326,  881, 1227,
      326, 1105,  877,  945,  327,  327,  327,  732,  647,  646,
      732,  327, 1227,  327,  944,  327,  326,  327,  943,  326,
      734,  882,  326,  734,  942,  326, 1147,  326,  326,  327,
      326,  326,  888,  327,  811,  888, 1227,  811, 1110,  267,
      941,  267,  267,  327,  940, 1227,  267,  883,  267,  267,
      939,  267,  327,  267,  267, 1227,  327,  267,  327,  267,
      267,  884, 1187,  327,  327, 1227,  887, 1112,  327,  952,
      951, 1227,  735, 1154,  885,  268,  953,  886,  267,  938,

      267,  267,  268, 1227,  889,  326,  812,  268,  326,  937,
      936,  954,  267,  268,  267,  267,  267, 1185,  267,  267,
      326,  935,  267,  326,  267,  267,  932,  931,  267,  956,
      267,  267,  930,  955,  268,  957,  267,  929,  267,  267,
      267,  327,  267,  267,  267, 1227,  267,  267,  268,  958,
      928,  982,  268,  959, 1227,  927,  327,  960,  268, 1186,
      267, 1207,  267,  267,  268,  267,  326,  267,  267,  326,
      926,  326,  268,  961,  326, 1227,  268, 1156,  962,  267,
      268,  267,  267,  267,  983,  267,  267, 1227,  267, 1189,
      267,  267,  267,  925,  267,  267,  268,  267,  924,  267,

      267,  268,  327,  267,  965,  267,  267,  327,  923,  267,
      963,  267,  267,  964,  267,  268,  267,  267,  326,  268,
      966,  326,  967,  267,  268,  267,  267,  267,  268,  267,
      267,  922,  267,  268,  267,  267,  970,  921,  920,  268,
      971,  968, 1227,  919, 1191,  268,  969,  813,  984,  267,
      268,  267,  267,  267,  327,  267,  267,  972,  267,  268,
      267,  267,  973,  268,  267,  810,  267,  267,  268,  267,
      809,  267,  267,  267,  808,  267,  267,  267,  807,  267,
      267,  267,  806,  267,  267,  268,  974,  805,  267,  268,
      267,  267,  804,  267,  268,  267,  267,  803,  802,  976,

      268,  975,  801,  800,  267,  268,  267,  267,  850,  268,
      267,  850,  267,  268,  267,  267,  326,  268,  799,  326,
      326,  977,  978,  326,  268,  326,  798,  797,  326,  268,
      796,  979,  326,  985,  795,  326,  326,  986,  987,  326,
      268,  980,  794, 1158,  268,  988, 1158,  793,  268,  989,
      326,  792,  327,  326,  326,  326,  327,  326,  326,  791,
      851,  327,  326,  990,  981,  326,  326,  991,  327,  326,
      326,  326,  327,  326,  326,  992,  790,  326,  326,  993,
      326,  326, 1227,  789, 1209,  995,  327,  996,  788,  326,
      327,  327,  326,  787,  326, 1159,  326,  326,  327,  326,

      786,  994,  327,  997,  785,  784,  327,  327,  998,  326,
      783,  782,  326,  327,  327,  326,  326,  781,  326,  326,
      326,  326, 1001,  326,  326,  327,  999,  780, 1000, 1002,
      327,  326,  327, 1004,  326,  326,  326,  779,  326,  326,
     1003,  326,  778,  326,  326,  327,  326,  326,  777,  776,
      326,  327,  327,  775, 1005,  326,  327,  327,  326,  326,
      654, 1115,  326,  326, 1115,  653,  326,  327, 1006, 1007,
      888,  327,  327,  888, 1227,  326, 1224,  327,  326,  327,
      652, 1161,  474,  327, 1161, 1008,  651,  648, 1009,  645,
      267,  327,  267,  267,  644,  327,  643, 1010,  642,  327,

     1011,  641,  267, 1053,  267,  267,  327,  267,  638,  267,
      267,  327,  637, 1116,  267, 1054,  267,  267,  636,  635,
     1055,  267,  889,  267,  267,  634,  268, 1012,  267,  633,
      267,  267,  267, 1162,  267,  267,  632,  267,  268,  267,
      267,  631,  267,  268,  267,  267,  267,  630,  267,  267,
      268,  627,  267, 1056,  267,  267,  267,  268,  267,  267,
      626,  625,  624,  267,  268,  267,  267,  326,  268,  267,
      326,  267,  267,  268,  326,  623, 1057,  326,  268,  622,
     1073,  267,  268,  267,  267, 1058,  621,  267,  268,  267,
      267,  267,  268,  267,  267,  267,  620,  267,  267,  268,

     1062, 1059,  619,  327,  267,  268,  267,  267, 1063, 1060,
      327,  618,  267, 1061,  267,  267,  267,  268,  267,  267,
      617, 1158,  616,  268, 1158, 1064,  267,  268,  267,  267,
      267,  268,  267,  267,  267,  615,  267,  267,  614,  267,
      268,  267,  267,  267, 1065,  267,  267,  267,  268,  267,
      267,  267,  268,  267,  267,  443, 1067, 1068,  267, 1066,
      267,  267,  268, 1227,  326,  263,  268,  326,  483,  267,
      268,  267,  267, 1159,  267,  268,  267,  267,  326,  268,
      482,  326,  257,  268,  253,  326,  481,  268,  326,  326,
      326, 1074,  326,  326,  268,  249, 1069, 1071, 1075,  326,

      327, 1070,  326,  326,  326,  268,  326,  326,  326,  326,
      268,  326,  326,  244,  327,  480,  326,  326, 1072,  326,
      326,  327, 1076,  479,  478,  327,  327,  326,  326, 1077,
      326,  326,  477, 1078,  326,  327,  476,  326,  326,  327,
      327,  326,  475,  326,  327,  327,  326, 1082,  243, 1079,
     1081, 1083,  327,  327,  326, 1080, 1084,  326,  326,  326,
      238,  326,  326,  327,  327,  326,  326,  237,  326,  326,
      327,  236,  326,  326,  327,  326,  326, 1085,  326,  327,
      326,  326,  473,  326,  326, 1087,  470,  326,  469,  326,
      327, 1086,  326,  468,  327,  327, 1088,  326,  467,  466,

      326,  327,  327,  267,  465,  267,  267,  464,  327,  327,
      267,  463,  267,  267,  327,  267,  327,  267,  267,  462,
      327,  461, 1089, 1091,  267,  327,  267,  267,  460,  267,
     1090,  267,  267,  327,  459,  458,  457, 1118, 1092,  268,
      267,  326,  267,  267,  326,  267,  268,  267,  267,  454,
      267,  268,  267,  267,  267,  453,  267,  267,  452,  267,
      268,  267,  267,  451,  450,  268,  449, 1120, 1119,  267,
      326,  267,  267,  326,  446, 1121,  268,  327,  445, 1122,
      267,  268,  267,  267,  444,  267,  268,  267,  267,  443,
      268,  267,  196,  267,  267,  268,  196,  267, 1123,  267,

      267,  267,  193,  267,  267,  268,  327,  267,  326,  267,
      267,  326,  326, 1227, 1125,  326,  268, 1126,  265,  261,
      258,  268,  267, 1124,  267,  267, 1128,  268,  267, 1128,
      257,  253,  267,  268,  267,  267,  326,  268,  326,  326,
      249,  326,  244,  268,  327,  243,  238,  326,  327, 1131,
      326,  326,  326,  326,  326,  326,  326,  326,  268,  237,
      326, 1127,  268,  236,  326,  225, 1132,  326,  268, 1133,
      326, 1130,  327,  326,  327,  224, 1134, 1135, 1129,  326,
      219,  326,  326,  327,  326,  218,  217,  327,  327,  327,
      206,  326, 1136,  327,  326,  326,  326,  202,  326,  326,

      327,  199, 1137,  196, 1138, 1139,  327, 1141,  326, 1115,
     1141,  326, 1115,  193,  191,  327,  267,  327,  267,  267,
     1227,  267,  326,  267,  267,  326,  267,  327,  267,  267,
     1227,  327,  327, 1227, 1227, 1140,  267, 1227,  267,  267,
     1227, 1227,  326,  327,  327,  326, 1163, 1143, 1227, 1165,
     1227, 1164,  268,  267, 1227,  267,  267,  268,  327, 1142,
     1177, 1116,  268,  267, 1227,  267,  267,  267, 1227,  267,
      267, 1166,  268,  267,  326,  267,  267,  326,  327,  267,
     1167,  267,  267, 1169, 1227,  267, 1169, 1176, 1128,  268,
      267, 1128,  267,  326,  267,  267,  326, 1227, 1172,  268,

      267, 1172,  326,  268, 1227,  326, 1227, 1227, 1227,  268,
      327,  326, 1227,  326,  326,  268,  326, 1168, 1174,  268,
      326, 1227,  326,  326,  268,  326, 1178, 1175,  268,  327,
     1180, 1227, 1227, 1180,  268, 1170, 1141, 1227,  327, 1141,
     1129, 1227,  326, 1183, 1171,  326, 1183,  327, 1158,  327,
     1173, 1158, 1161, 1227, 1161, 1161,  327, 1161,  327, 1227,
     1179, 1227,  267, 1227,  267,  267,  327,  267, 1227,  267,
      267,  267,  327,  267,  267, 1195, 1227,  326,  327,  327,
      326, 1227, 1181, 1227,  267, 1196,  267,  267, 1142,  267,
     1201,  267,  267, 1227, 1182, 1184, 1227, 1197,  268,  267,

     1159,  267,  267,  268, 1162, 1227, 1162,  268, 1169, 1227,
      267, 1169,  267,  327,  267,  267,  267, 1227,  267,  267,
      268, 1172, 1227,  267, 1172,  268,  267,  326,  267,  267,
      326,  326, 1227,  326,  326,  268,  326, 1227, 1198,  326,
      326, 1227,  326,  326,  268, 1202, 1203, 1180,  268, 1227,
     1180,  326,  268,  326,  326, 1183,  326,  268, 1183, 1227,
     1170, 1227,  268,  327, 1199,  326, 1227,  327,  326,  327,
     1227, 1227, 1227, 1173, 1227,  327,  327, 1227, 1200, 1204,
     1227, 1227,  267,  327,  267,  267, 1227,  327, 1227,  327,
     1227,  327,  267,  326,  267,  267,  326,  326, 1227, 1181,

      326,  327, 1227, 1205, 1227, 1211,  267, 1184,  267,  267,
      267,  326,  267,  267,  326, 1227, 1227, 1206,  268,  267,
     1227,  267,  267,  267, 1213,  267,  267,  326,  268,  327,
      326,  326,  326,  327,  326,  326,  267, 1227,  267,  267,
     1227,  267,  268,  267,  267,  326,  268,  327,  326,  326,
     1227,  267,  326,  267,  267,  268, 1212, 1227,  326,  268,
     1227,  326, 1227,  327, 1227, 1227,  326,  327,  327,  326,
     1227,  326,  268, 1214,  326, 1227,  267,  268,  267,  267,
      267,  327,  267,  267, 1226,  327, 1227,  268, 1227, 1225,
     1217, 1227, 1227, 1221,  327, 1227, 1227, 1227, 1218, 1227,

     1222, 1227,  327, 1227, 1227, 1227, 1227,  327, 1227, 1227,
     1227, 1227,  268, 1227, 1227, 1227,  268,   56,   56,   56,
       56,   56,   56,   61,   61,   61,   61,   61,   61,   68,
       68,   68,   68,   68,   68,   73,   73,   73,   73,   73,
       73,  184,  184,  184,  184,  184,  184,  192,  192, 1227,
     1227,  192,  192,  234,  234, 1227,  234,  234,  234,  245,
      245,  245,  245,  245,  245,  248, 1227, 1227, 1227,  248,
      248,  250,  250,  250,  250,  250,  250,  256,  256, 1227,
     1227,  256,  256,  262,  262,  262,  262,  262,  262,  266,
      266, 1227,  266,  266,  266,  274,  274, 1227,  274,  274,

      274,  313,  313, 1227,  313,  313,  313,  325,  325, 1227,
     1227, 1227,  325,  333,  333, 1227, 1227,  333,  333,  373,
      373, 1227,  373,  373,  373,  432,  432, 1227, 1227, 1227,
      432,   17, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227
    } ;

static yyconst flex_int16_t yy_chk[4188] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    7,    7,    2,    2,
        3,    3,    3,    3,    5,    5,    6,    6,    2,    4,
        4,    4,    4,    4,    8,    8,   15,   15,   15,   15,
       19,    2,   37,   19,  164,   15,   36,    4,   24,   24,
       26,   26,   28,   28,    2,   31,   37,   36,   42,    2,

       49,    2,   31,    2,   33,  164,    2,    2,   33, 1246,
       42,    5,   15,    6,   49,   33,    5,    4,    6,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   10,   38,   43,   10,   10,   16,
       16,   16,   16,   35,   43,   53,   35,   10,   16,   54,
       35,   54,   38,   35,   59,   59,   59,   73,   73, 1220,

       10,   64,   64,   64,   64,   71,  160,   53,  157,  157,
       71,  158,  158,   10,  160,   16,  162,  174,   10,  202,
       10,  202,   10,  162,  174,   10,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   12,   67,  169,   12,   12,   76,  171,   76,
       76,   77,   77,   77,   77,   12,   79,   79,   79,   79,

      161,  163,  167,  169,  168,  167,  166,  168,   12,  171,
      161,  163,  407,   67,  166,  163,  232,  161,  232,  167,
      400,   12,  163,   76,  168,  166,   12,   77,   12,  407,
       12,  400,   79,   12,   12,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       14,  170,  255,   14,   14,   80,  240,   80,   80,   81,

      180,   81,   81,   14,  115,  170,   81,  115,   82,  403,
       82,   82,   83,  181,   83,   83,   14,  176,  240,   82,
       82,   84,  255,   84,   84,   85, 1216,   85,   85,   14,
      403,   80,   84,   84,   14,   81,   14,   85,   14,  180,
      115,   14,   14,   46,   82,  176,   46,   46,   83,  181,
      119,  165,   86,  119,   86,   86,   46,   84,  209,  165,
      431,   85,  165,   86,   86,   87,  165,   87,   87,  165,
      172,   88,  209,   88,   88,   89,  178,   89,   89,  178,
      172,   90,   46,   90,   90, 1210,  119,   46,   86,   46,
       88,  179,  172,  178,   46,   46,   89,  173,  431,   90,

      173,   87,   91,   89,   91,   91,  190,   88,  173,  190,
       92,   89,   92,   92,  195,  195,  224,   90,   93,  224,
       93,   93,   94,   91,   94,   94,  179,   91,  412,   95,
      405,   95,   95,   97,   91,   97,   97,   93,   91,  412,
       93,   94,   92,   95,   93, 1192,   92,   93,   96,  405,
       96,   96,   94,   98,   93,   98,   98,   95,   94,  198,
      198,  394,   96,   97,   99,   95,   99,   99,  126,   97,
      100,  126,  100,  100,  102,  394,  102,  102,   98,   96,
      101,  397,  101,  101,   96,  103,  103,  103,  103,   98,
      395,  100,  102,  395,  101,  104,   99,  104,  104,  397,

       99,  397,  101,  100,  126,  106,  100,  106,  106,  608,
      102,  105,  105,  105,  105,  107,  101,  107,  107,  577,
      127,  103,  108,  127,  108,  108,  109,  608,  109,  109,
      110,  104,  110,  110,  104,  111,  108,  111,  111,  127,
      577,  106,  112,  129,  112,  112,  129,  105,  235,  235,
      108,  107,  113,  396,  113,  113,  127,  114,  108,  114,
      114,  129,  109,  247,  247,  247,  110,  396,  112,  416,
      183,  111,  109,  416,  116,  116,  116,  116,  112,  129,
      110, 1190,  111,  118,  118,  118,  118,  182,  113,  113,
      112,  113,  120,  114,  121,  120,  183,  121,  183,  120,

      123,  120,  182,  123,  124,  121,  121,  124,  259,  114,
      116,  123,  123,  259,  125,  398,  124,  125,  128,  118,
      130,  128,  398,  130,  182,  125,  125, 1162,  120,  131,
      121,  411,  131,  252,  252,  252,  123,  262,  262,  128,
      124,  130,  392,  392,  132,  130,  128,  132,  133,  408,
      125,  133,  130,  411,  128,  134,  130,  135,  134,  136,
      135,  131,  136,  132,  576,  131,  132,  133,  408,  134,
      132,  135,  137,  132,  138,  137,  409,  138,  133,  139,
      132,  576,  139,  134,  133,  393,  393,  140,  135,  136,
      140,  134,  409,  135,  587,  136,  141,  137,  417,  141,

      139,  140,  142,  142,  142,  142,  138,  417,  137,  140,
      138,  587,  139,  143,  141,  139,  143,  144,  144,  144,
      144,  401,  145,  140,  145,  145,  146,  147,  401,  146,
      147,  145,  141,  148,  149, 1159,  148,  149,  142,  150,
      151,  147,  150,  151,  152,  399,  406,  152,  399,  143,
      402,  153,  143,  144,  153,  147,  413,  402,  145,  413,
      406,  404,  146,  147,  404,  184,  151,  410,  184,  148,
      149,  154,  154,  154,  154,  150,  151,  422,  404,  148,
      152,  152,  410,  152,  149, 1157,  150,  153,  151,  156,
      156,  156,  156,  175,  175,  175,  175,  177,  177,  177,

      177,  184,  266,  153,  266,  266,  422,  154,  185,  185,
      185,  185,  187,  187,  187,  187,  189,  189,  189,  189,
      261,  261,  261,  261,  267,  156,  267,  267,  268,  268,
      268,  268, 1155,  177,  269,  269,  269,  269,  266,  271,
      271,  271,  271,  274,  185,  274,  274,  414,  187,  415,
      274,  430,  189,  272,  272,  272,  272,  427,  414,  275,
      267,  275,  275,  916,  268,  276,  275,  276,  276,  610,
      269,  415,  426,  261,  278,  271,  278,  278,  418,  274,
      277,  277,  277,  277,  430,  427,  278,  277,  279,  424,
      279,  279,  418,  916,  280,  275,  280,  280,  426,  279,

      279,  276,  281,  610,  281,  281,  280,  424,  424,  282,
      278,  282,  282,  458,  281,  283,  277,  283,  283,  325,
      282,  282,  325,  284,  279,  284,  284,  458, 1030,  285,
      280,  285,  285,  286,  425,  286,  286,  284,  281,  287,
      283,  287,  287,  578,  288,  282,  288,  288,  578,  419,
      289,  283,  289,  289,  285,  325, 1030,  287,  288,  284,
      419,  584,  286,  419,  286,  285,  425,  428,  584,  286,
      428,  290,  289,  290,  290,  287,  291,  429,  291,  291,
      288,  292,  468,  292,  292,  468,  289,  579,  293,  290,
      293,  293,  429,  294,  291,  294,  294,  295,  579,  295,

      295,  326,  293,  296,  326,  296,  296,  290,  297, 1153,
      297,  297,  291,  292,  429,  582,  293,  292,  298,  592,
      298,  298,  295,  294,  293,  299,  592,  299,  299,  294,
      582,  296,  300,  295,  300,  300,  589,  326,  297,  296,
      301,  589,  301,  301,  297,  298,  302,  575,  302,  302,
      303,  299,  303,  303,  298,  304,  335,  304,  304,  335,
      302,  299,  301,  575,  305,  300,  305,  305,  300,  586,
     1102,  307,  303,  307,  307,  306,  301,  306,  306,  305,
      590,  308,  302,  308,  308,  586,  303,  311,  304,  311,
      311,  304,  335,  590,  574,  306,  307,  574, 1102,  313,

      305,  313,  313,  308,  595,  351,  308,  307,  351,  595,
      741,  306,  309,  309,  309,  309,  314,  308,  314,  314,
      581, 1152,  318,  311,  318,  318,  594,  311,  315,  315,
      315,  315,  741,  594,  581,  313,  316,  351,  316,  316,
      317,  351,  317,  317,  321,  602,  321,  321,  309,  585,
      602,  319,  314,  319,  319,  752, 1020,  593,  318,  318,
      320,  593,  320,  320,  315,  316,  316, 1020,  476,  585,
      321,  476,  316,  752,  320,  322,  317,  322,  322,  323,
      321,  323,  323,  317,  580,  742,  324,  319,  324,  324,
      319,  583,  321,  580,  583,  742,  320,  327,  327,  327,

      327,  328,  328,  328,  328,  330,  330,  330,  330,  333,
     1116,  322,  333,  597,  588,  323,  333,  588,  333,  322,
      476,  597,  324,  331,  331,  331,  331,  334,  323,  601,
      334,  588,  337,  327,  334,  337,  334,  328,  601,  338,
      339,  330,  338,  339,  337,  333,  336,  336,  336,  336,
      338,  338,  339,  336,  340,  336,  342,  340,  341,  342,
      591,  341,  344,  334,  343,  344,  340,  343,  337,  341,
      341,  599,  600,  760,  345,  338,  339,  345,  343,  600,
      591,  342,  336,  346,  605,  347,  346,  344,  347,  760,
      340,  599,  342,  348,  341,  750,  348,  740,  344,  347,

      343,  346,  740,  345,  349,  345,  350,  349,  750,  350,
      345,  352,  596,  353,  352,  348,  353,  605,  603,  346,
      354,  347,  349,  354,  350,  352,  596,  355,  356,  348,
      355,  356,  357,  359,  358,  357,  359,  358,  361,  352,
      349,  361,  350,  353,  603,  354,  743,  352,  743,  353,
      360,  362,  361,  360,  362,  355,  354,  609,  356,  357,
      358,  768,  363,  355,  356,  363,  359,  607,  357,  359,
      358,  768,  360,  362,  361,  364,  365,  366,  364,  365,
      366,  367,  371, 1113,  367,  371,  360,  362,  739,  609,
      364,  368,  368,  368,  368,  363,  365,  739,  363,  748,

      607,  377,  366,  367,  377,  744,  367,  370,  370,  370,
      370,  364,  365,  366,  744,  770,  376,  367,  371,  376,
      748,  373,  371,  373,  373, 1111,  374,  368,  374,  374,
      373,  375,  375,  375,  375,  374,  378,  377,  379,  378,
      375,  379,  746,  912,  377,  376,  376,  380,  382,  746,
      380,  382,  376,  381,  770,  383,  381,  373,  383,  754,
      384,  380,  374,  384,  747,  912,  747,  375,  388,  388,
      388,  388,  378,  378,  379,  745,  754,  379,  389,  381,
      389,  389,  751,  380,  382,  385,  385,  385,  385,  381,
      432,  383,  382,  432,  753,  745,  384,  387,  387,  387,

      387,  381,  751,  753,  383,  420,  420,  420,  420,  433,
     1109,  764,  433,  756,  389,  434,  434,  434,  434,  598,
      756,  385,  435,  435,  435,  435,  432,  437,  437,  437,
      437,  755,  764,  387,  438,  438,  438,  438,  439,  598,
      439,  439,  598,  761,  755,  433,  440,  440,  440,  440,
      761,  434,  442,  442,  442,  442,  769,  749,  435,  474,
      474,  474,  474,  437,  482,  482,  482,  482,  483,  483,
      483,  483,  749,  769,  439,  484,  484,  484,  484,  757,
      759,  757,  440,  486,  486,  486,  486,  487,  487,  487,
      487,  489,  489,  489,  489,  490,  490,  490,  490,  762,

      759,  491,  490,  491,  491,  492,  762,  492,  492,  493,
      763,  493,  493,  491,  758, 1108,  758,  482,  763,  492,
      892,  483,  494,  487,  494,  494,  771,  495,  484,  495,
      495,  490,  496,  772,  496,  496,  493,  491,  773,  892,
      497,  492,  497,  497,  498,  493,  498,  498,  496,  499,
      494,  499,  499,  500,  765,  500,  500,  765,  494,  495,
      771, 1208,  497,  495,  498,  773,  791,  501,  496,  501,
      501,  766,  772,  766,  499,  502,  497,  502,  502,  500,
      498,  501,  791, 1107,  503,  499,  503,  503,  505,  500,
      505,  505,  504,  502,  504,  504, 1208,  767,  506,  767,

      506,  506,  507,  501,  507,  507,  508,  890,  508,  508,
      534,  502,  506,  534,  568,  503,  505,  568,  507,  504,
      503,  893,  534,  893,  505, 1106,  506,  890,  504,  509,
      508,  509,  509,  510,  506,  510,  510,  511,  507,  511,
      511,  512,  508,  512,  512,  513,  534,  513,  513,  910,
      568,  510,  511,  514, 1029,  514,  514, 1052,  568,  512,
      509,  513, 1051,  910,  515,  509,  515,  515,  516,  510,
      516,  516,  517,  511,  517,  517,  902,  512,  514,  891,
      906,  513,  520,  515,  520,  520,  891,  894,  518,  514,
      518,  518,  519, 1029,  519,  519,  902,  894,  520,  516,

      515,  906,  516,  517,  516, 1049,  518,  521,  517,  521,
      521, 1048,  519,  522,  522,  522,  522, 1047,  520,  523,
      523,  523,  523,  524,  518,  524,  524,  525,  519,  525,
      525,  895,  526,  895,  526,  526,  527,  535,  527,  527,
      535, 1045,  915,  521,  521,  528, 1044,  528,  528,  522,
      529,  535,  529,  529,  896,  523,  896,  907,  540,  524,
      897,  540,  897,  525, 1040,  527,  536,  524,  526,  536,
     1039,  932,  527,  535,  538,  915,  526,  538,  907,  525,
      540,  528,  530,  530,  530,  530,  529,  932,  528,  532,
      532,  532,  532,  536,  540,  529,  533,  533,  533,  533,

      914,  537,  536,  533,  537,  533,  538,  903,  539,  542,
      538,  539,  542,  541,  543,  914,  541,  543,  530,  898,
      545,  898,  544,  545,  539,  544,  903,  547,  546,  537,
      547,  546,  533,  541,  542,  918,  544,  537,  545,  548,
      543,  905,  548,  549,  539,  542,  549, 1038,  551,  541,
      543,  551,  550, 1019,  547,  550,  545,  549,  544,  546,
      905,  918,  552,  547,  546,  552,  554,  548,  550,  554,
     1019,  549,  551,  553,  555,  548,  553,  555,  913,  549,
      556,  554,  557,  556,  551,  557,  558,  702,  550,  558,
      702,  553,  555,  552,  559, 1037,  556,  559,  552,  913,

      560,  561,  554,  560,  561,  558, 1016,  557,  563,  553,
      555,  563,  562, 1099,  564,  562,  556,  564,  557,  561,
      702, 1035,  558,  702,  563,  559,  569, 1016,  559,  569,
      559,  560,  562,  899, 1099,  899,  560,  561,  565,  565,
      565,  565,  649,  570,  563,  649,  570,  565,  562, 1094,
      564,  564,  566,  566,  566,  566,  567,  567,  567,  567,
      571,  572,  569,  571,  572,  573, 1094,  950,  573,  604,
      604,  604,  604,  606,  565,  900,  606,  900,  569,  570,
      604,  901,  653,  901,  606,  653,  948,  570,  664,  571,
      664,  664,  567,  908,  649,  908,  571,  572,  909,  947,

      909,  573, 1101, 1101,  572,  611,  611,  611,  611,  664,
      573,  613,  613,  613,  613,  646,  646,  646,  646,  655,
      655,  655,  655,  917,  664,  606,  657,  657,  657,  657,
      658,  658,  658,  658,  653,  660,  660,  660,  660,  946,
      661,  611,  661,  661,  911,  662,  911,  662,  662,  663,
      917,  663,  663,  665, 1025,  665,  665, 1013, 1104, 1013,
      661,  662,  667, 1028,  667,  667,  665,  666, 1025,  666,
      666,  669,  655,  669,  669,  703,  661,  668,  703,  668,
      668,  662,  663,  658,  669,  663, 1104,  666,  670,  665,
      670,  670, 1014,  667, 1014,  668,  703,  671,  667,  671,

      671, 1028,  672,  666,  672,  672,  673,  669,  673,  673,
     1024,  703,  674,  668,  674,  674,  675, 1024,  675,  675,
      670,  945, 1149,  671,  670,  676,  672,  676,  676, 1015,
      944, 1015,  677,  671,  677,  677,  675,  673,  672,  943,
      942,  674,  673, 1017,  678, 1017,  678,  678,  674, 1149,
     1031,  811,  675,  676,  811,  707,  677,  679,  707,  679,
      679,  676,  678,  680,  940,  680,  680, 1027,  677,  681,
      679,  681,  681,  707, 1027,  682,  680,  682,  682,  683,
      678,  683,  683,  684,  937,  684,  684,  685, 1031,  685,
      685,  707,  686,  679,  686,  686, 1021,  683, 1021,  680,

      681,  684,  682,  811,  936,  681,  685,  687,  935,  687,
      687,  682, 1096,  904,  688,  683,  688,  688,  904,  684,
     1022,  687, 1022,  685,  686, 1188, 1096,  688,  686,  689,
     1215,  689,  689,  690,  904,  690,  690, 1023,  691, 1023,
      691,  691,  689,  687,  692, 1050,  692,  692, 1050,  695,
      688,  695,  695, 1188,  690,  693,  693,  693,  693,  694,
      701,  694,  694,  701,  711,  689,  691,  711, 1215,  690,
      696,  934,  696,  696,  691,  697,  701,  697,  697,  698,
      692,  698,  698, 1219,  699,  695,  699,  699,  711,  933,
      700,  693,  931,  700,  692,  694,  701, 1050, 1018,  704,

      711,  695,  704, 1018,  694,  708,  696, 1026,  708, 1026,
      700,  697,  704,  705, 1219,  698,  705,  698,  708, 1018,
      699,  706,  696, 1095,  706,  697,  700,  709,  710,  712,
      709,  710,  712,  705, 1095,  704,  699,  713,  923,  921,
      713,  708,  714,  715,  716,  714,  715,  716,  721,  705,
      720,  721,  706,  720,  710,  920,  919,  706,  717,  709,
      712,  717,  714,  709,  710,  712,  713,  722,  716,  718,
      722,  715,  718,  713,  719,  721,  717,  719,  714,  715,
      716,  720,  718,  813,  721,  722,  720,  719,  723,  724,
      725,  723,  724,  725,  717,  726,  812,  729,  726,  727,

      729,  728,  727,  722,  728,  718,  723,  810,  724,  726,
      719,  809,  727,  730,  728,  807,  730,  731,  729, 1093,
      731, 1093,  725,  806,  723,  724,  725,  732,  732,  732,
      732,  726, 1097,  729,  805,  727,  733,  728,  804,  733,
      734,  730,  735,  734,  801,  735, 1097,  736,  737,  730,
      736,  737,  738,  731,  774,  738, 1098,  774, 1098,  814,
      800,  814,  814,  732,  799,  774,  816,  731,  816,  816,
      798,  815,  733,  815,  815, 1147,  734,  818,  735,  818,
      818,  733, 1147,  736,  737, 1100,  737, 1100,  738,  815,
      814, 1146,  734, 1146,  735,  814,  816,  736,  817,  797,

      817,  817,  816, 1144,  738,  856,  774,  815,  856,  796,
      795,  817,  819,  818,  819,  819,  820, 1144,  820,  820,
      852,  792,  821,  852,  821,  821,  790,  789,  822,  820,
      822,  822,  788,  819,  817,  821,  823,  787,  823,  823,
      824,  856,  824,  824,  825, 1145,  825,  825,  819,  823,
      786,  852,  820,  824, 1186,  785,  852,  825,  821, 1145,
      826, 1186,  826,  826,  822,  827,  853,  827,  827,  853,
      784,  860,  823,  826,  860, 1148,  824, 1148,  827,  828,
      825,  828,  828,  829,  853,  829,  829, 1185,  830, 1185,
      830,  830,  831,  782,  831,  831,  826,  832,  781,  832,

      832,  827,  853,  833,  830,  833,  833,  860,  780,  834,
      828,  834,  834,  829,  835,  828,  835,  835,  854,  829,
      830,  854,  831,  836,  830,  836,  836,  837,  831,  837,
      837,  778,  838,  832,  838,  838,  836,  777,  776,  833,
      837,  834, 1187,  775, 1187,  834,  835,  654,  854,  839,
      835,  839,  839,  840,  854,  840,  840,  838,  841,  836,
      841,  841,  839,  837,  842,  652,  842,  842,  838,  843,
      651,  843,  843,  844,  650,  844,  844,  845,  648,  845,
      845,  846,  645,  846,  846,  839,  840,  644,  847,  840,
      847,  847,  643,  848,  841,  848,  848,  642,  641,  844,

      842,  843,  640,  639,  849,  843,  849,  849,  850,  844,
      850,  850,  851,  845,  851,  851,  857,  846,  638,  857,
      855,  845,  846,  855,  847,  858,  637,  636,  858,  848,
      635,  848,  859,  855,  634,  859,  861,  857,  858,  861,
      849,  849,  633, 1114,  850,  859, 1114,  632,  851,  861,
      862,  631,  857,  862,  863,  867,  855,  863,  867,  630,
      850,  858,  864,  862,  851,  864,  865,  863,  859,  865,
      866,  868,  861,  866,  868,  864,  629,  870,  869,  865,
      870,  869, 1207,  628, 1207,  867,  862,  868,  627,  871,
      863,  867,  871,  626,  872, 1114,  873,  872,  864,  873,

      625,  866,  865,  868,  624,  623,  866,  868,  869,  874,
      622,  621,  874,  870,  869,  876,  875,  620,  876,  875,
      877,  878,  874,  877,  878,  871,  872,  619,  873,  875,
      872,  879,  873,  877,  879,  880,  881,  618,  880,  881,
      876,  883,  617,  882,  883,  874,  882,  884,  616,  615,
      884,  876,  875,  614,  878,  885,  877,  878,  885,  886,
      481, 1115,  886,  887, 1115,  480,  887,  879,  881,  882,
      888,  880,  881,  888, 1223,  889, 1223,  883,  889,  882,
      479, 1117,  478,  884, 1117,  883,  477,  475,  884,  473,
      951,  885,  951,  951,  472,  886,  471,  886,  470,  887,

      887,  469,  952,  951,  952,  952,  888,  953,  467,  953,
      953,  889,  466, 1115,  954,  952,  954,  954,  465,  464,
      953,  955,  888,  955,  955,  463,  951,  889,  956,  462,
      956,  956,  957, 1117,  957,  957,  461,  958,  952,  958,
      958,  460,  959,  953,  959,  959,  960,  459,  960,  960,
      954,  457,  961,  955,  961,  961,  962,  955,  962,  962,
      456,  455,  454,  963,  956,  963,  963,  982,  957,  964,
      982,  964,  964,  958,  985,  453,  963,  985,  959,  452,
      982,  965,  960,  965,  965,  964,  451,  967,  961,  967,
      967,  966,  962,  966,  966,  968,  450,  968,  968,  963,

      967,  964,  449,  982,  970,  964,  970,  970,  968,  965,
      985,  448,  969,  966,  969,  969,  971,  965,  971,  971,
      447, 1158,  446,  967, 1158,  969,  972,  966,  972,  972,
      973,  968,  973,  973,  974,  445,  974,  974,  444,  976,
      970,  976,  976,  975,  972,  975,  975,  977,  969,  977,
      977,  978,  971,  978,  978,  443,  975,  976,  979,  974,
      979,  979,  972,  391,  987,  264,  973,  987,  260,  980,
      974,  980,  980, 1158,  981,  976,  981,  981,  983,  975,
      257,  983,  256,  977,  254,  984,  253,  978,  984,  988,
      986,  983,  988,  986,  979,  251,  977,  979,  984,  989,

      987,  978,  989,  990,  991,  980,  990,  991,  992,  993,
      981,  992,  993,  246,  983,  242,  994,  995,  980,  994,
      995,  984,  986,  241,  239,  988,  986,  996,  997,  994,
      996,  997,  238,  995,  998,  989,  237,  998,  999,  990,
      991,  999,  236, 1000,  992,  993, 1000,  998,  233,  995,
      997,  999,  994,  995, 1001,  996, 1000, 1001, 1002, 1003,
      231, 1002, 1003,  996,  997, 1004, 1005,  230, 1004, 1005,
      998,  229, 1006, 1008,  999, 1006, 1008, 1003, 1007, 1000,
     1009, 1007,  225, 1009, 1010, 1006,  223, 1010,  222, 1011,
     1001, 1005, 1011,  221, 1002, 1003, 1007, 1012,  220,  219,

     1012, 1004, 1005, 1053,  218, 1053, 1053,  217, 1006, 1008,
     1054,  216, 1054, 1054, 1007, 1055, 1009, 1055, 1055,  215,
     1010,  214, 1008, 1010, 1056, 1011, 1056, 1056,  213, 1057,
     1009, 1057, 1057, 1012,  212,  211,  210, 1056, 1011, 1053,
     1058, 1073, 1058, 1058, 1073, 1059, 1054, 1059, 1059,  208,
     1060, 1055, 1060, 1060, 1061,  207, 1061, 1061,  206, 1062,
     1056, 1062, 1062,  205,  204, 1057,  203, 1059, 1058, 1063,
     1074, 1063, 1063, 1074,  201, 1060, 1058, 1073,  200, 1061,
     1064, 1059, 1064, 1064,  199, 1065, 1060, 1065, 1065,  197,
     1061, 1066,  196, 1066, 1066, 1062,  194, 1067, 1065, 1067,

     1067, 1068,  192, 1068, 1068, 1063, 1074, 1069, 1075, 1069,
     1069, 1075, 1077,  159, 1068, 1077, 1064, 1069,   75,   72,
       70, 1065, 1070, 1066, 1070, 1070, 1071, 1066, 1071, 1071,
       68,   66, 1072, 1067, 1072, 1072, 1076, 1068, 1078, 1076,
       63, 1078,   58, 1069, 1075,   55,   52, 1079, 1077, 1076,
     1079, 1080, 1081, 1082, 1080, 1081, 1082, 1083, 1070,   51,
     1083, 1070, 1071,   50, 1084,   45, 1078, 1084, 1072, 1079,
     1086, 1072, 1076, 1086, 1078,   44, 1080, 1081, 1071, 1085,
       41, 1087, 1085, 1079, 1087,   40,   39, 1080, 1081, 1082,
       34, 1088, 1085, 1083, 1088, 1089, 1090,   32, 1089, 1090,

     1084,   30, 1086,   27, 1088, 1089, 1086, 1091, 1092, 1103,
     1091, 1092, 1103,   23,   21, 1085, 1118, 1087, 1118, 1118,
     1103, 1119, 1131, 1119, 1119, 1131, 1120, 1088, 1120, 1120,
       17, 1089, 1090,    0,    0, 1090, 1121,    0, 1121, 1121,
        0,    0, 1135, 1091, 1092, 1135, 1119, 1092,    0, 1121,
        0, 1120, 1118, 1122,    0, 1122, 1122, 1119, 1131, 1091,
     1135, 1103, 1120, 1123,    0, 1123, 1123, 1124,    0, 1124,
     1124, 1122, 1121, 1125, 1134, 1125, 1125, 1134, 1135, 1126,
     1124, 1126, 1126, 1127,    0, 1127, 1127, 1134, 1128, 1122,
     1128, 1128, 1129, 1132, 1129, 1129, 1132,    0, 1130, 1123,

     1130, 1130, 1133, 1124,    0, 1133,    0,    0,    0, 1125,
     1134, 1136,    0, 1137, 1136, 1126, 1137, 1126, 1132, 1127,
     1138,    0, 1139, 1138, 1128, 1139, 1137, 1133, 1129, 1132,
     1140,    0,    0, 1140, 1130, 1127, 1141,    0, 1133, 1141,
     1128,    0, 1142, 1143, 1129, 1142, 1143, 1136, 1150, 1137,
     1130, 1150, 1151,    0, 1161, 1151, 1138, 1161, 1139, 1150,
     1139,    0, 1163, 1151, 1163, 1163, 1140, 1164,    0, 1164,
     1164, 1165, 1141, 1165, 1165, 1163,    0, 1174, 1142, 1143,
     1174,    0, 1140,    0, 1166, 1164, 1166, 1166, 1141, 1167,
     1174, 1167, 1167,    0, 1142, 1143,    0, 1166, 1163, 1168,

     1150, 1168, 1168, 1164, 1151,    0, 1161, 1165, 1169,    0,
     1169, 1169, 1170, 1174, 1170, 1170, 1171,    0, 1171, 1171,
     1166, 1172,    0, 1172, 1172, 1167, 1173, 1175, 1173, 1173,
     1175, 1176,    0, 1177, 1176, 1168, 1177,    0, 1168, 1178,
     1179,    0, 1178, 1179, 1169, 1175, 1177, 1180, 1170,    0,
     1180, 1181, 1171, 1182, 1181, 1183, 1182, 1172, 1183,    0,
     1169,    0, 1173, 1175, 1170, 1184,    0, 1176, 1184, 1177,
        0,    0,    0, 1172,    0, 1178, 1179,    0, 1173, 1179,
        0,    0, 1195, 1180, 1195, 1195,    0, 1181,    0, 1182,
        0, 1183, 1196, 1201, 1196, 1196, 1201, 1203,    0, 1180,

     1203, 1184,    0, 1181,    0, 1196, 1197, 1183, 1197, 1197,
     1198, 1202, 1198, 1198, 1202,    0,    0, 1184, 1195, 1199,
        0, 1199, 1199, 1200, 1202, 1200, 1200, 1204, 1196, 1201,
     1204, 1205, 1206, 1203, 1205, 1206, 1211,    0, 1211, 1211,
        0, 1212, 1197, 1212, 1212, 1213, 1198, 1202, 1213, 1214,
        0, 1217, 1214, 1217, 1217, 1199, 1198,    0, 1218, 1200,
        0, 1218,    0, 1204,    0,    0, 1226, 1205, 1206, 1226,
        0, 1222, 1211, 1204, 1222,    0, 1221, 1212, 1221, 1221,
     1225, 1213, 1225, 1225, 1222, 1214,    0, 1217,    0, 1221,
     1212,    0,    0, 1217, 1218,    0,    0,    0, 1214,    0,

     1218,    0, 1226,    0,    0,    0,    0, 1222,    0,    0,
        0,    0, 1221,    0,    0,    0, 1225, 1228, 1228, 1228,
     1228, 1228, 1228, 1229, 1229, 1229, 1229, 1229, 1229, 1230,
     1230, 1230, 1230, 1230, 1230, 1231, 1231, 1231, 1231, 1231,
     1231, 1232, 1232, 1232, 1232, 1232, 1232, 1233, 1233,    0,
        0, 1233, 1233, 1234, 1234,    0, 1234, 1234, 1234, 1235,
     1235, 1235, 1235, 1235, 1235, 1236,    0,    0,    0, 1236,
     1236, 1237, 1237, 1237, 1237, 1237, 1237, 1238, 1238,    0,
        0, 1238, 1238, 1239, 1239, 1239, 1239, 1239, 1239, 1240,
     1240,    0, 1240, 1240, 1240, 1241, 1241,    0, 1241, 1241,

     1241, 1242, 1242,    0, 1242, 1242, 1242, 1243, 1243,    0,
        0,    0, 1243, 1244, 1244,    0,    0, 1244, 1244, 1245,
     1245,    0, 1245, 1245, 1245, 1247, 1247,    0,    0,    0,
     1247, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[88] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 
    0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
//
// Based loosely on NetHack's lev_comp.l

#include <algorithm>
#include <cstring>
#include <queue>
#include "AppHdr.h"
#include "mapdef.h"
#include "levcomp.tab.h"
#include "stuff.h"

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(100);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

// Enter a new state, first clearing yylval of junk.
#define CBEGIN(x) do { BEGIN(x); clean(); } while (0)

static void post_proc_text(char *text, bool trim_right,
                           int strip_trailing, int strip_leading)
{
    char *s = NULL;
    if (trim_right)
    {
        s = text + strlen(text) - 1;
        while (s >= text && isspace(*s))
            *s-- = 0;
    }
    if (strip_trailing)
    {
        if (!s)
            s = text + strlen(text) - 1;
        while (s >= text && --strip_trailing >= 0)
            *s-- = 0;
    }
    if (strip_leading)
    {
        const int original_length = strlen(text);
        if (original_length > strip_leading)
            memmove(text, text + strip_leading,
                    original_length - strip_leading);
        if (original_length >= strip_leading)
            text[original_length - strip_leading] = 0;
    }
}

static char *copy_text(bool trim_right, int strip_trailing, int strip_leading)
{
    char *newstring = NULL;
    if ((yylval.text = newstring = strdup(yytext)))
    {
        alloced = true;
        post_proc_text(newstring, trim_right, strip_trailing, strip_leading);
    }
    return (newstring);
}

static void settext(bool trim_right = false,
                    int strip_trailing = 0,
                    int strip_leading = 0)
{
    clean();
    char *newstring = copy_text(trim_right, strip_trailing, strip_leading);
    yylval.text = newstring;
}

static void str_check()
{
    if (!yylval.text)
    {
        char *buf = (char *) malloc(1);
        if (buf)
        {
            yylval.text = buf;
            *buf = 0;
            alloced = true;
        }
    }
}

static void cattext(bool trim_right = false, int strip_trailing = 0)
{
    if (!yylval.text)
        settext(trim_right, strip_trailing);
    else
    {
        bool was_alloced = alloced;
        char *newbuf = (char*) malloc(strlen(yylval.text) + strlen(yytext) + 1);
        if (!newbuf)
            end(1, "Out of memory");
        alloced = true;
        strcpy(newbuf, yylval.text);
        strcat(newbuf, yytext);
        post_proc_text(newbuf, trim_right, strip_trailing, 0);
        if (was_alloced)
            free((void*) yylval.text);
        yylval.text = newbuf;
    }
}








#line 1936 "levcomp.lex.cc"

#define INITIAL 0
#define MAPDEF 1
#define LUA 2
#define LUA_ONELINER 3
#define ARGUMENT 4
#define MNAME 5
#define KEYWORDS 6
#define ITEM_LIST 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 145 "levcomp.lpp"


#line 2131 "levcomp.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1228 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1227 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 147 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 149 "levcomp.lpp"
{
                        settext(true);
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 154 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 155 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 156 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 158 "levcomp.lpp"
;
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 160 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 161 "levcomp.lpp"
{
                            settext(true, 2);
                            BEGIN(INITIAL);
                            return LUA_LINE;
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 166 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 170 "levcomp.lpp"
;
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 172 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 176 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 178 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 183 "levcomp.lpp"
;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 184 "levcomp.lpp"
;
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 185 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 187 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 191 "levcomp.lpp"
;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 193 "levcomp.lpp"
{
                        cattext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 198 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 199 "levcomp.lpp"
;
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 200 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 202 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 204 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 208 "levcomp.lpp"
;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 210 "levcomp.lpp"
{
                        cattext();
                        return MONSTER_NAME;
                    }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 215 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 216 "levcomp.lpp"
;
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 218 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 222 "levcomp.lpp"
;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 224 "levcomp.lpp"
{
                        cattext();
                    }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 228 "levcomp.lpp"
cattext();
	YY_BREAK
case 33:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 230 "levcomp.lpp"
{ BEGIN(INITIAL); str_check(); return STRING; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 232 "levcomp.lpp"
;
	YY_BREAK
case 35:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 234 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 236 "levcomp.lpp"
{ BEGIN(LUA_ONELINER); return MAIN; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 238 "levcomp.lpp"
{ BEGIN(LUA); return PRELUDE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 239 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 240 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 241 "levcomp.lpp"
{ BEGIN(LUA); return VALIDATE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 242 "levcomp.lpp"
{ BEGIN(LUA); return VETO; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 243 "levcomp.lpp"
{ BEGIN(LUA); return EPILOGUE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 245 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 246 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEFAULT_DEPTH; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 247 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DESC; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 248 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEPTH; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 249 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return ORIENT; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 250 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 251 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return WELCOME; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 252 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 253 "levcomp.lpp"
return WEIGHT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 254 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 255 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 256 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLAGS; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 257 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return BFLAGS; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 258 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 259 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return NSUBST; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 260 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return COLOUR; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 261 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLOORCOL; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 262 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LROCKCOL; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 263 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLOORTILE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 264 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LROCKTILE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 265 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return FTILE; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 266 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return RTILE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 267 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return TILE; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 268 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return FHEIGHT; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 269 "levcomp.lpp"
{ CBEGIN(MNAME); return MONS; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 270 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 271 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return MARKER; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 272 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 274 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 275 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 276 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 277 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMASK; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 278 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KPROP; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 279 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return SUBVAULT; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 281 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 283 "levcomp.lpp"
return COLON;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 285 "levcomp.lpp"
return PERC;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 286 "levcomp.lpp"
return DASH;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 288 "levcomp.lpp"
{
                        clean();
                        yylval.f = strtod(yytext, NULL);
                        return NUMBER;
                    }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 294 "levcomp.lpp"
{
                        settext(true, 1, 1);
                        return STRING;
                    }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 299 "levcomp.lpp"
;
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 300 "levcomp.lpp"
;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 301 "levcomp.lpp"
;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 302 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 304 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 2723 "levcomp.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MAPDEF):
case YY_STATE_EOF(LUA):
case YY_STATE_EOF(LUA_ONELINER):
case YY_STATE_EOF(ARGUMENT):
case YY_STATE_EOF(MNAME):
case YY_STATE_EOF(KEYWORDS):
case YY_STATE_EOF(ITEM_LIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1228 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1228 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1227);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 304 "levcomp.lpp"



int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}

