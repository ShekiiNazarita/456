###############################################################################
# layout_grids.des: Layouts based on grid structures generated by omnigrid
###############################################################################

: require("dlua/util.lua")
: require("dlua/layout/procedural.lua")
: require("dlua/layout/zonify.lua")
: require("dlua/layout/hyper.lua")
: require("dlua/layout/omnigrid.lua")

# Generates up to 3 grids of different granularities, then layers
# then on top of each other. At its simplest reduction this looks like
# forbidden_donut but with a randomly-placed hole. At its most complex
# it does all kinds of interesting things.
NAME: layout_layered_grid
DEPTH:  D, Zot, Elf, Crypt, Snake, Dis, Lair
WEIGHT: 20
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand no_rotate no_pool_fixup no_hmirror no_vmirror chance_d
{{
  if is_validating() then return; end

  local weights = {
    { weight = 20, primary = hyper.floors.floor_plan_omnigrid },
    { weight = 30, primary = hyper.floors.floor_plan_finegrid },
    { weight = 50, primary = hyper.floors.floor_plan_microgrid },
    { weight = 10, primary = hyper.floors.floor_plan_omnigrid, secondary = hyper.floors.floor_plan_finegrid },
    { weight = 10, primary = hyper.floors.floor_plan_omnigrid, secondary = hyper.floors.floor_plan_microgrid },
    { weight = 10, primary = hyper.floors.floor_plan_finegrid, secondary = hyper.floors.floor_plan_microgrid },
    -- Very rare because it's somewhat liable to end up as a big mostly empty room
    { weight = 5, primary = hyper.floors.floor_plan_omnigrid, secondary = hyper.floors.floor_plan_finegrid, tertiary = hyper.floors.floor_plan_microgrid }
  }

  local chosen = util.random_weighted_from("weight",weights)

  local gxm,gym = dgn.max_bounds()
  local build = {
    name = "Hyper Grid",
    build_fixture = {
      { pass = "Primary", type = "build", strategy = hyper.place.strategy_primary, max_rooms = 1, generators = {
        { generator = "code", paint_callback = chosen.primary, min_size_x = gxm-22, max_size_x = gxm-2, min_size_y = gym-22, max_size_y = gym-2, place_padding = 1 }
      } },
      { pass = "Secondary", type = "build", strategy = hyper.place.strategy_primary, max_rooms = 1, enabled = chosen.secondary ~= nil, generators = {
        { generator = "code", paint_callback = chosen.secondary, min_size_x = gxm-22, max_size_x = gxm-2, min_size_y = gym-22, max_size_y = gym-2, place_padding = 1 }
      } },
      { pass = "Tertiary", type = "build", strategy = hyper.place.strategy_primary, max_rooms = 1, enabled = chosen.tertiary ~= nil, generators = {
        { generator = "code", paint_callback = chosen.tertiary, min_size_x = gxm-22, max_size_x = gxm-2, min_size_y = gym-22, max_size_y = gym-2, place_padding = 1 }
      } }
    }
  }

  hyper.build_layout(_G,build)
  zonify.grid_fill_zones(1, "rock_wall")
}}
