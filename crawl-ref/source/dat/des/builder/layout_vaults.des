################################################################################
# Layouts for The Vaults (mumra's rewrite)
#
# This file contains map headers for picking the main layout. It mainly calls
# off to functions which are held in dlua/v_layouts.lua. The idea is that
# layout parameters (and importantly DEPTH, WEIGHT, etc.) can be easily tweaked
# in this header and all building logic happens in pure *.lua files.
#
# It uses all the mini vaults from layout_vaults_*.des and places these as
# rooms within structured areas. These vaults can use various to
# modify the way they are used within the layouts. A vault requires at least
# one of the following to even be used:
#
# - vaults_room
#     A standard room. These are the most commonly used type and therefore will
#     be seen a lot.
#     As such they should used standard monster/item placement (8s, 9s, etc.),
#     be extremely sparing with any obvious layout features, and be heavily
#     randomised.
#
# - vaults_rare
#     Rare rooms. These are more like normal branch minivaults. They can contain
#     more interesting features and they might
#
# - vaults_empty
#     Empty rooms. These provide furniture for areas that we otherwise want empty.
#     They should allow normal monster placement.
#
# - vaults_stairs_up
# - vaults_stairs_down
#     Up to three each will be placed of these room types. It is assumed
#     that the room has one staircase (and most should). If it does have more
#     you can include the tag layout_vaults_stairs_2 or layout_vaults_stairs_3
#     and set a low weight.
#     The builder will place rooms until it has enough stairs. Down stairs
#     will usually place 3 and only rarely 2 or 1, never on V:$-1. Up stairs
#     are less strict (and therefore more likely to ultimately be placed
#     in the corridors).
#
# In addition there are some specific modifier tags:
#
# - vaults_no_windows
#     The vault will never have windows.
#
# - vaults_orient_n
# - vaults_orient_e
# - vaults_orient_s
# - vaults_orient_w
#     Controls the orientation of the vault. A vault can have multiple of these
#     tags if it designed to be entered from multiple directions, in which case a
#     random orientation will be picked from the ones you have specified. If it
#     has none of these tags then it will be randomly rotated.
#     Specifically the tags mean "the vault can be entered from this direction".
#     It doesn't mean your vault won't be rotated, it just means that the door
#     will be placed at the correct size as you've designed it. So if you have
#     vaults_orient_n, but the vault is placed rotated 90 degrees clockwise, then
#     the door will be at the west.
#     These tags also control how additional sub-rooms might get attached onto
#     your room. If you have vaults_orient_n and vaults_orient_s then your vault
#     could get used as a corridor connecting one part of the layout to another
#     room.
#
# TODO: Should the documentation above be moved to a text file in docs or even
#       to general vault authoring docmentation? -mumra

default-depth: Vaults

# Include layout code
: require("dlua/v_layouts.lua")

################################################################################
# Ring Layout
#
# A square corridor with rooms around the edge and in the center. It is possible
# to lose
#
# The layouts all require no mirror or rotate, otherwise this messes with
# placement of the sub vaults, since we have to be quite specific with where
# we want them and how they are placed. This doesn't matter, because the
# layouts are built in a way that is already symmetrically random.
#
# We call parameterised functions to build the levels. This means we can vary
# the parameters with different DEPTH or WEIGHT settings to make certain
# layout styles more or less likely.
NAME: layout_vaults_ring
DEPTH: Vaults
WEIGHT: 90
ORIENT: encompass
CHANCE: 100%
TAGS: overwritable layout allow_dup unrand no_rotate no_pool_fixup no_hmirror no_vmirror chance_vaults
: build_vaults_ring_layout(_G, 5, 20)
MAP
ENDMAP

NAME: layout_vaults_cross
DEPTH: Vaults
WEIGHT: 90
ORIENT: encompass
CHANCE: 100%
TAGS: overwritable layout allow_dup unrand no_rotate no_pool_fixup no_hmirror no_vmirror chance_vaults
: build_vaults_cross_layout(_G, 5, 0.5)
MAP
ENDMAP

NAME: layout_vaults_big_room
DEPTH: Vaults
WEIGHT: 90
ORIENT: encompass
CHANCE: 100%
TAGS: overwritable layout allow_dup unrand no_rotate no_pool_fixup no_hmirror no_vmirror chance_vaults
: build_vaults_big_room_layout(_G, 20)
MAP
ENDMAP

NAME: layout_vaults_chaotic_city
DEPTH: Vaults
WEIGHT: 90
ORIENT: encompass
CHANCE: 100%
TAGS: overwritable layout allow_dup unrand no_rotate no_pool_fixup no_hmirror no_vmirror chance_vaults
: build_vaults_chaotic_city_layout(_G, 5, 0.5)
MAP
ENDMAP

NAME: layout_vaults_maze
DEPTH: Vaults
WEIGHT: 100
ORIENT: encompass
CHANCE: 100%
TAGS: overwritable layout allow_dup unrand no_rotate no_pool_fixup no_hmirror no_vmirror chance_vaults
: build_vaults_maze_layout(_G)
MAP
ENDMAP

NAME: layout_vaults_maze_snakey
DEPTH: Vaults
WEIGHT: 1000
ORIENT: encompass
CHANCE: 100%
TAGS: overwritable layout allow_dup unrand no_rotate no_pool_fixup no_hmirror no_vmirror chance_vaults
: build_vaults_maze_snakey_layout(_G)
MAP
ENDMAP

NAME: layout_vaults_maze_bifur
DEPTH: Vaults
WEIGHT: 1000
ORIENT: encompass
CHANCE: 100%
TAGS: overwritable layout allow_dup unrand no_rotate no_pool_fixup no_hmirror no_vmirror chance_vaults
: build_vaults_maze_bifur_layout(_G)
MAP
ENDMAP
