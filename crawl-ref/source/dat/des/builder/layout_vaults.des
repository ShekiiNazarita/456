################################################################################
# Layouts for The Vaults (mumra's rewrite)
#
# This file contains map headers for picking the main layout. It mainly calls
# off to functions which are held in dlua/v_*.lua
#
# It uses all the mini vaults from layout_vaults_*.des and places these as
# rooms within structured areas. These vaults can use various to
# modify the way they are used within the layouts. A vault requires at least
# one of the following to even be used:
#
# - layout_vaults_room
#     A standard room. These are the most commonly used type and therefore will
#     be seen a lot.
#     As such they should used standard monster/item placement (8s, 9s, etc.),
#     be extremely sparing with any obvious layout features, and be heavily
#     randomised.
#
# - layout_vaults_rare
#     Rare rooms. These are more like normal branch minivaults. They can contain
#     more interesting features and they might
#
# - layout_vaults_stairs_up
# - layout_vaults_stairs_down
#     Up to three each will be placed of these room types. It is assumed
#     that the room has one staircase (and most should). If it does have more
#     you can include the tag layout_vaults_stairs_2 or layout_vaults_stairs_3
#     and set a low weight.
#     The builder will place rooms until it has enough stairs. Down stairs
#     will usually place 3 and only rarely 2 or 1, never on V:$-1. Up stairs
#     are less strict (and therefore more likely to ultimately be placed
#     in the corridors).
#
# In addition there are some specific modifier tags:
#
# - layout_vaults_no_windows
#     The vault will never have windows so the door must be opened.
#
# - layout_vaults_rotate
#     The vault can be placed in any rotation and be flipped
#
# TODO: Should the documentation above be moved to a text file in docs or even
#       to general vault authoring docmentation? -mumra

default-depth: Vaults

# Include builder code
: require("dlua/v_main.lua")

################################################################################
# Ring Layout
#
# A square corridor with rooms around the edge and in the center. It is possible
# to lose
#
# The layouts all require no mirror or rotate, otherwise this messes with
# placement of the sub vaults, since we have to be quite specific with where
# we want them and how they are placed. This doesn't matter, because the
# layouts are built in a way that is already symmetrically random.
#
# We call parameterised functions to build the levels. This means we can vary
# the parameters with different DEPTH or WEIGHT settings to make certain
# layout styles more or less likely.
NAME: layout_vaults_ring
DEPTH: Vault
WEIGHT: 90
ORIENT: encompass

TAGS: overwritable layout allow_dup unrand no_rotate no_pool_fixup no_hmirror no_vmirror
{{
  -- The build functions return a data object which tells the room placer about walls it
  -- can use
  local data = build_vaults_ring_level(_G)
  -- Place the actual rooms (more parameters required)
  place_vaults_rooms(_G,data)
MAP
ENDMAP

