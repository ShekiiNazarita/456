{{

-- This is an arena. If you kill everything before the time limit you win gold,
-- arena points, and get some extra time to rest. Shops are very important here.
-- When the last monster spawns, you get about 60 turns before the round ends.
--
-- Difficulty ramps up quickly. The first boss (round 5) is hard if you don't
-- use items or god powers. There's enough gold at the start to get a decent
-- item or two by round 5. The first two bosses tend to die fast. Later ones
-- are a different matter.
--
-- Every fifth fight is a boss. You get a rune after them. Unlike normal rounds,
-- they will end as soon as you kill the boss. Many of them have their HP/HD
-- messed with. After round 27, bosses come every 3rd round. The reward for
-- killing a boss is an "acquire any" item.
--
-- 1/5 of all normal rounds are lightning rounds. To win, you only need to
-- survive. Killing all the monsters will be nearly impossible because of how
-- fast they spawn.
--
-- After round 27 the orb will drop, but picking it up is optional. You can do
-- so to win, or for massive arena points. Round 57 is the final one.
-- That round will give you the 15th rune if you survive, but it's designed to
-- be almost impossible without extreme tactics (like using tomb cards or quad
-- damage). It is much harder than anything you will find in a zig.
--
-- Arena points are just for style. The formula is:
--      (1 + (enemies_killed)) * (round number) * (multiplier)
-- with "multiplier" getting +1 for every round you fully clear (kill everyone)
-- and +2 for boss kills. It resets to 1 if you fail to clear a round, and 27 if
-- you are carrying the orb. Therefore, points are mostly skill, but there is
-- a substantial luck factor.
--
-- As for gold, the amount you gain is based on your score multiplier (up to
-- x5) and the current round number. Enemies killed is not a factor.
--
-- Killing all the enemies can be very hard, and a lot of luck is involved. You
-- only get about 60 turns to kill the last enemy, and it might spawn in a far
-- away spot. This is intentional.
--
-- XXX: It would be good if arena points override real points, multiplied by
--      runecount if you win.
--
-- XXX: TRJ doesn't work.
--
-- XXX: Zin is overpowered.

function arena_sprint_is_boss_round(round_id)
    return (round_id < 27 and round_id % 5 == 0) or (round_id > 27 and round_id % 3 == 0)
end


function arena_sprint_spawn_enemies(data)
    local sp = dgn.find_marker_positions_by_prop(data.spawn_dir, 1)
    for _, pos in ipairs(sp) do
        if data.num_spawned >= data.round_enemies then
            break
        end
        if crawl.one_chance_in(#sp) then
            if arena_sprint_is_boss_round(data.round_id) and not data.boss_spawned then
                local dude = dgn.create_monster(pos.x, pos.y, data.monster_set[2])
                if dude then
                    dude.set_prop("boss_mons", 1)
                    dude.beh = mons.behaviour("wander")
                    data.num_spawned = data.num_spawned + 1
                    data.boss_spawned = true
                    dgn.apply_area_cloud(pos.x, pos.y, 10, 10, 1, 1,
                                         "translocational energy", "other", -1)
                    crawl.dpr("Spawned " .. crawl.grammar(dude.name, "a") .. " (" .. data.spawn_timer .. ").")
                end
            else
                local dude = dgn.create_monster(pos.x, pos.y, data.monster_set[1])
                if dude then
                    if dude.experience > 0 then
                        -- Plants, fungi, etc, don't count
                        dude.set_prop("arena_slave", 1)
                        data.num_spawned = data.num_spawned + 1
                    end
                    dude.beh = mons.behaviour("wander")
                    dgn.apply_area_cloud(pos.x, pos.y, 10, 10, 1, 1,
                                         "translocational energy", "other", -1)
                    crawl.dpr("Spawned " .. crawl.grammar(dude.name, "a") .. " (" .. data.spawn_timer .. ").")
                end
            end
        end
    end
end


function arena_sprint_end_round(data)
    data.between_rounds = true

    local you_x, you_y = you.pos()

    -- Place orb / rune
    if arena_sprint_is_boss_round(data.round_id) then
        crawl.mpr("A rune of Zot has appeared.", "orb")
        dgn.create_item(you_x, you_y, data.monster_set[3])
        data.time_left = 1500 + crawl.random2(500)
    elseif data.round_id == 27 then
        crawl.mpr("The Orb of Zot has appeared!", "orb")
        local p = dgn.find_marker_positions_by_prop("centre_point", 1)[1]
        dgn.create_item(p.x, p.y, "orb of zot")
        data.time_left = 1000 + crawl.random2(250)
    end

    -- Guarantee at least 10 turns of rest
    data.time_left = math.max(100, data.time_left)

    -- Scoring
    local style_gain = 1 + data.num_killed * data.round_id
    local gold_gain = 10 * data.round_id

    if you.have_orb() and data.style_mult < 27 then
        data.style_mult = 27
    end

    if data.num_killed >= data.round_enemies or data.spawn_rate == 1 then
        data.style_mult = data.style_mult + 1
        if arena_sprint_is_boss_round(data.round_id) then
            crawl.mpr("<yellow>You have won a prize for killing the boss!</yellow>", "warning")
            data.style_mult = data.style_mult + 1
            -- Reward for boss kills. Doesn't come identified...
            dgn.create_item(you_x, you_y, "acquire any")
        else
            crawl.mpr("<yellow>Victory!</yellow>", "warning")
        end
        crawl.mpr("Score multiplier: " .. data.style_mult .. "x",
                  "intrinsic_gain")
        -- Gold multiplier is capped at 5x
        gold_gain = gold_gain * math.min(data.style_mult, 5)
    else
        if you.have_orb() and data.style_mult > 27 then
            data.style_mult = 27
            crawl.mpr("Score multiplier reset to 27x", "intrinsic_gain")
        elseif data.style_mult > 1 then
            crawl.mpr("You lost your score multiplier.", "intrinsic_gain")
            data.style_mult = 1
        end
    end

    if style_gain > 0 then
        data.style_points = data.style_points + (style_gain * data.style_mult)
        if data.style_points > 1 then
            crawl.mpr("You now have " .. data.style_points .. " arena points " ..
                      "(gained " .. style_gain .. ").", "intrinsic_gain")
        else
            crawl.mpr("You now have 1 arena point.", "intrinsic_gain")
        end
        crawl.take_note("Arena points: " .. data.style_points)
    end

    if gold_gain > 0 then
        dgn.create_item(you_x, you_y, "gold q:" .. gold_gain)
    end

    -- This dismisses *every* monster on the entire level, including
    -- your allies.
    local gxm, gym = dgn.max_bounds()
    for p in iter.rect_iterator(dgn.point(1, 1), dgn.point(gxm - 2, gym - 2)) do
        local dude = dgn.mons_at(p.x, p.y)
        if dude then
            dgn.apply_area_cloud(p.x, p.y, 5, 10, 1, 1,
                                 "translocational energy", "other", 10)
            dude.dismiss()
        end
    end

    if data.round_id == 57 then
        crawl.mpr("The arena falls silent. Everyone but you is dead.")
        crawl.mpr("Frankly, I didn't think it was possible to get this far.")
        crawl.mpr("Congratulations, champion.")
        crawl.mpr("ARENA POINT TOTAL: " .. data.style_points, "intrinsic_gain")
        crawl.take_note("ARENA POINT TOTAL: " .. data.style_points)
        data.finished = true
    else
        data.round_id = data.round_id + 1
    end
    crawl.more()
end


function arena_sprint_ominous_countdown(time_left, waiting)
    if not waiting then
        if time_left > 0
            and (time_left == 500
                or time_left == 200
                or time_left == 150
                or time_left == 100
                or (time_left <= 50 and time_left % 10 == 0))
        then
            crawl.mpr(time_left / 10 .. "...", "duration")
        elseif time_left <= 0 then
            crawl.mpr("Time's up!", "duration")
            --crawl.more()
            crawl.mpr("The arena falls silent.")
        end
    elseif time_left == 20 and waiting then
        -- There was more of a countdown here, but it felt too spammy.
        crawl.mpr("<yellow>Get ready!</yellow>", "warning")
    end
end


function arena_sprint_get_monster_set(round, boss)
    if not boss then
        if round == 27 then
            return {"base draconian / place:Zot:5 / orb guardian / tiamat w:3"}
        end

        -- Some of these monspecs are borrowed from zig sprint... overall though,
        -- this isn't zig-like. The monster sets tend to be small and focused.
        local mon_set = {
            "place:D:2 / place:D:4 / w:2 sigmund / w:1 jessica / w:1 terence ",
            "goblin / hobgoblin / kobold / big kobold / ijyb w:3 / pikel w:2",
            "rat / quokka / grey rat / green rat / porcupine / w:2 orange rat / w:3 purgy",
            "ball python / adder w:15 / water moccasin w:5",
            "orc w:40 / orc wizard w:8 / orc priest w:5 / w:5 orc warrior / blork the orc w:1",
            "gnoll w:35 / hound w:5 / gnoll sergeant / gnoll shaman / crazy yiuf w:3",
            "lesser demon w:30 / grinder w:2 / w:1 eustachio",
            "small zombie / small skeleton / wight / necrophage / large zombie w:5 /\
             large skeleton w:5 / shadow w:5 / phantom w:5 / w:1 josephine",
            "worker ant / soldier ant w:5 / queen ant w:2 / ant larva w:1",
            "giant frog w:20 / blink frog w:6 / spiny frog w:6 / prince ribbit w:2",
            "ogre w:35 / two-headed ogre / ogre mage w:5 / w:1 erolcha",
            "killer bee w:20 / w:5 queen bee / w:5 bumblebee / w:1 killer bee larva",
            "jackal w:1 / hound w:5 / war dog w:20 / hell hound w:7 / w:3 grum",
            "giant eyeball / goliath beetle",  -- Heh, heh...
            "place:D:9 w:15 / place:D:11 w:15 / w:2 edmund / w:2 erica / w:2 harold /\
                w:2 maurice / w:1 rupert / w:2 sonja / w:1 psyche / w:1 joseph",
            "blue devil / iron devil w:5 / orange demon / red devil w:5 / rotting devil /\
             sixfirhy w:5 / hellwing",
            "deep elf priest always_corpse",
            "griffon / hippogriff / w:5 minotaur / w:5 harpy",
            "spiny worm w:5 / giant leech / worm / brain worm w:5",
            "place:Elf",
            "jelly w:4 / brown ooze w:1",
            "w:20 place:Orc:4 / orc wizard / orc sorcerer w:3 / orc warrior / orc knight /\
              orc warlord w:3 / orc priest / orc high priest w:4 / urug w:3",
            "centaur w:15 / centaur warrior w:5 / nessos w:2",
            "troll / deep troll w:2 / rock troll / iron troll w:2",
            "w:20 mummy / guardian mummy / w:1 mummy priest / w:5 menkaure",
            "wraith w:20 / w:5 eidolon / phantasmal warrior / w:2 nergalle",
            "kobold name:kamikaze_kobold n_rpl n_noc n_des perm_ench:inner_flame",
            "place:D:18 w:12 / place:D:20 w:12 / w:1 louise / w:1 norris /\
                w:1 donald / w:1 maud",
            "place:Swamp",
            "place:Snake",
            "place:Lair:8 w:300 / hydra / catoblepas / dire elephant / gastronok w:5",
            "necrophage / rotting hulk / w:5 ghoul / bog body",
            "vampire mosquito / red wasp w:5 / yellow wasp / giant firefly",
            "centaur / yaktaur / cyclops / centaur warrior w:5 /\
             yaktaur captain w:2",
            "water elemental / fire elemental / air elemental /\
            earth elemental / iron elemental w:5",
            "w:5 fire crab / mottled dragon / flaming corpse / fire drake",
            "hydra simulacrum / stone giant simulacrum / golden dragon simulacrum / spriggan simulacrum",
            "brain worm",
            "dwarf name:drunken n_adj n_des n_noc perm_ench:confusion",
            "jumping spider / sky beast / blink frog",
            "moth of wrath / w:20 hill giant",
            "ugly thing w:20 / very ugly thing / kirke w:2",
            "common demon w:25 / frances w:1",
            "cacodemon / imp / hell knight / flying skull / human zombie / orb spider", -- Doom
            "boulder beetle",
            "redback / sea snake w:3",
            "glowing shapeshifter",
            "giant spore",
            "skeletal warrior / w:5 skeletal warrior ; blowgun . needle ego:confusion",
            "shining eye",
            "place:Dwarf:$ w:20 / wiglaf w:1",
            "catoblepas",  -- This is for Wensley
            "hungry ghost / harpy",
            "unseen horror / lorocyproca / shadow wraith / w:2 ghost moth",
            "orc warlord col:magenta name:(purple_team) n_suf n_noc /\
             orc warlord col:green name:(green_team) n_suf n_noc att:friendly",
            "naga / naga mage / naga warrior / greater naga / guardian serpent",
            "vampire / w:5 vampire knight / vampire mage / w:1 jory",
            "yak / sheep / death yak / apis / catoblepas",
            "place:D:27",
            "place:Shoals:5 w:70 / merfolk javelineer / merfolk impaler /\
                 merfolk aquamancer",
            "place:Spider:5 w:80 / ghost moth w:5 / yellow wasp / red wasp /\
                 moth of wrath w:5 / emperor scorpion",
            "wraith / wight / phantasmal warrior / rotting hulk / skeletal warrior /\
             vampire / ghoul / mummy / flayed ghost / bone dragon / death cob /\
             profane servitor", -- Yred
            "eldritch tentacle spells:malign_gateway",
            "dancing weapon",
            "swamp dragon / green death / green draconian",
            "ogre mage / w:5 deep elf mage / vampire mage / naga mage / w:1 frederick",
            "small zombie w:5 / small skeleton w:5 / large zombie w:5 /\
                 large skeleton w:5 / skeletal warrior / ghoul w:7 /\
                 necrophage w:5 / vampire w:5 / vampire mage w:5 /\
                 vampire knight / lich w:5 / ancient lich w:2 / shadow /\
                 wight / necromancer",
            "hell knight / w:5 necromancer / w:1 margery",
            "dragon / ice dragon / storm dragon / w:5 shadow dragon /\
                w:5 golden dragon / w:1 xtahua",
            "w:5 killer klown / chaos spawn / spatial vortex",
            "place:D:27 col:magenta name:(purple_team) n_suf n_noc /\
              place:D:27 col:green name:(green_team) n_suf n_noc att:friendly",
            "siren / mermaid / giant orange brain / eidolon",
            "yaktaur / yaktaur captain w:5",
            "deep dwarf berserker / spriggan berserker / snorg w:1 /\
             w:20 deep troll name:berserker n_suf n_des n_noc spells:berserker_rage",
            "place:Orc:4 w:70 / orc knight / orc high priest w:5 / orc sorcerer w:5 /\
               stone giant / orc warlord / moth of wrath w:3 / w:3 saint roka",
            "golden eye / shining eye / giant eyeball / eye of devastation /\
                great orb of eyes / eye of draining / w:5 ophan",
            "orb spider",
            "death cob / death yak / death drake w:5 / deep elf death mage /\
             deep dwarf death knight / death ooze / green death",
            "clay golem / stone golem / earth elemental / iron golem /\
               crystal golem / stone giant / iron dragon /\
               w:8 quicksilver dragon / w:1 the iron giant",
            "ball lightning",
            "jelly w:5 / giant amoeba / brown ooze /\
               giant eyeball w:2 / golden eye w:4 / eye of draining w:2 /\
               eye of devastation w:5 / shining eye w:4 / acid blob /\
               death ooze / azure jelly / great orb of eyes w:4 /\
               giant orange brain w:2",
            "paladin / vault guard / necromancer / hell knight / wizard",
            "stone giant / fire giant / frost giant / w:5 ettin / w:5 titan /\
             hill giant / w:2 chuck",
            "place:Hell",
            "place:Forest:5 w:50 / spriggan defender /\
               spriggan air mage / spriggan druid w:3 / spriggan berserker",
            "vault guard w:50 / ancient lich w:5 / lich / yaktaur /\
                 yaktaur captain w:3 / stone giant / shadow dragon /\
                 titan w:1",
            "curse toe / w:15 wandering mushroom / w:1 murray",
            "ghost moth / w:30 lorocyproca / eye of draining",
            "pandemonium lord / place:Abyss w:500",
            "naga warrior / greater naga / tentacled monstrosity / ball python w:1",
            "reaper / hell beast / geryon w:1",
            "base draconian w:9 / w:1 nonbase draconian",
            "place:Tomb:3 w:70 / sphinx w:20 / greater mummy",
            "place:Tar:7 w:500 / shadow fiend / reaper / shadow dragon",
            "place:Dis:7 w:500 / hell sentinel / iron dragon / quicksilver dragon",
            "place:Geh:7 w:500 / brimstone fiend / balrug / hellion",
            "place:Coc:7 w:500 / ice fiend w:15 / blizzard demon w:15",
            "insubstantial wisp / air elemental / vapour / spriggan air mage /\
               storm dragon / titan / electric golem / nikola w:4",
            "ice beast / polar bear / white imp / large simulacrum /\
               freezing wraith / ice devil / ice dragon / frost giant /\
               ice fiend w:5 / blizzard demon",
            "fire vortex / hell hound / hell hog / fire elemental /\
               fire drake / efreet / dragon / fire giant / orb of fire w:5 /\
               balrug / w:1 azrael",
            "neqoxec",
            "deep elf high priest / deep elf demonologist / deep elf annihilator /\
             deep elf sorcerer / deep elf death mage / deep elf blademaster /\
             deep elf master archer",
            "tormentor",
            "lich col:magenta name:(purple_team) n_suf /\
              lich col:green name:(green_team) n_suf att:friendly",
            "lesser demon / common demon w:5 / any demon / pandemonium lord w:5",
            "hellion / hell sentinel / hell beast / hell hog / hell knight /\
             hell hound / hellephant / hellwing / w:2 nellie",
            "lich / w:5 ancient lich / w:5 unborn deep dwarf / w:2 boris",
            "fire crab",
            "profane servitor w:20 / angel / daeva / cherub / seraph w:5",
            "giant eyeball w:5 / ettin",
            "daeva / angel / cherub / pearl dragon / ophan / \
                 silver star / apis / paladin / phoenix",
            "executioner / w:2 death drake / w:1 ignacio",
            "ettin w:20 / moth of wrath",
            "nonbase draconian w:9 / base draconian w:1",
            "pandemonium lord / any demon w:50",
            -- 115. Max possible at round 26.

            -- The ones after this point are meant to be completely insane. They
            -- are also start getting a lot rarer.
            "daeva / w:15 angel",
            "ancient lich / w:5 lich",
            "greater mummy / mummy priest / guardian mummy",
            "air elemental name:greater n_adj perm_ench:tornado col:lightcyan / air elemental w:20",
            "elephant slug col:magenta name:orb_slug n_rpl n_des n_spe spells:orb_of_destruction",
            "brimstone fiend / ice fiend / shadow fiend / executioner / hell sentinel",
            "titan / spriggan air mage / blizzard demon / w:20 sky beast",
            "sphinx / place:Tomb:3",
            "orb of fire / w:5 orb of fire name:orb_of_ice n_rpl n_des spells:ice_storm col:lightblue /\
              orb of fire name:orb_of_electricity n_rpl n_des spells:chain_lightning col:yellow /\
              w:5 silver star",
            "hellion / efreet w:20"
            --125 total.
        }

        -- The further you get, the greater the randomness. Difficulty spikes
        -- after each of the first three runes, then progresses steadily.
        local depth = 0
        local ood = crawl.one_chance_in(4)

        repeat
            if round == 1 and crawl.coinflip() then
                depth = 1
            elseif round <= 2 then
                depth = round + crawl.random2(round + 5)
            elseif round <= 5 then
                depth = round + crawl.random2(round * 2 + 5)
            elseif round <= 10 then
                depth = round + crawl.random2(round * 3)
            elseif round <= 15 then
                depth = round + crawl.random2(round * 4)
            else
                depth = round + crawl.random2(65)
            end

            if ood then
                depth = depth + crawl.random2(round)
            end
        until depth <= #mon_set
        crawl.dpr("Picking monster set " .. depth .. " of " .. #mon_set .. ": " ..
                  mon_set[depth])

        return {mon_set[depth]}
    else
        local which_boss = math.floor(math.min(round, 27) / 5)
        if round >= 27 then
            which_boss = which_boss + math.floor((round - 27) / 3)
        end
        return dgn.persist.arena_sprint_boss_set[which_boss]
    end
end


function arena_sprint_init_boss_table()
    -- This is called once when the map is loaded, and pre-determines the order
    -- of boss matches.
    --
    -- For the first two fights, there are five possible bosses per rune. The
    -- next three have two possible per rune. The rest just have one (but the
    -- order is random). The reason for doing it this way is because the early
    -- bosses will be the ones you see the most often, so they call for the
    -- most variety.

    local bs = {}
    if crawl.coinflip() then
        bs[1] = {"place:Snake", "aizul hd:10 hp:120 /\
                 naga warrior name:naga_warlord n_rpl n_des n_noc col:cyan hp:140 /\
                 anaconda name:giant n_adj n_noc hp:140 col:lightred /\
                 black mamba name:dark n_adj n_noc col:darkgrey hp:130 /\
                 naga mage name:naga_archmage n_rpl n_des n_noc col:magenta hp:120",
                 "serpentine rune of zot"}
    else
        bs[1] = {"place:Swamp", "the lernaean hydra /\
                 swamp dragon name:elder n_adj n_noc col:cyan hp:140 /\
                 swamp drake name:stinky n_adj n_noc col:cyan hp:135 /\
                 wizard name:witch n_rpl n_des n_noc col:green hp:125 \
                    spells:mephitic_cloud;.;summon_hydra;.;invisibility;teleport_self /\
                 bog body name:big n_adj n_noc col:blue hp:150",
                 "decaying rune of zot"}
    end

    if crawl.coinflip() then
        bs[2] = {"place:Spider", "arachne hp:250 /\
                 wolf spider name:dire n_adj n_noc col:blue hp:250 /\
                 emperor scorpion name:ancient n_adj n_noc hp:215 /\
                 ghost moth name:greater n_adj n_noc col:lightmagenta hp:215 /\
                 jumping spider name:phase_spider n_rpl n_des never_corpse \
                    col:lightgreen spells:teleport_self hp:225",
                 "gossamer rune of zot"}
    else
        bs[2] = {"place:Shoals", "polyphemus hp:350 / ilsuiw hp:250 /\
                 siren name:demonic n_adj n_noc col:lightmagenta hp:265 spells:malign_gateway /\
                 harpy name:queen n_suf n_noc col:lightgreen hp:225 /\
                 manticore name:hardcore n_adj n_noc col:lightred hp:400",
                 "barnacled rune of zot"}
    end

    if crawl.coinflip() then
        -- Elementalist boss is from mu_elemental_laboratory
        bs[3] = {"place:Elf w:300 / deep elf sorcerer / deep elf blademaster /\
                 deep elf master archer / deep elf annihilator / deep elf high priest",
                 "fannar hp:350 hd:14 /\
                 col:flash deep elf sorcerer hp:400 \
                     name:deep_elf_elementalist n_rpl n_des n_noc tile:mons_deep_elf_elementalist \
                     spells:iron_shot;summon_air_elementals;sticky_flame_range;summon_water_elementals;haste;blink actual_spells \
                     ; robe ego:fire_resistance race:elven | \
                     robe ego:cold_resistance race:elven | \
                     robe ego:resistance race:elven . dagger ego:freezing race:elven | \
                     dagger ego:flaming race:elven | dagger ego:electrocution race:elven",
                 "elven rune of zot"}
    else
        bs[3] = {"place:Forest:5 w:50 / spriggan druid w:2 / spriggan air mage w:5 /\
                 spriggan berserker w:5", "the enchantress hp:220 / agnes hp:400",
                 "mossy rune of zot"}
    end

    bs[4] = {"place:Slime", "dissolution hp:375 /\
             acid blob name:sulfuric n_adj col:white hp:400 /\
             great orb of eyes name:greater_orb_of_eyes n_rpl n_des n_noc col:green hp:600",
             "slimy rune of zot"}
    bs[5] = {"vault guard / place:Vaults", "mennas hp:200 / mara hp:300 /\
             vault guard name:captain n_suf n_noc col:lightcyan hp:800 hd:26",
             "silver rune of zot"}
    if crawl.coinflip() then
        bs[5], bs[4] = bs[4], bs[5]
    end

    bs[6] = {"place:Dis:7", "dispater", "iron rune of zot"}
    bs[7] = {"place:Tar:7", "ereshkigal hp:350", "bone rune of zot"}
    bs[8] = {"place:Geh:7", "asmodeus", "obsidian rune of zot"}
    bs[9] = {"place:Coc:7", "antaeus", "icy rune of zot"}
    -- Pan sets are taken directly from pan.des
    bs[10] = {"small abomination / small abomination / large abomination /\
              large abomination / neqoxec / neqoxec / cacodemon /\
              cacodemon / chaos spawn / chaos spawn", "mnoleg", "glowing rune of zot"}
    bs[11] = {"hellwing / smoke demon / smoke demon / sixfirhy /\
              Green Death / blizzard demon / smoke demon / hellwing /\
              Green Death / hellwing", "lom lobon", "magical rune of zot"}
    bs[12] = {"efreet / efreet / orange demon / orange demon /\
              sun demon / sun demon / ynoxinul / ynoxinul / balrug / balrug",
              "cerebov", "fiery rune of zot"}
    bs[13] = {"small skeleton / small skeleton / large skeleton /\
              large skeleton / soul eater / soul eater / lorocyproca /\
              executioner / executioner / executioner", "gloorx vloq",
              "dark rune of zot"}
    bs[14] = {"guardian mummy w:15 / mummy priest w:3 / greater mummy w:2",
               "khufu hp:400", "golden rune of zot"}
    -- Shuffle the above 10
    for i = 14, 7, -1 do
        local r = crawl.random_range(6, i)
        bs[i], bs[r] = bs[r], bs[i]
    end

    -- who run barter town
    bs[15] = {"pandemonium lord",
              "ancient lich name:Master_Blaster n_rpl hd:30 hp:1000 col:lightmagenta \
              spells:fire_storm;ice_storm;hellfire;miasma;teleport_self", "demonic rune of zot"}
    return bs
end


function thing_do_arena(data, triggerable, triggerer, marker, ev)

    if data.finished then
        return
    end

    -- Count kills
    if triggerer.type == "monster_dies" and not data.between_rounds then
        local mons = dgn.mons_from_mid(ev:arg1())
        if mons.has_prop("arena_slave") then
            data.num_killed = data.num_killed + 1
        elseif mons.has_prop("boss_mons") then
            data.num_killed = data.round_enemies
        end
        if data.num_killed >= data.round_enemies then
            -- You win.
            arena_sprint_end_round(data)
        end
        return
    end

    -- Pause the timer if you use step from time.
    if you.pos() == 0 then
        return
    end

    -- Pause if you've been banished to the Abyss, or are otherwise absent for
    -- more than 10 turns, somehow.
    if ev:ticks() >= 100 then
        return
    end

    if triggerer.type == "turn" and triggerer.sub_type == "countdown" then
        if data.between_rounds then
            data.time_left = data.time_left - 1
            arena_sprint_ominous_countdown(data.time_left, data.between_rounds)

            if data.time_left <= 0 then
                crawl.mpr("ROUND " .. data.round_id .. "!", "warning")
                if data.round_id == 57 then
                    crawl.mpr("FINAL BOSS!", "warning")
                elseif arena_sprint_is_boss_round(data.round_id) then
                    crawl.mpr("BOSS ROUND!", "warning")
                elseif data.round_id == 27 then
                    crawl.mpr("ZOT ROUND!", "orb")
                else
                    crawl.mpr("FIGHT!", "warning")
                end

                data.time_left = 510 + crawl.random2(200)

                -- Non-boss rounds have more enemies, and a more random amount
                data.round_enemies = 5 + crawl.div_rand_round(data.round_id, 2)
                if not arena_sprint_is_boss_round(data.round_id) then
                    data.round_enemies = data.round_enemies + crawl.random2(crawl.div_rand_round(data.round_id, 3))
                end
                crawl.dpr("Number to spawn: " .. data.round_enemies .. ".")

                -- 1/5 chance of a normal round being a lightning round
                if data.round_id ~= 27 and data.round_id ~= 1 and crawl.one_chance_in(5)
                    and not arena_sprint_is_boss_round(data.round_id)
                then
                    data.spawn_rate = 1
                    crawl.mpr("LIGHTNING ROUND!", "warning")
                elseif arena_sprint_is_boss_round(data.round_id) then
                    data.spawn_rate = math.ceil(2000 / data.round_enemies)
                else
                    data.spawn_rate = math.ceil((1000 + crawl.random2(500)) / data.round_enemies)
                end
                crawl.dpr("Spawn rate: " .. data.spawn_rate .. ".")
                data.spawn_timer = 0

                data.num_killed = 0
                data.num_spawned = 0
                data.boss_spawned = false
                data.monster_set = arena_sprint_get_monster_set(data.round_id,
                                                                arena_sprint_is_boss_round(data.round_id))

                -- 33% chance of picking a specific direction to spawn from, else
                -- spawn from all four directions. These "tension rounds" are
                -- easier than normal ones, if you plan on evading them.
                if crawl.one_chance_in(3) then
                    local directions = {"north", "east", "south", "west"}
                    data.spawn_dir = directions[crawl.random2(#directions) + 1]
                    crawl.mpr("You sense a tension in the " .. data.spawn_dir .. ".")
                else
                    data.spawn_dir = "spawn_point"
                end

                data.between_rounds = false
            end
        else -- Active round
            if data.num_spawned >= data.round_enemies or data.spawn_timer > 3000 then
                -- Final countdown... starts at just above 50 turns to go. Triggers
                -- when all enemies spawn or when 300 turns is passed. The latter
                -- mainly happens when the portals get blocked.
                data.time_left = data.time_left - 1
                arena_sprint_ominous_countdown(data.time_left, data.between_rounds)
            else
                data.spawn_timer = data.spawn_timer + 1
            end

            if data.spawn_timer % data.spawn_rate == 0 or data.num_spawned == 0 then
                arena_sprint_spawn_enemies(data)
            end

            if data.time_left <= 0 then
                arena_sprint_end_round(data)
            end
        end
    end
end

}}

NAME:       arena_sprint
TAGS:       sprint no_item_gen no_trap_gen no_monster_gen no_rotate no_hmirror no_vmirror
DESC:       Sprint VI: "Thunderdome"
ORIENT:     encompass
LROCKTILE:  wall_hall
{{
    local arena_marker = TriggerableFunction:new {
        data = {
            num_killed = 0,         -- How many you have killed
            num_spawned = 0,        -- How many have spawned so far
            boss_spawned = false,   -- Has a boss spawned?
            round_id = 1,           -- Current round id
            round_enemies = 0,      -- How many you need to fight
            spawn_rate = 0,         -- How quickly monsters spawn
            spawn_timer = 0,        -- Counter for monster spawning
            time_left = 60,         -- How much time is left
            between_rounds = true,  -- Are we waiting for the next round?
            finished = false,       -- You somehow beat round 57
            monster_set = {},       -- Our monster set
            style_points = 0,       -- This measures how much of a pro you are
            style_mult = 1,         -- ditto
            spawn_dir = ""          -- Which spawn points to use?
        },
        func = "thing_do_arena",
        repeated = true
    }

    arena_marker:add_triggerer(DgnTriggerer:new {
        type = "monster_dies",
        -- Note: target is "any", but we don't do anything unless it has
        -- the "arena_slave" or "boss_mons" property
        target = "any"
    })

    arena_marker:add_triggerer(DgnTriggerer:new {
        type = "turn",
        delay = 1
    })

    dgn.persist.arena_sprint_boss_set = arena_sprint_init_boss_table()

    lua_marker("{", arena_marker)
    lua_marker("{", portal_desc { centre_point = 1 })
    lua_marker("T", portal_desc { spawn_point = 1, north = 1 })
    lua_marker("U", portal_desc { spawn_point = 1, east = 1 })
    lua_marker("V", portal_desc { spawn_point = 1, south = 1 })
    lua_marker("W", portal_desc { spawn_point = 1, west = 1 })
    lua_marker("Y", portal_desc { spawn_point = 1, north = 1, west = 1 })
    lua_marker("Z", portal_desc { spawn_point = 1, north = 1, east = 1 })
    lua_marker("!", portal_desc { spawn_point = 1, south = 1, west = 1 })
    lua_marker("?", portal_desc { spawn_point = 1, south = 1, east = 1 })

    set_feature_name("permadry_fountain", "spawn point")

    crawl.mpr("<cyan>You have entered the arena! You will win if you kill everything.\n" ..
              "If it is a boss round, you only need to kill the boss in order to win.\n" ..
              "If it is a lightning round, you only need to survive!</cyan>")
}}
# No ash or beogh, although both gods are still allowed (just harder to get).
# Both would be rather useless if you picked them, though. Positions are random,
# and you don't have enough time to reach an altar before the game starts.
NSUBST: B = 0 / 1 / 2 / 3 / 4 / 5 / 6 / 7 / 8 / 9 / h / i / j / k / l / n
KFEAT:  0 = altar_zin
KFEAT:  1 = altar_the_shining_one
KFEAT:  2 = altar_lugonu
KFEAT:  3 = altar_kikubaaqudgha
KFEAT:  4 = altar_yredelemnul
KFEAT:  5 = altar_xom
KFEAT:  6 = altar_vehumet
KFEAT:  7 = altar_okawaru
KFEAT:  8 = altar_makhleb
KFEAT:  9 = altar_sif_muna
KFEAT:  h = altar_trog
KFEAT:  i = altar_nemelex_xobeh
KFEAT:  j = altar_elyvilon
KFEAT:  k = altar_cheibriados
KFEAT:  l = altar_jiyva
KFEAT:  n = altar_fedhas
KITEM:  { = scroll of blinking q:3, scroll of fog q:3 ident:all, \
            potion of heal wounds q:3, potion of speed q:3, \
            wand of fire charges:10 ident:all, \
            scroll of unholy creation ident:all, gold q:200
KFEAT:  { = {

# Shops have the same prices and (largely) the same items. Early on, you can
# only afford a few things. If you make it far enough, you'll be getting enough
# gold to buy anything you want.
#
# One shop sells experience potions for 500 gold. Later on, this is a good price.
# Early on it's a bit of a trap - that 500 can buy a lot of crucial items, and
# early experience levels come quickly enough that the potions aren't worth it.
#
# For your convenience, shop positions are not randomized, and are roughly
# grouped by category.

KFEAT:  C = scroll shop type:Identification suffix:Station count:17 greed:25 ; scroll of identify q:3
KFEAT:  D = book shop type:Must-Have suffix:Magic greed:14 count:12 use_all ; \
            book of summonings | book of spatial translocations | book of enchantments |\
            book of death | book of war chants | book of the sky | book of the warp |\
            book of the earth | book of burglary | book of annihilations |\
            grand grimoire | necronomicon
KFEAT:  EP = scroll shop greed:10 use_all count:17 ; \
            scroll of blinking q:3 | scroll of blinking q:4 | scroll of blinking q:5 |\
            scroll of fog q:3 | scroll of fog q:4 | scroll of fog q:5 |\
            scroll of recharging q:3 | scroll of recharging q:4 | scroll of recharging q:5 |\
            scroll of silence q:3 | scroll of silence q:4 | scroll of silence q:5 |\
            scroll of fear q:5 | scroll of remove curse q:15 | scroll of enchant weapon iii q:6 |\
            scroll of enchant armour q:4 | scroll of enchant armour q:4
KFEAT:  FS = distillery shop use_all count:17 greed:10 ; \
             potion of speed q:3 | potion of speed q:4 | potion of speed q:5 |\
             potion of agility q:6 | potion of might q:6 | potion of brilliance q:6 |\
             potion of cure mutation | potion of cure mutation q:2 | potion of cure mutation q:3 |\
             potion of resistance q:3 | potion of resistance q:4 | potion of resistance q:5 |\
             potion of magic q:3 | potion of magic q:4 | potion of magic q:5 |\
             potion of berserk rage q:5 | potion of berserk rage q:5
KFEAT:  O = distillery shop type:Do-It-Yourself suffix:Clinic count:17 use_all greed:10 ; \
            potion of heal wounds q:3 | potion of heal wounds q:3 | potion of heal wounds q:3 |\
            potion of heal wounds q:3 | potion of heal wounds q:3 | potion of heal wounds q:3 |\
            potion of heal wounds q:3 | potion of heal wounds q:3 | potion of heal wounds q:3 |\
            potion of heal wounds q:3 | potion of heal wounds q:3 | potion of heal wounds q:3 |\
            potion of curing q:4 | potion of curing q:4 | potion of curing q:4 |\
            potion of curing q:4 | potion of curing q:4
KFEAT:  IJ = antiques shop type:Jewellery count:17 greed:16 ; \
             any jewellery randart
KFEAT:  K = antique armour shop count:17 use_all type:Advanced suffix:Armour greed:60 ; \
            pair of gloves randart | pair of gloves randart | pair of boots randart |\
            pair of boots randart | helmet randart | cap randart | buckler randart |\
            shield randart | cloak randart | cloak randart | robe randart | animal skin randart |\
            large shield randart | robe randart | buckler randart | wizard hat randart |\
            leather armour randart
KFEAT:  L = armour shop count:17 greed:12 type:Basic suffix:Armour use_all ; \
            mundane not_cursed storm dragon armour | mundane not_cursed fire dragon armour |\
            mundane not_cursed ice dragon armour | mundane not_cursed gold dragon armour |\
            mundane not_cursed steam dragon armour | mundane not_cursed swamp dragon armour |\
            mundane not_cursed pearl dragon armour | mundane not_cursed mottled dragon armour |\
            mundane not_cursed troll leather armour | mundane not_cursed crystal plate armour |\
            mundane not_cursed plate armour | mundane not_cursed naga barding |\
            mundane not_cursed centaur barding | mundane not_cursed cloak |\
            mundane not_cursed buckler | mundane not_cursed pair of gloves |\
            mundane not_cursed helmet
KFEAT:  M = food shop count:17 type:Bee suffix:Food greed:5 ; royal jelly q:3
KFEAT:  N = antiques shop type:Book suffix:Bin count:17 greed:16 ; any randbook
KFEAT:  Q = weapon shop type:Weapon suffix:Rack count:17 use_all greed:30 ; \
            mundane not_cursed quick blade | mundane not_cursed demon blade |\
            mundane not_cursed triple sword | mundane not_cursed broad axe |\
            mundane not_cursed executioner's axe | mundane not_cursed demon whip |\
            mundane not_cursed great mace | mundane not_cursed giant spiked club |\
            mundane not_cursed demon trident | mundane not_cursed bardiche |\
            mundane not_cursed lajatang | staff of fire | staff of air |\
            staff of earth | staff of cold | staff of poison | staff of death
KFEAT:  H = distillery shop type:Bottled suffix:Wisdom count:10 greed:10 ; | potion of experience
KFEAT:  R = general shop type:Premium suffix:Goods use_all count:17 greed:30 ; \
            quad damage | quad damage | quad damage | quad damage | wand of heal wounds charges:5 | \
            wand of hasting charges:5 | sultana q:200 | amulet of the gourmand | \
            amulet of clarity | amulet of stasis | ring of see invisible |\
            ring of poison resistance | ring of protection from fire | ring of protection from cold |\
            ring of protection from magic | ring of regeneration | crystal ball of energy
SUBST:  b : cb
TILE:   c = wall_marble
TILE:   m = dngn_transparent_wall_blue
KFEAT:  TUVWYZ!? = permadry_fountain
TILE:   TUVWYZ!? = floor_black_cobalt
COLOUR: TUVWYZ!? = magenta
MAP
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXcccccXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXccTTTccXXXXXXXXXXXXXX
XXXXXXXXXXXXXXc.....cXXXXXXXXXXXXXX
XXXXXXXXXXXXXXc.....ccXXXXXXXXXXXXX
XXXXXXXXXXXXccQ.....NccXXXXXXXXXXXX
XXXXXXXXXXXXcR.......McXXXXXXXXXXXX
XXXXXXXXXXXXcB.......BcXXXXXXXXXXXX
XXXXXXXXXXXXcB.......BcXXXXXXXXXXXX
XXXXXXXXXXXXc.........cXXXXXXXXXXXX
XXXXXXXXXXccc.........cccXXXXXXXXXX
XXXXXXXXXXcY...........ZcXXXXXXXXXX
XXXXXcccccc.m.........m.ccccccXXXXX
XXXXccIBB.......xxx.......BBFccXXXX
XXcccJ........m.xxx.m........ScccXX
Xcc.............xxx.............ccX
XcW..........xxx...xxx..........UcX
XcW..........xxx.{.xxx..........UcX
XcW..........xxx...xxx..........UcX
Xcc.............xxx.............ccX
XXcccK........m.xxx.m........HcccXX
XXXXccLBB.......xxx.......BBOccXXXX
XXXXXcccccc.m.........m.ccccccXXXXX
XXXXXXXXXXc!...........?cXXXXXXXXXX
XXXXXXXXXXccc.........cccXXXXXXXXXX
XXXXXXXXXXXXc.........cXXXXXXXXXXXX
XXXXXXXXXXXXcB.......BcXXXXXXXXXXXX
XXXXXXXXXXXXcB.......BcXXXXXXXXXXXX
XXXXXXXXXXXXcE.......DcXXXXXXXXXXXX
XXXXXXXXXXXXccP.....CccXXXXXXXXXXXX
XXXXXXXXXXXXXcc.....ccXXXXXXXXXXXXX
XXXXXXXXXXXXXXccVVVccXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXcccccXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
ENDMAP
