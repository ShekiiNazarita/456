Install instructions for Dungeon Crawl Stone Soup (DCSS)
--------------------------------------------------------

System Requirements
-------------------

DCSS runs on the following platforms:

- Linux
- Mac OS X
- Android
- Windows

Supported compilers are gcc (4.7 or newer) and clang (3.4 or newer).

There's no reason Crawl shouldn't work on other modern systems, especially
Unixy ones, although some porting may be needed.

Getting the Source
------------------

Clone the Crawl repository with:

    git clone git://gitorious.org/crawl/crawl.git

Building on Linux
-----------------

1. Install prerequisites. On APT-based systems, try:
     apt-get install build-essential libncursesw5-dev bison flex pkg-config \
     advancecomp

   For Yum-based systems, use:
     yum install gcc gcc-c++ make bison flex ncurses-devel pkgconfig \
     advancecomp

2. Building DCSS.

* cd to the base directory (crawl/) and download all contributing libraries:
    git submodule update --init

* cd to the source directory (crawl/crawl-ref/source/) and build DCSS:

    make # to build console
    make TILES=y # to build tiles

* You should now be able to play DCSS by running:

    crawl/crawl-ref/source/crawl

* To install Crawl system-wide rather than playing from the build
  directory:

  * Specify a directory to hold the save and data files.
    Specifying a PREFIX of /usr or /usr/local will default SAVEDIR to
    "~/.crawl" and DATADIR to $PREFIX/share/crawl. For example:
    make PREFIX=/usr

  * run 'make install' as root

Building on Mac OS X
--------------------

Before building on Mac OS X, you need to install Xcode from the App Store.

Mac builds then use the Unix build process described above, with slightly
different make commands.

To build the console version:
  make mac-app-console
For the graphical version:
  make mac-app-tiles

You'll find the app in build/app-bundle-stage, copy them to /Applications
to install for all users.

Note for Xcode-using developers: there is an old Xcode project file in the
repository. If you can fix it up and compile Crawl with it, let us know!


Building on Windows (MinGW)
---------------------------

NOTE: You cannot build Windows binaries on Windows 9x/ME using MinGW. On
9x/ME, you can use the Cygwin build instructions, or build a binary on a
Windows NT/2k/XP system (although it would require a good bit of porting to
run on 9x).

* To build Crawl on Windows, first download and install msysgit. msysgit is
  a full MinGW setup that even includes Git (which happens to be the source
  code management system used by the Crawl team). To get msysgit, click on
  the 'Download msysGit" button here:

    http://msysgit.github.io/#contribute

  Do not use the download button at the top of the page; that package does
  not contain make or g++.
  NOTE: msysgit should be installed to a path that does not contain spaces,
        such as the default location 'c:\msysgit'.

* The default msysgit has an old version of g++ that can't handle C++11. To
  update yours, win-builds is recommended. Follow the instructions at:

    http://win-builds.org/1.5-rc3/msys-cygwin.html#_win_builds_installation

* Start msys by running 'c:\msysgit\msys.bat'. Now you're in a MinGW build
  environment.

* cd to the the Crawl source directory. For instance, if you have the crawl
  sources in c:\crawl\source, you would type 'cd /c/crawl/source'.

* Build Crawl by running 'make'. If you want a graphical build, you will
  need to add 'TILES=y' on the 'make' command line.

* When the process finishes, you should be able to run crawl right from the
  source directory by typing './crawl'

* If the linker complains about missing Lua, you may need to compile once
  with 'BUILD_LUA=y' in the 'make' invocation. Some people have reported also
  needing to build with 'NO_PKGCONFIG=y', though building without it has
  worked fine for me.

* If you get a message about missing SDL.h even though you do have contribs
  installed, your version of msys may suffer from a bug that has been fixed
  since.  Please either update msys, or delete /mingw/bin/sdl-config so it
  won't interfere with the copy shipped with Crawl.

* For you stubborn types who insist on using separate msys and git installs,
  make sure git.exe is in your PATH when trying to build from git! Otherwise,
  util/gen_ver.pl will most likely fail to generate build.h.

Building on Windows (cygwin)
----------------------------

* Get Cygwin from http://www.cygwin.com/. When installing, ensure that the
  following packages are selected: gcc, g++, make, flex, bison,
  libncurses-devel.  If you'd like to build from git, install the git-core
  package.  You may also want to install diff, patch, and other such tools.

* Once Cygwin is installed, open a Cygwin bash shell (use the Start menu or
  desktop icon, do not double-click bash.exe in Explorer).

* cd to the the Crawl source directory. For instance, if you have the crawl
  sources in c:\crawl\source, you would type 'cd /cygdrive/c/crawl/source'.

* Follow the Linux build instructions to build Crawl.

Building on Windows (MSVC)
--------------------------

* If you do not have Visual Studio 2012 you can get the free Express edition
  (for Desktop) from http://www.microsoft.com/visualstudio/eng/downloads
  (look for Visual Studio Express 2012 for Windows Desktop).

* You'll need a perl environment, there are links to several Windows binaries
  you can choose from at http://www.perl.org/get.html

* In the Crawl source, run gen-all.cmd which is in source/util/. This step
  must be executed any time you update to a new version of the source (or
  if you have modified tile data or unrandarts).

* The first time you compile, you need to build the Contribs solution. This
  compiles various libraries which crawl itself needs to build. This only
  needs to be performed the first time you build, or if the contribs are
  ever updated (extremely rare). To do this open and compile Contribs.sln
  in source/contrib.

* Open crawl-ref.sln in Visual Studio, this is in source/MSVC/.

* You can now select Debug or Release from the drop-down build configurations
  menu on the main toolbar (it should be next to "Local Windows Debugger");
  crawl.exe can them be compiled by selecting "Build Solution" in the BUILD
  menu. You can quickly run it by selecting "Start without Debugging" in the
  debug menu (or debug with "Start Debugging" but the game will run extremely
  slowly). Note: the Release build can still be debugged using the Visual
  Studio debugger.

* Better support for Python (for the webserver project) and Lua (for the dat
  project) can be installed with these extensions:

  Python Tools for Visual Studio
  http://pytools.codeplex.com/releases

  Ports of VsLua to Visual Studio 2012
  http://www.dbfinteractive.com/forum/index.php?topic=5873.0
  http://pouet.net/topic.php?which=9087

  Try at your own risk, but the first one has been tested and found to be
  effective.
